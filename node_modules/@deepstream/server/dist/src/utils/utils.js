"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateUUID = exports.validateHashingAlgorithm = exports.createHash = exports.PromiseDelay = exports.isExcluded = exports.deepFreeze = exports.shuffleArray = exports.spliceRandomElement = exports.getRandomIntInRange = exports.merge = exports.validateMap = exports.isOfType = exports.reverseMap = exports.getUid = void 0;
const url = require("url");
const crypto = require("crypto");
/**
 * Returns a unique identifier
 */
let getUid = function () {
    return `${Date.now().toString(36)}-${(Math.random() * 10000000000000000000).toString(36)}`;
};
exports.getUid = getUid;
/**
 * Takes a key-value map and returns
 * a map with { value: key } of the old map
 */
let reverseMap = function (map) {
    const reversedMap = {};
    for (const key in map) {
        // @ts-ignore
        reversedMap[map[key]] = key;
    }
    return reversedMap;
};
exports.reverseMap = reverseMap;
/**
 * Extended version of the typeof operator. Also supports 'array'
 * and 'url' to check for valid URL schemas
 */
let isOfType = function (input, expectedType) {
    if (input === null) {
        return expectedType === 'null';
    }
    else if (expectedType === 'array') {
        return Array.isArray(input);
    }
    else if (expectedType === 'url') {
        return !!url.parse(input).host;
    }
    return typeof input === expectedType;
};
exports.isOfType = isOfType;
/**
 * Takes a map and validates it against a basic
 * json schema in the form { key: type }
 * @returns {Boolean|Error}
 */
let validateMap = function (map, throwError, schema) {
    let error;
    let key;
    for (key in schema) {
        if (typeof map[key] === 'undefined') {
            error = new Error(`Missing key ${key}`);
            break;
        }
        if (!exports.isOfType(map[key], schema[key])) {
            error = new Error(`Invalid type ${typeof map[key]} for ${key}`);
            break;
        }
    }
    if (error) {
        if (throwError) {
            throw error;
        }
        else {
            return error;
        }
    }
    else {
        return true;
    }
};
exports.validateMap = validateMap;
/**
 * Multi Object recursive merge
 * @param {Object} multiple objects to be merged into each other recursively
 */
let merge = function (...args) {
    const result = {};
    const objs = Array.prototype.slice.apply(arguments);
    let i;
    const internalMerge = (objA, objB) => {
        let key;
        for (key in objB) {
            if (objB[key] && objB[key].constructor === Object) {
                objA[key] = objA[key] || {};
                internalMerge(objA[key], objB[key]);
            }
            else if (objB[key] !== undefined) {
                objA[key] = objB[key];
            }
        }
    };
    for (i = 0; i < objs.length; i++) {
        internalMerge(result, objs[i]);
    }
    return result;
};
exports.merge = merge;
let getRandomIntInRange = function (min, max) {
    return min + Math.floor(Math.random() * (max - min));
};
exports.getRandomIntInRange = getRandomIntInRange;
let spliceRandomElement = function (array) {
    const randomIndex = exports.getRandomIntInRange(0, array.length);
    return array.splice(randomIndex, 1)[0];
};
exports.spliceRandomElement = spliceRandomElement;
/**
 * Randomize array element order in-place.
 * Using Durstenfeld shuffle algorithm.
 */
let shuffleArray = function (array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        const temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
    return array;
};
exports.shuffleArray = shuffleArray;
/*
 * Recursively freeze a deeply nested object
 * https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze
 */
let deepFreeze = function (obj) {
    // Retrieve the property names defined on obj
    const propNames = Object.getOwnPropertyNames(obj);
    // Freeze properties before freezing self
    propNames.forEach((name) => {
        const prop = obj[name];
        // Freeze prop if it is an object
        if (typeof prop === 'object' && prop !== null) {
            exports.deepFreeze(prop);
        }
    });
    // Freeze self (no-op if already frozen)
    return Object.freeze(obj);
};
exports.deepFreeze = deepFreeze;
/**
 * Check whether a record name should be excluded from storage
 */
const isExcluded = function (exclusionPrefixes, recordName) {
    if (!exclusionPrefixes) {
        return false;
    }
    for (const exclusionPrefix of exclusionPrefixes) {
        if (recordName.startsWith(exclusionPrefix)) {
            return true;
        }
    }
    return false;
};
exports.isExcluded = isExcluded;
const PromiseDelay = (timeout) => {
    return new Promise((resolve) => setTimeout(resolve, timeout));
};
exports.PromiseDelay = PromiseDelay;
/**
 * Utility method for creating hashes including salts based on
 * the provided parameters
 */
const createHash = (password, settings, salt = crypto.randomBytes(16).toString('base64')) => {
    return new Promise((resolve, reject) => {
        crypto.pbkdf2(password, salt, settings.iterations, settings.keyLength, settings.algorithm, (err, hash) => {
            err ? reject(err) : resolve({ hash, salt });
        });
    });
};
exports.createHash = createHash;
const validateHashingAlgorithm = (hash) => {
    if (crypto.getHashes().indexOf(hash) === -1) {
        throw new Error(`Unknown Hash ${hash}`);
    }
};
exports.validateHashingAlgorithm = validateHashingAlgorithm;
const uuidPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
const validateUUID = (uuid) => {
    return uuidPattern.test(uuid.toLowerCase());
};
exports.validateUUID = validateUUID;
//# sourceMappingURL=utils.js.map