import 'mocha';
import { TOPIC } from '../constants';
export default class ListenerTestUtils {
    private actions;
    private subscribedTopics;
    private topic;
    private subscribers;
    private clientRegistryMock;
    private providers;
    private clients;
    private listenerRegistry;
    private clientRegistry;
    constructor(listenerTopic?: TOPIC.RECORD | TOPIC.EVENT);
    complete(): void;
    /**
    * Provider Utils
    */
    providerListensTo(provider: number, pattern: string): void;
    providerUnlistensTo(provider: number, pattern: string): void;
    providerWillGetListenTimeout(provider: number, subscription: string): void;
    providerWillGetSubscriptionFound(provider: number, pattern: string, subscription: string): void;
    providerWillGetSubscriptionRemoved(provider: number, pattern: string, subscription: string): void;
    providerAcceptsButIsntAcknowledged(provider: number, pattern: string, subscriptionName: string): void;
    providerAccepts(provider: number, pattern: string, subscription: string, doesnthaveActiveProvider: boolean): void;
    providerRejectsAndPreviousTimeoutProviderThatAcceptedIsUsed(provider: number, pattern: string, subscriptionName: string): void;
    providerAcceptsAndIsSentSubscriptionRemoved(provider: number, pattern: string, subscriptionName: string): void;
    providerRejects(provider: number, pattern: string, subscription: string, doNotCheckActiveProvider: boolean): void;
    acceptMessageThrowsError(provider: number, pattern: string, subscription: string): void;
    rejectMessageThrowsError(provider: number, pattern: string, subscription: string): void;
    providerLosesItsConnection(provider: number): void;
    /**
    * Subscriber Utils
    */
    subscriptionAlreadyMadeFor(subscriptionName: string): void;
    clientSubscribesTo(client: number, subscriptionName: string, firstSubscription: boolean): void;
    clientUnsubscribesTo(client: number, subscriptionName: string, lastSubscription: boolean): void;
    clientWillRecievePublishedUpdate(client: number, subscription: string, state: boolean): void;
    publishUpdateWillBeSentToSubscribers(subscription: string, state: boolean): void;
    subscriptionHasActiveProvider(subscription: string, value: string): void;
}
