import { SocketWrapper, DeepstreamServices, DeepstreamConfig } from '@deepstream/types';
import { Message } from '../../constants';
declare type onCompleteCallback = (recordName: string, version: number, data: any, socket: SocketWrapper | null, message?: Message) => void;
declare type onErrorCallback = (event: any, errorMessage: string, recordName: string, socket: SocketWrapper | null, message?: Message) => void;
/**
 * This function retrieves a single record from the cache or - if it isn't in the
 * cache - from storage. If it isn't there either it will notify its initiator
 * by passing null to onComplete (but not call onError).
 *
 * It also handles all the timeout and destruction steps around this operation
 */
export declare function recordRequest(recordName: string, config: DeepstreamConfig, services: DeepstreamServices, socketWrapper: SocketWrapper | null, onComplete: onCompleteCallback, onError: onErrorCallback, context: any, metaData?: any, message?: Message, promoteToCache?: boolean): void;
export declare function recordRequestBinding(config: DeepstreamConfig, services: DeepstreamServices, context: any, metaData: any): (recordName: string, socketWrapper: SocketWrapper, onComplete: onCompleteCallback, onError: onErrorCallback, message?: Message | undefined) => void;
export {};
