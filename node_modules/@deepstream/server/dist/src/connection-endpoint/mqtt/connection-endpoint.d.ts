/// <reference types="node" />
import { DeepstreamServices, SocketWrapper, DeepstreamConfig } from '@deepstream/types';
import ConnectionEndpoint, { WebSocketServerConfig } from '../base/connection-endpoint';
import { Server as TCPServer } from 'net';
import { Server as TLSServer } from 'tls';
export interface MQTTConnectionEndpointConfig extends WebSocketServerConfig {
    port: number;
    host: string;
    idleTimeout: number;
    ssl?: {
        key: string;
        cert: string;
    };
}
/**
 * This is the frontmost class of deepstream's message pipeline. It receives
 * connections and authentication requests, authenticates sockets and
 * forwards messages it receives from authenticated sockets.
 */
export declare class MQTTConnectionEndpoint extends ConnectionEndpoint {
    private mqttOptions;
    private server;
    private connections;
    private logger;
    private isReady;
    private emitter;
    constructor(mqttOptions: MQTTConnectionEndpointConfig, services: DeepstreamServices, config: DeepstreamConfig);
    whenReady(): Promise<void>;
    close(): Promise<void>;
    /**
     * Initialize the ws endpoint, setup callbacks etc.
     */
    createWebsocketServer(): TCPServer | TLSServer;
    closeWebsocketServer(): Promise<unknown>;
    onSocketWrapperClosed(socketWrapper: SocketWrapper): void;
}
