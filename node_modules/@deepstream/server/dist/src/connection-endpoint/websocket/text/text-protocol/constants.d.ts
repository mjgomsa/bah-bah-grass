import { AUTH_ACTION as AA, CONNECTION_ACTION as CA, EVENT_ACTION as EA, PARSER_ACTION as XA, PRESENCE_ACTION as UA, RECORD_ACTION as RA, RPC_ACTION as PA, TOPIC as T } from '../../../../constants';
export declare const MESSAGE_SEPERATOR: string;
export declare const MESSAGE_PART_SEPERATOR: string;
export declare const PAYLOAD_ENCODING: {
    JSON: number;
    DEEPSTREAM: number;
};
export declare const TOPIC: {
    PARSER: {
        TEXT: string;
        BYTE: T;
    };
    CONNECTION: {
        TEXT: string;
        BYTE: T;
    };
    AUTH: {
        TEXT: string;
        BYTE: T;
    };
    ERROR: {
        TEXT: string;
        BYTE: T;
    };
    EVENT: {
        TEXT: string;
        BYTE: T;
    };
    RECORD: {
        TEXT: string;
        BYTE: T;
    };
    RPC: {
        TEXT: string;
        BYTE: T;
    };
    PRESENCE: {
        TEXT: string;
        BYTE: T;
    };
};
export declare const PARSER_ACTIONS: {
    UNKNOWN_TOPIC: {
        BYTE: XA;
    };
    UNKNOWN_ACTION: {
        BYTE: XA;
    };
    INVALID_MESSAGE: {
        BYTE: XA;
    };
    INVALID_META_PARAMS: {
        BYTE: XA;
    };
    MESSAGE_PARSE_ERROR: {
        BYTE: XA;
    };
    MAXIMUM_MESSAGE_SIZE_EXCEEDED: {
        BYTE: XA;
    };
    ERROR: {
        BYTE: XA;
    };
};
export declare const CONNECTION_ACTIONS: {
    ERROR: {
        TEXT: string;
        BYTE: CA;
    };
    PING: {
        TEXT: string;
        BYTE: CA;
    };
    PONG: {
        TEXT: string;
        BYTE: CA;
    };
    ACCEPT: {
        TEXT: string;
        BYTE: CA;
    };
    CHALLENGE: {
        TEXT: string;
        BYTE: CA;
    };
    REJECTION: {
        TEXT: string;
        BYTE: CA;
    };
    REDIRECT: {
        TEXT: string;
        BYTE: CA;
    };
    CLOSED: {
        BYTE: CA;
    };
    CLOSING: {
        BYTE: CA;
    };
    CONNECTION_AUTHENTICATION_TIMEOUT: {
        BYTE: CA;
    };
    INVALID_MESSAGE: {
        BYTE: CA;
    };
};
export declare const AUTH_ACTIONS: {
    ERROR: {
        TEXT: string;
        BYTE: AA;
    };
    REQUEST: {
        TEXT: string;
        BYTE: AA;
    };
    AUTH_SUCCESSFUL: {
        BYTE: AA;
        PAYLOAD_ENCODING: number;
    };
    AUTH_UNSUCCESSFUL: {
        BYTE: AA;
        PAYLOAD_ENCODING: number;
    };
    TOO_MANY_AUTH_ATTEMPTS: {
        BYTE: AA;
    };
    INVALID_MESSAGE_DATA: {
        BYTE: AA;
    };
    INVALID_MESSAGE: {
        BYTE: AA;
    };
};
export declare const EVENT_ACTIONS: {
    ERROR: {
        TEXT: string;
        BYTE: EA;
    };
    EMIT: {
        TEXT: string;
        BYTE: EA;
        PAYLOAD_ENCODING: number;
    };
    SUBSCRIBE: {
        TEXT: string;
        BYTE: EA;
    };
    UNSUBSCRIBE: {
        TEXT: string;
        BYTE: EA;
    };
    LISTEN: {
        TEXT: string;
        BYTE: EA;
    };
    UNLISTEN: {
        TEXT: string;
        BYTE: EA;
    };
    LISTEN_ACCEPT: {
        TEXT: string;
        BYTE: EA;
    };
    LISTEN_REJECT: {
        TEXT: string;
        BYTE: EA;
    };
    SUBSCRIPTION_FOR_PATTERN_FOUND: {
        TEXT: string;
        BYTE: EA;
    };
    SUBSCRIPTION_FOR_PATTERN_REMOVED: {
        TEXT: string;
        BYTE: EA;
    };
    MESSAGE_PERMISSION_ERROR: {
        BYTE: EA;
    };
    MESSAGE_DENIED: {
        BYTE: EA;
    };
    INVALID_MESSAGE_DATA: {
        BYTE: EA;
    };
    MULTIPLE_SUBSCRIPTIONS: {
        BYTE: EA;
    };
    NOT_SUBSCRIBED: {
        BYTE: EA;
    };
};
export declare const RECORD_ACTIONS: {
    ERROR: {
        TEXT: string;
        BYTE: RA;
    };
    CREATE: {
        TEXT: string;
        BYTE: RA;
    };
    READ: {
        TEXT: string;
        BYTE: RA;
    };
    READ_RESPONSE: {
        BYTE: RA;
        PAYLOAD_ENCODING: number;
    };
    HEAD: {
        TEXT: string;
        BYTE: RA;
    };
    HEAD_RESPONSE: {
        BYTE: RA;
    };
    CREATEANDUPDATE: {
        TEXT: string;
        BYTE: RA;
    };
    CREATEANDPATCH: {
        BYTE: RA;
        PAYLOAD_ENCODING: number;
    };
    UPDATE: {
        TEXT: string;
        BYTE: RA;
        PAYLOAD_ENCODING: number;
    };
    PATCH: {
        TEXT: string;
        BYTE: RA;
        PAYLOAD_ENCODING: number;
    };
    ERASE: {
        BYTE: RA;
        PAYLOAD_ENCODING: number;
    };
    WRITE_ACKNOWLEDGEMENT: {
        TEXT: string;
        BYTE: RA;
    };
    DELETE: {
        TEXT: string;
        BYTE: RA;
    };
    DELETE_SUCCESS: {
        BYTE: RA;
    };
    DELETED: {
        BYTE: RA;
    };
    LISTEN_RESPONSE_TIMEOUT: {
        BYTE: RA;
    };
    SUBSCRIBEANDHEAD: {
        BYTE: RA;
    };
    SUBSCRIBEANDREAD: {
        BYTE: RA;
    };
    SUBSCRIBECREATEANDREAD: {
        TEXT: string;
        BYTE: RA;
    };
    SUBSCRIBECREATEANDUPDATE: {
        BYTE: RA;
    };
    SUBSCRIBE: {
        TEXT: string;
        BYTE: RA;
    };
    UNSUBSCRIBE: {
        TEXT: string;
        BYTE: RA;
    };
    LISTEN: {
        TEXT: string;
        BYTE: RA;
    };
    UNLISTEN: {
        TEXT: string;
        BYTE: RA;
    };
    LISTEN_ACCEPT: {
        TEXT: string;
        BYTE: RA;
    };
    LISTEN_REJECT: {
        TEXT: string;
        BYTE: RA;
    };
    SUBSCRIPTION_HAS_PROVIDER: {
        TEXT: string;
        BYTE: RA;
    };
    SUBSCRIPTION_HAS_NO_PROVIDER: {
        BYTE: RA;
    };
    SUBSCRIPTION_FOR_PATTERN_FOUND: {
        TEXT: string;
        BYTE: RA;
    };
    SUBSCRIPTION_FOR_PATTERN_REMOVED: {
        TEXT: string;
        BYTE: RA;
    };
    CACHE_RETRIEVAL_TIMEOUT: {
        BYTE: RA;
    };
    STORAGE_RETRIEVAL_TIMEOUT: {
        BYTE: RA;
    };
    VERSION_EXISTS: {
        BYTE: RA;
    };
    SNAPSHOT: {
        TEXT: string;
        BYTE: RA;
    };
    RECORD_LOAD_ERROR: {
        BYTE: RA;
    };
    RECORD_CREATE_ERROR: {
        BYTE: RA;
    };
    RECORD_UPDATE_ERROR: {
        BYTE: RA;
    };
    RECORD_DELETE_ERROR: {
        BYTE: RA;
    };
    RECORD_NOT_FOUND: {
        BYTE: RA;
    };
    INVALID_VERSION: {
        BYTE: RA;
    };
    INVALID_PATCH_ON_HOTPATH: {
        BYTE: RA;
    };
    MESSAGE_PERMISSION_ERROR: {
        BYTE: RA;
    };
    MESSAGE_DENIED: {
        BYTE: RA;
    };
    INVALID_MESSAGE_DATA: {
        BYTE: RA;
    };
    MULTIPLE_SUBSCRIPTIONS: {
        BYTE: RA;
    };
    NOT_SUBSCRIBED: {
        BYTE: RA;
    };
};
export declare const RPC_ACTIONS: {
    ERROR: {
        BYTE: PA;
    };
    REQUEST: {
        TEXT: string;
        BYTE: PA;
        PAYLOAD_ENCODING: number;
    };
    ACCEPT: {
        BYTE: PA;
    };
    RESPONSE: {
        TEXT: string;
        BYTE: PA;
        PAYLOAD_ENCODING: number;
    };
    REJECT: {
        TEXT: string;
        BYTE: PA;
    };
    REQUEST_ERROR: {
        TEXT: string;
        BYTE: PA;
        PAYLOAD_ENCODING: number;
    };
    PROVIDE: {
        TEXT: string;
        BYTE: PA;
    };
    UNPROVIDE: {
        TEXT: string;
        BYTE: PA;
    };
    NO_RPC_PROVIDER: {
        BYTE: PA;
    };
    RESPONSE_TIMEOUT: {
        BYTE: PA;
    };
    ACCEPT_TIMEOUT: {
        BYTE: PA;
    };
    MULTIPLE_ACCEPT: {
        BYTE: PA;
    };
    MULTIPLE_RESPONSE: {
        BYTE: PA;
    };
    INVALID_RPC_CORRELATION_ID: {
        BYTE: PA;
    };
    MESSAGE_PERMISSION_ERROR: {
        BYTE: PA;
    };
    MESSAGE_DENIED: {
        BYTE: PA;
    };
    INVALID_MESSAGE_DATA: {
        BYTE: PA;
    };
    MULTIPLE_PROVIDERS: {
        BYTE: PA;
    };
    NOT_PROVIDED: {
        BYTE: PA;
    };
};
export declare const PRESENCE_ACTIONS: {
    ERROR: {
        TEXT: string;
        BYTE: UA;
    };
    QUERY_ALL: {
        BYTE: UA;
    };
    QUERY_ALL_RESPONSE: {
        BYTE: UA;
        PAYLOAD_ENCODING: number;
    };
    QUERY: {
        TEXT: string;
        BYTE: UA;
    };
    QUERY_RESPONSE: {
        BYTE: UA;
        PAYLOAD_ENCODING: number;
    };
    PRESENCE_JOIN: {
        TEXT: string;
        BYTE: UA;
    };
    PRESENCE_JOIN_ALL: {
        TEXT: string;
        BYTE: UA;
    };
    PRESENCE_LEAVE: {
        TEXT: string;
        BYTE: UA;
    };
    PRESENCE_LEAVE_ALL: {
        TEXT: string;
        BYTE: UA;
    };
    SUBSCRIBE: {
        TEXT: string;
        BYTE: UA;
    };
    UNSUBSCRIBE: {
        TEXT: string;
        BYTE: UA;
    };
    SUBSCRIBE_ALL: {
        BYTE: UA;
    };
    UNSUBSCRIBE_ALL: {
        BYTE: UA;
    };
    INVALID_PRESENCE_USERS: {
        BYTE: UA;
    };
    MESSAGE_PERMISSION_ERROR: {
        BYTE: UA;
    };
    MESSAGE_DENIED: {
        BYTE: UA;
    };
    MULTIPLE_SUBSCRIPTIONS: {
        BYTE: UA;
    };
    NOT_SUBSCRIBED: {
        BYTE: UA;
    };
};
export declare const DEEPSTREAM_TYPES: {
    STRING: string;
    OBJECT: string;
    NUMBER: string;
    NULL: string;
    TRUE: string;
    FALSE: string;
    UNDEFINED: string;
};
export declare const TOPIC_BYTE_TO_TEXT: any;
export declare const TOPIC_TEXT_TO_BYTE: any;
export declare const TOPIC_TEXT_TO_KEY: any;
export declare const TOPIC_BYTE_TO_KEY: any;
export declare const TOPIC_BYTES: any;
export declare const ACTIONS_BYTE_TO_PAYLOAD: any;
export declare const ACTIONS_BYTE_TO_TEXT: any;
export declare const ACTIONS_TEXT_TO_BYTE: any;
export declare const ACTIONS_BYTES: any;
export declare const ACTIONS_TEXT_TO_KEY: any;
export declare const ACTIONS_BYTE_TO_KEY: any;
export declare const ACTIONS: {
    [x: number]: {
        UNKNOWN_TOPIC: {
            BYTE: XA;
        };
        UNKNOWN_ACTION: {
            BYTE: XA;
        };
        INVALID_MESSAGE: {
            BYTE: XA;
        };
        INVALID_META_PARAMS: {
            BYTE: XA;
        };
        MESSAGE_PARSE_ERROR: {
            BYTE: XA;
        };
        MAXIMUM_MESSAGE_SIZE_EXCEEDED: {
            BYTE: XA;
        };
        ERROR: {
            BYTE: XA;
        };
    } | {
        ERROR: {
            TEXT: string;
            BYTE: CA;
        };
        PING: {
            TEXT: string;
            BYTE: CA;
        };
        PONG: {
            TEXT: string;
            BYTE: CA;
        };
        ACCEPT: {
            TEXT: string;
            BYTE: CA;
        };
        CHALLENGE: {
            TEXT: string;
            BYTE: CA;
        };
        REJECTION: {
            TEXT: string;
            BYTE: CA;
        };
        REDIRECT: {
            TEXT: string;
            BYTE: CA;
        };
        CLOSED: {
            BYTE: CA;
        };
        CLOSING: {
            BYTE: CA;
        };
        CONNECTION_AUTHENTICATION_TIMEOUT: {
            BYTE: CA;
        };
        INVALID_MESSAGE: {
            BYTE: CA;
        };
    } | {
        ERROR: {
            TEXT: string;
            BYTE: AA;
        };
        REQUEST: {
            TEXT: string;
            BYTE: AA;
        };
        AUTH_SUCCESSFUL: {
            BYTE: AA;
            PAYLOAD_ENCODING: number;
        };
        AUTH_UNSUCCESSFUL: {
            BYTE: AA;
            PAYLOAD_ENCODING: number;
        };
        TOO_MANY_AUTH_ATTEMPTS: {
            BYTE: AA;
        };
        INVALID_MESSAGE_DATA: {
            BYTE: AA;
        };
        INVALID_MESSAGE: {
            BYTE: AA;
        };
    } | {
        ERROR: {
            TEXT: string;
            BYTE: EA;
        };
        EMIT: {
            TEXT: string;
            BYTE: EA;
            PAYLOAD_ENCODING: number;
        };
        SUBSCRIBE: {
            TEXT: string;
            BYTE: EA;
        };
        UNSUBSCRIBE: {
            TEXT: string;
            BYTE: EA;
        };
        LISTEN: {
            TEXT: string;
            BYTE: EA;
        };
        UNLISTEN: {
            TEXT: string;
            BYTE: EA;
        };
        LISTEN_ACCEPT: {
            TEXT: string;
            BYTE: EA;
        };
        LISTEN_REJECT: {
            TEXT: string;
            BYTE: EA;
        };
        SUBSCRIPTION_FOR_PATTERN_FOUND: {
            TEXT: string;
            BYTE: EA;
        };
        SUBSCRIPTION_FOR_PATTERN_REMOVED: {
            TEXT: string;
            BYTE: EA;
        };
        MESSAGE_PERMISSION_ERROR: {
            BYTE: EA;
        };
        MESSAGE_DENIED: {
            BYTE: EA;
        };
        INVALID_MESSAGE_DATA: {
            BYTE: EA;
        };
        MULTIPLE_SUBSCRIPTIONS: {
            BYTE: EA;
        };
        NOT_SUBSCRIBED: {
            BYTE: EA;
        };
    } | {
        ERROR: {
            TEXT: string;
            BYTE: RA;
        };
        CREATE: {
            TEXT: string;
            BYTE: RA;
        };
        READ: {
            TEXT: string;
            BYTE: RA;
        };
        READ_RESPONSE: {
            BYTE: RA;
            PAYLOAD_ENCODING: number;
        };
        HEAD: {
            TEXT: string;
            BYTE: RA;
        };
        HEAD_RESPONSE: {
            BYTE: RA;
        };
        CREATEANDUPDATE: {
            TEXT: string;
            BYTE: RA;
        };
        CREATEANDPATCH: {
            BYTE: RA;
            PAYLOAD_ENCODING: number;
        };
        UPDATE: {
            TEXT: string;
            BYTE: RA;
            PAYLOAD_ENCODING: number;
        };
        PATCH: {
            TEXT: string;
            BYTE: RA;
            PAYLOAD_ENCODING: number;
        };
        ERASE: {
            BYTE: RA;
            PAYLOAD_ENCODING: number;
        };
        WRITE_ACKNOWLEDGEMENT: {
            TEXT: string;
            BYTE: RA;
        };
        DELETE: {
            TEXT: string;
            BYTE: RA;
        };
        DELETE_SUCCESS: {
            BYTE: RA;
        };
        DELETED: {
            BYTE: RA;
        };
        LISTEN_RESPONSE_TIMEOUT: {
            BYTE: RA;
        };
        SUBSCRIBEANDHEAD: {
            BYTE: RA;
        };
        SUBSCRIBEANDREAD: {
            BYTE: RA;
        };
        SUBSCRIBECREATEANDREAD: {
            TEXT: string;
            BYTE: RA;
        };
        SUBSCRIBECREATEANDUPDATE: {
            BYTE: RA;
        };
        SUBSCRIBE: {
            TEXT: string;
            BYTE: RA;
        };
        UNSUBSCRIBE: {
            TEXT: string;
            BYTE: RA;
        };
        LISTEN: {
            TEXT: string;
            BYTE: RA;
        };
        UNLISTEN: {
            TEXT: string;
            BYTE: RA;
        };
        LISTEN_ACCEPT: {
            TEXT: string;
            BYTE: RA;
        };
        LISTEN_REJECT: {
            TEXT: string;
            BYTE: RA;
        };
        SUBSCRIPTION_HAS_PROVIDER: {
            TEXT: string;
            BYTE: RA;
        };
        SUBSCRIPTION_HAS_NO_PROVIDER: {
            BYTE: RA;
        };
        SUBSCRIPTION_FOR_PATTERN_FOUND: {
            TEXT: string;
            BYTE: RA;
        };
        SUBSCRIPTION_FOR_PATTERN_REMOVED: {
            TEXT: string;
            BYTE: RA;
        };
        CACHE_RETRIEVAL_TIMEOUT: {
            BYTE: RA;
        };
        STORAGE_RETRIEVAL_TIMEOUT: {
            BYTE: RA;
        };
        VERSION_EXISTS: {
            BYTE: RA;
        };
        SNAPSHOT: {
            TEXT: string;
            BYTE: RA;
        };
        RECORD_LOAD_ERROR: {
            BYTE: RA;
        };
        RECORD_CREATE_ERROR: {
            BYTE: RA;
        };
        RECORD_UPDATE_ERROR: {
            BYTE: RA;
        };
        RECORD_DELETE_ERROR: {
            BYTE: RA;
        };
        RECORD_NOT_FOUND: {
            BYTE: RA;
        };
        INVALID_VERSION: {
            BYTE: RA;
        };
        INVALID_PATCH_ON_HOTPATH: {
            BYTE: RA;
        };
        MESSAGE_PERMISSION_ERROR: {
            BYTE: RA;
        };
        MESSAGE_DENIED: {
            BYTE: RA;
        };
        INVALID_MESSAGE_DATA: {
            BYTE: RA;
        };
        MULTIPLE_SUBSCRIPTIONS: {
            BYTE: RA;
        };
        NOT_SUBSCRIBED: {
            BYTE: RA;
        };
    } | {
        ERROR: {
            BYTE: PA;
        };
        REQUEST: {
            TEXT: string;
            BYTE: PA;
            PAYLOAD_ENCODING: number;
        };
        ACCEPT: {
            BYTE: PA;
        };
        RESPONSE: {
            TEXT: string;
            BYTE: PA;
            PAYLOAD_ENCODING: number;
        };
        REJECT: {
            TEXT: string;
            BYTE: PA;
        };
        REQUEST_ERROR: {
            TEXT: string;
            BYTE: PA;
            PAYLOAD_ENCODING: number;
        };
        PROVIDE: {
            TEXT: string;
            BYTE: PA;
        };
        UNPROVIDE: {
            TEXT: string;
            BYTE: PA;
        };
        NO_RPC_PROVIDER: {
            BYTE: PA;
        };
        RESPONSE_TIMEOUT: {
            BYTE: PA;
        };
        ACCEPT_TIMEOUT: {
            BYTE: PA;
        };
        MULTIPLE_ACCEPT: {
            BYTE: PA;
        };
        MULTIPLE_RESPONSE: {
            BYTE: PA;
        };
        INVALID_RPC_CORRELATION_ID: {
            BYTE: PA;
        };
        MESSAGE_PERMISSION_ERROR: {
            BYTE: PA;
        };
        MESSAGE_DENIED: {
            BYTE: PA;
        };
        INVALID_MESSAGE_DATA: {
            BYTE: PA;
        };
        MULTIPLE_PROVIDERS: {
            BYTE: PA;
        };
        NOT_PROVIDED: {
            BYTE: PA;
        };
    } | {
        ERROR: {
            TEXT: string;
            BYTE: UA;
        };
        QUERY_ALL: {
            BYTE: UA;
        };
        QUERY_ALL_RESPONSE: {
            BYTE: UA;
            PAYLOAD_ENCODING: number;
        };
        QUERY: {
            TEXT: string;
            BYTE: UA;
        };
        QUERY_RESPONSE: {
            BYTE: UA;
            PAYLOAD_ENCODING: number;
        };
        PRESENCE_JOIN: {
            TEXT: string;
            BYTE: UA;
        };
        PRESENCE_JOIN_ALL: {
            TEXT: string;
            BYTE: UA;
        };
        PRESENCE_LEAVE: {
            TEXT: string;
            BYTE: UA;
        };
        PRESENCE_LEAVE_ALL: {
            TEXT: string;
            BYTE: UA;
        };
        SUBSCRIBE: {
            TEXT: string;
            BYTE: UA;
        };
        UNSUBSCRIBE: {
            TEXT: string;
            BYTE: UA;
        };
        SUBSCRIBE_ALL: {
            BYTE: UA;
        };
        UNSUBSCRIBE_ALL: {
            BYTE: UA;
        };
        INVALID_PRESENCE_USERS: {
            BYTE: UA;
        };
        MESSAGE_PERMISSION_ERROR: {
            BYTE: UA;
        };
        MESSAGE_DENIED: {
            BYTE: UA;
        };
        MULTIPLE_SUBSCRIPTIONS: {
            BYTE: UA;
        };
        NOT_SUBSCRIBED: {
            BYTE: UA;
        };
    };
};
