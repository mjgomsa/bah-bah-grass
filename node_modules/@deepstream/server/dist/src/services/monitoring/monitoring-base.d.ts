import { Message } from '@deepstream/protobuf/dist/types/messages';
import { DeepstreamMonitoring, DeepstreamPlugin, DeepstreamServices, LOG_LEVEL, EVENT } from '@deepstream/types';
export declare abstract class MonitoringBase extends DeepstreamPlugin implements DeepstreamMonitoring {
    protected services: DeepstreamServices;
    private errorLogs;
    private receiveStats;
    private sendStats;
    private loginStats;
    constructor(services: DeepstreamServices);
    onErrorLog(loglevel: LOG_LEVEL, event: EVENT, logMessage: string): void;
    /**
     * Called whenever a login attempt is tried and whether or not it succeeded, as well
     * as the connection-endpoint type, which is provided from the connection endpoint
     * itself
     */
    onLogin(allowed: boolean, endpointType: string): void;
    onMessageReceived(message: Message): void;
    onMessageSend(message: Message): void;
    onBroadcast(message: Message, count: number): void;
    getAndResetMonitoringStats(): {
        clusterSize: number;
        stateMetrics: any;
        errors: {
            [index: string]: number;
        };
        received: {
            [index: string]: {
                [index: string]: number;
            };
        };
        send: {
            [index: string]: {
                [index: string]: number;
            };
        };
        logins: {
            [index: string]: {
                allowed: number;
                declined: number;
            };
        };
    };
    private getStateMetrics;
}
