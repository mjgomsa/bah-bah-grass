"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("@deepstream/types");
const monitoring_base_1 = require("../monitoring-base");
class HTTPMonitoring extends monitoring_base_1.MonitoringBase {
    constructor(pluginOptions, services) {
        super(services);
        this.pluginOptions = pluginOptions;
        this.description = `HTTP Monitoring on ${this.pluginOptions.url}`;
        this.logger = this.services.logger.getNameSpace('HTTP_MONITORING');
        process.nextTick(() => {
            if (typeof pluginOptions.url !== 'string') {
                this.logger.fatal(types_1.EVENT.PLUGIN_INITIALIZATION_ERROR, 'Missing "url" for HTTP Monitoring');
            }
            if (this.pluginOptions.allowOpenPermissions) {
                this.logger.warn(types_1.EVENT.PLUGIN_INITIALIZATION_ERROR, '"allowOpenPermissions" is set. Try not to deploy to production');
            }
            else if (!pluginOptions.headerKey || !pluginOptions.headerValue) {
                this.logger.fatal(types_1.EVENT.PLUGIN_INITIALIZATION_ERROR, 'Missing "headerKey" and/or "headerValue"');
            }
        });
    }
    async whenReady() {
        await this.services.httpService.whenReady();
        let from = Date.now();
        this.services.httpService.registerGetPathPrefix(this.pluginOptions.url, (metaData, response) => {
            if (this.pluginOptions.allowOpenPermissions !== true) {
                if (metaData.headers[this.pluginOptions.headerKey] !== this.pluginOptions.headerValue) {
                    this.logger.warn(types_1.EVENT.AUTH_ERROR, 'Invalid monitoring data due to missing or invalid header values');
                    return response({
                        statusCode: 404,
                        message: 'Endpoint not found.'
                    });
                }
            }
            const to = Date.now();
            response(null, {
                from,
                to,
                ...this.getAndResetMonitoringStats()
            });
            from = to;
        });
    }
    async close() {
    }
}
exports.default = HTTPMonitoring;
//# sourceMappingURL=monitoring-http.js.map