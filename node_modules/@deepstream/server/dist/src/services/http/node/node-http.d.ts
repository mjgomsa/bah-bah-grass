import { DeepstreamPlugin, DeepstreamHTTPService, PostRequestHandler, GetRequestHandler, DeepstreamServices, DeepstreamConfig, SocketWrapper, WebSocketConnectionEndpoint, SocketWrapperFactory } from '@deepstream/types';
import * as WebSocket from 'ws';
interface NodeHTTPInterface {
    healthCheckPath: string;
    host: string;
    port: number;
    allowAllOrigins: boolean;
    origins?: string[];
    maxMessageSize: number;
    hostUrl: string;
    headers: string[];
    ssl?: {
        key: string;
        cert: string;
        ca?: string;
    };
}
export declare class NodeHTTP extends DeepstreamPlugin implements DeepstreamHTTPService {
    private pluginOptions;
    private services;
    description: string;
    private server;
    private isReady;
    private origins?;
    private methods;
    private methodsStr;
    private headers;
    private headersLower;
    private headersStr;
    private jsonBodyParser;
    private postPaths;
    private getPaths;
    private upgradePaths;
    private sortedPostPaths;
    private sortedGetPaths;
    private sortedUpgradePaths;
    private connections;
    private emitter;
    constructor(pluginOptions: NodeHTTPInterface, services: DeepstreamServices, config: DeepstreamConfig);
    whenReady(): Promise<void>;
    close(): Promise<void>;
    sendWebsocketMessage(socket: WebSocket, message: any, isBinary: boolean): void;
    getSocketWrappersForUserId(userId: string): SocketWrapper[];
    registerPostPathPrefix<DataInterface>(prefix: string, handler: PostRequestHandler<DataInterface>): void;
    registerGetPathPrefix(prefix: string, handler: GetRequestHandler): void;
    registerWebsocketEndpoint(path: string, createSocketWrapper: SocketWrapperFactory, webSocketConnectionEndpoint: WebSocketConnectionEndpoint): void;
    private createHttpServer;
    private onUpgrade;
    private onRequest;
    private handlePost;
    private handleGet;
    private handleOptions;
    private verifyOrigin;
    private terminateResponse;
    private sendResponse;
}
export {};
