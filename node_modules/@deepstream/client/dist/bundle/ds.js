(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["DeepstreamClient"] = factory();
	else
		root["DeepstreamClient"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@deepstream/protobuf/dist/generated/protobuf.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@deepstream/protobuf/dist/generated/protobuf.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\n\nvar $protobuf = __webpack_require__(/*! protobufjs/minimal */ \"./node_modules/protobufjs/minimal.js\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n/**\n * AUTH_ACTION enum.\n * @exports AUTH_ACTION\n * @enum {number}\n * @property {number} AUTH_UNKNOWN=0 AUTH_UNKNOWN value\n * @property {number} AUTH_ERROR=1 AUTH_ERROR value\n * @property {number} AUTH_REQUEST=2 AUTH_REQUEST value\n * @property {number} AUTH_AUTH_SUCCESSFUL=3 AUTH_AUTH_SUCCESSFUL value\n * @property {number} AUTH_AUTH_UNSUCCESSFUL=4 AUTH_AUTH_UNSUCCESSFUL value\n * @property {number} AUTH_TOO_MANY_AUTH_ATTEMPTS=100 AUTH_TOO_MANY_AUTH_ATTEMPTS value\n * @property {number} AUTH_INVALID_MESSAGE=101 AUTH_INVALID_MESSAGE value\n * @property {number} AUTH_INVALID_MESSAGE_DATA=102 AUTH_INVALID_MESSAGE_DATA value\n */\n$root.AUTH_ACTION = (function() {\n    var valuesById = {}, values = Object.create(valuesById);\n    values[valuesById[0] = \"AUTH_UNKNOWN\"] = 0;\n    values[valuesById[1] = \"AUTH_ERROR\"] = 1;\n    values[valuesById[2] = \"AUTH_REQUEST\"] = 2;\n    values[valuesById[3] = \"AUTH_AUTH_SUCCESSFUL\"] = 3;\n    values[valuesById[4] = \"AUTH_AUTH_UNSUCCESSFUL\"] = 4;\n    values[valuesById[100] = \"AUTH_TOO_MANY_AUTH_ATTEMPTS\"] = 100;\n    values[valuesById[101] = \"AUTH_INVALID_MESSAGE\"] = 101;\n    values[valuesById[102] = \"AUTH_INVALID_MESSAGE_DATA\"] = 102;\n    return values;\n})();\n\n$root.AuthMessage = (function() {\n\n    /**\n     * Properties of an AuthMessage.\n     * @exports IAuthMessage\n     * @interface IAuthMessage\n     * @property {AUTH_ACTION|null} [action] AuthMessage action\n     * @property {string|null} [data] AuthMessage data\n     * @property {boolean|null} [isError] AuthMessage isError\n     * @property {boolean|null} [isAck] AuthMessage isAck\n     */\n\n    /**\n     * Constructs a new AuthMessage.\n     * @exports AuthMessage\n     * @classdesc Represents an AuthMessage.\n     * @implements IAuthMessage\n     * @constructor\n     * @param {IAuthMessage=} [properties] Properties to set\n     */\n    function AuthMessage(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * AuthMessage action.\n     * @member {AUTH_ACTION} action\n     * @memberof AuthMessage\n     * @instance\n     */\n    AuthMessage.prototype.action = 0;\n\n    /**\n     * AuthMessage data.\n     * @member {string} data\n     * @memberof AuthMessage\n     * @instance\n     */\n    AuthMessage.prototype.data = \"\";\n\n    /**\n     * AuthMessage isError.\n     * @member {boolean} isError\n     * @memberof AuthMessage\n     * @instance\n     */\n    AuthMessage.prototype.isError = false;\n\n    /**\n     * AuthMessage isAck.\n     * @member {boolean} isAck\n     * @memberof AuthMessage\n     * @instance\n     */\n    AuthMessage.prototype.isAck = false;\n\n    /**\n     * Encodes the specified AuthMessage message. Does not implicitly {@link AuthMessage.verify|verify} messages.\n     * @function encode\n     * @memberof AuthMessage\n     * @static\n     * @param {IAuthMessage} message AuthMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AuthMessage.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.action != null && Object.hasOwnProperty.call(message, \"action\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.action);\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.data);\n        if (message.isError != null && Object.hasOwnProperty.call(message, \"isError\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isError);\n        if (message.isAck != null && Object.hasOwnProperty.call(message, \"isAck\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.isAck);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified AuthMessage message, length delimited. Does not implicitly {@link AuthMessage.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof AuthMessage\n     * @static\n     * @param {IAuthMessage} message AuthMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AuthMessage.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an AuthMessage message from the specified reader or buffer.\n     * @function decode\n     * @memberof AuthMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {AuthMessage} AuthMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AuthMessage.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AuthMessage();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.action = reader.int32();\n                break;\n            case 2:\n                message.data = reader.string();\n                break;\n            case 3:\n                message.isError = reader.bool();\n                break;\n            case 4:\n                message.isAck = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an AuthMessage message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof AuthMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {AuthMessage} AuthMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AuthMessage.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    return AuthMessage;\n})();\n\n/**\n * CLUSTER_ACTION enum.\n * @exports CLUSTER_ACTION\n * @enum {number}\n * @property {number} CLUSTER_UNKNOWN=0 CLUSTER_UNKNOWN value\n * @property {number} CLUSTER_REMOVE=1 CLUSTER_REMOVE value\n * @property {number} CLUSTER_STATUS=2 CLUSTER_STATUS value\n */\n$root.CLUSTER_ACTION = (function() {\n    var valuesById = {}, values = Object.create(valuesById);\n    values[valuesById[0] = \"CLUSTER_UNKNOWN\"] = 0;\n    values[valuesById[1] = \"CLUSTER_REMOVE\"] = 1;\n    values[valuesById[2] = \"CLUSTER_STATUS\"] = 2;\n    return values;\n})();\n\n$root.ClusterMessage = (function() {\n\n    /**\n     * Properties of a ClusterMessage.\n     * @exports IClusterMessage\n     * @interface IClusterMessage\n     * @property {CLUSTER_ACTION|null} [action] ClusterMessage action\n     * @property {string|null} [data] ClusterMessage data\n     * @property {boolean|null} [isError] ClusterMessage isError\n     * @property {boolean|null} [isAck] ClusterMessage isAck\n     * @property {number|null} [leaderScore] ClusterMessage leaderScore\n     * @property {string|null} [externalUrl] ClusterMessage externalUrl\n     * @property {string|null} [role] ClusterMessage role\n     */\n\n    /**\n     * Constructs a new ClusterMessage.\n     * @exports ClusterMessage\n     * @classdesc Represents a ClusterMessage.\n     * @implements IClusterMessage\n     * @constructor\n     * @param {IClusterMessage=} [properties] Properties to set\n     */\n    function ClusterMessage(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ClusterMessage action.\n     * @member {CLUSTER_ACTION} action\n     * @memberof ClusterMessage\n     * @instance\n     */\n    ClusterMessage.prototype.action = 0;\n\n    /**\n     * ClusterMessage data.\n     * @member {string} data\n     * @memberof ClusterMessage\n     * @instance\n     */\n    ClusterMessage.prototype.data = \"\";\n\n    /**\n     * ClusterMessage isError.\n     * @member {boolean} isError\n     * @memberof ClusterMessage\n     * @instance\n     */\n    ClusterMessage.prototype.isError = false;\n\n    /**\n     * ClusterMessage isAck.\n     * @member {boolean} isAck\n     * @memberof ClusterMessage\n     * @instance\n     */\n    ClusterMessage.prototype.isAck = false;\n\n    /**\n     * ClusterMessage leaderScore.\n     * @member {number} leaderScore\n     * @memberof ClusterMessage\n     * @instance\n     */\n    ClusterMessage.prototype.leaderScore = 0;\n\n    /**\n     * ClusterMessage externalUrl.\n     * @member {string} externalUrl\n     * @memberof ClusterMessage\n     * @instance\n     */\n    ClusterMessage.prototype.externalUrl = \"\";\n\n    /**\n     * ClusterMessage role.\n     * @member {string} role\n     * @memberof ClusterMessage\n     * @instance\n     */\n    ClusterMessage.prototype.role = \"\";\n\n    /**\n     * Encodes the specified ClusterMessage message. Does not implicitly {@link ClusterMessage.verify|verify} messages.\n     * @function encode\n     * @memberof ClusterMessage\n     * @static\n     * @param {IClusterMessage} message ClusterMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ClusterMessage.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.action != null && Object.hasOwnProperty.call(message, \"action\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.action);\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.data);\n        if (message.isError != null && Object.hasOwnProperty.call(message, \"isError\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isError);\n        if (message.isAck != null && Object.hasOwnProperty.call(message, \"isAck\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.isAck);\n        if (message.leaderScore != null && Object.hasOwnProperty.call(message, \"leaderScore\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.leaderScore);\n        if (message.externalUrl != null && Object.hasOwnProperty.call(message, \"externalUrl\"))\n            writer.uint32(/* id 6, wireType 2 =*/50).string(message.externalUrl);\n        if (message.role != null && Object.hasOwnProperty.call(message, \"role\"))\n            writer.uint32(/* id 7, wireType 2 =*/58).string(message.role);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ClusterMessage message, length delimited. Does not implicitly {@link ClusterMessage.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ClusterMessage\n     * @static\n     * @param {IClusterMessage} message ClusterMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ClusterMessage.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ClusterMessage message from the specified reader or buffer.\n     * @function decode\n     * @memberof ClusterMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ClusterMessage} ClusterMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ClusterMessage.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ClusterMessage();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.action = reader.int32();\n                break;\n            case 2:\n                message.data = reader.string();\n                break;\n            case 3:\n                message.isError = reader.bool();\n                break;\n            case 4:\n                message.isAck = reader.bool();\n                break;\n            case 5:\n                message.leaderScore = reader.int32();\n                break;\n            case 6:\n                message.externalUrl = reader.string();\n                break;\n            case 7:\n                message.role = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ClusterMessage message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ClusterMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ClusterMessage} ClusterMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ClusterMessage.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    return ClusterMessage;\n})();\n\n/**\n * CONNECTION_ACTION enum.\n * @exports CONNECTION_ACTION\n * @enum {number}\n * @property {number} CONNECTION_UNKNOWN=0 CONNECTION_UNKNOWN value\n * @property {number} CONNECTION_ERROR=1 CONNECTION_ERROR value\n * @property {number} CONNECTION_PING=2 CONNECTION_PING value\n * @property {number} CONNECTION_PONG=3 CONNECTION_PONG value\n * @property {number} CONNECTION_ACCEPT=4 CONNECTION_ACCEPT value\n * @property {number} CONNECTION_CHALLENGE=5 CONNECTION_CHALLENGE value\n * @property {number} CONNECTION_REJECT=6 CONNECTION_REJECT value\n * @property {number} CONNECTION_REDIRECT=7 CONNECTION_REDIRECT value\n * @property {number} CONNECTION_CLOSING=8 CONNECTION_CLOSING value\n * @property {number} CONNECTION_CLOSED=9 CONNECTION_CLOSED value\n * @property {number} CONNECTION_AUTHENTICATION_TIMEOUT=100 CONNECTION_AUTHENTICATION_TIMEOUT value\n * @property {number} CONNECTION_INVALID_MESSAGE=101 CONNECTION_INVALID_MESSAGE value\n */\n$root.CONNECTION_ACTION = (function() {\n    var valuesById = {}, values = Object.create(valuesById);\n    values[valuesById[0] = \"CONNECTION_UNKNOWN\"] = 0;\n    values[valuesById[1] = \"CONNECTION_ERROR\"] = 1;\n    values[valuesById[2] = \"CONNECTION_PING\"] = 2;\n    values[valuesById[3] = \"CONNECTION_PONG\"] = 3;\n    values[valuesById[4] = \"CONNECTION_ACCEPT\"] = 4;\n    values[valuesById[5] = \"CONNECTION_CHALLENGE\"] = 5;\n    values[valuesById[6] = \"CONNECTION_REJECT\"] = 6;\n    values[valuesById[7] = \"CONNECTION_REDIRECT\"] = 7;\n    values[valuesById[8] = \"CONNECTION_CLOSING\"] = 8;\n    values[valuesById[9] = \"CONNECTION_CLOSED\"] = 9;\n    values[valuesById[100] = \"CONNECTION_AUTHENTICATION_TIMEOUT\"] = 100;\n    values[valuesById[101] = \"CONNECTION_INVALID_MESSAGE\"] = 101;\n    return values;\n})();\n\n$root.ConnectionMessage = (function() {\n\n    /**\n     * Properties of a ConnectionMessage.\n     * @exports IConnectionMessage\n     * @interface IConnectionMessage\n     * @property {CONNECTION_ACTION|null} [action] ConnectionMessage action\n     * @property {string|null} [data] ConnectionMessage data\n     * @property {boolean|null} [isError] ConnectionMessage isError\n     * @property {boolean|null} [isAck] ConnectionMessage isAck\n     * @property {string|null} [url] ConnectionMessage url\n     * @property {string|null} [protocolVersion] ConnectionMessage protocolVersion\n     * @property {string|null} [sdkType] ConnectionMessage sdkType\n     * @property {string|null} [sdkVersion] ConnectionMessage sdkVersion\n     */\n\n    /**\n     * Constructs a new ConnectionMessage.\n     * @exports ConnectionMessage\n     * @classdesc Represents a ConnectionMessage.\n     * @implements IConnectionMessage\n     * @constructor\n     * @param {IConnectionMessage=} [properties] Properties to set\n     */\n    function ConnectionMessage(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ConnectionMessage action.\n     * @member {CONNECTION_ACTION} action\n     * @memberof ConnectionMessage\n     * @instance\n     */\n    ConnectionMessage.prototype.action = 0;\n\n    /**\n     * ConnectionMessage data.\n     * @member {string} data\n     * @memberof ConnectionMessage\n     * @instance\n     */\n    ConnectionMessage.prototype.data = \"\";\n\n    /**\n     * ConnectionMessage isError.\n     * @member {boolean} isError\n     * @memberof ConnectionMessage\n     * @instance\n     */\n    ConnectionMessage.prototype.isError = false;\n\n    /**\n     * ConnectionMessage isAck.\n     * @member {boolean} isAck\n     * @memberof ConnectionMessage\n     * @instance\n     */\n    ConnectionMessage.prototype.isAck = false;\n\n    /**\n     * ConnectionMessage url.\n     * @member {string} url\n     * @memberof ConnectionMessage\n     * @instance\n     */\n    ConnectionMessage.prototype.url = \"\";\n\n    /**\n     * ConnectionMessage protocolVersion.\n     * @member {string} protocolVersion\n     * @memberof ConnectionMessage\n     * @instance\n     */\n    ConnectionMessage.prototype.protocolVersion = \"\";\n\n    /**\n     * ConnectionMessage sdkType.\n     * @member {string} sdkType\n     * @memberof ConnectionMessage\n     * @instance\n     */\n    ConnectionMessage.prototype.sdkType = \"\";\n\n    /**\n     * ConnectionMessage sdkVersion.\n     * @member {string} sdkVersion\n     * @memberof ConnectionMessage\n     * @instance\n     */\n    ConnectionMessage.prototype.sdkVersion = \"\";\n\n    /**\n     * Encodes the specified ConnectionMessage message. Does not implicitly {@link ConnectionMessage.verify|verify} messages.\n     * @function encode\n     * @memberof ConnectionMessage\n     * @static\n     * @param {IConnectionMessage} message ConnectionMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ConnectionMessage.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.action != null && Object.hasOwnProperty.call(message, \"action\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.action);\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.data);\n        if (message.isError != null && Object.hasOwnProperty.call(message, \"isError\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isError);\n        if (message.isAck != null && Object.hasOwnProperty.call(message, \"isAck\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.isAck);\n        if (message.url != null && Object.hasOwnProperty.call(message, \"url\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.url);\n        if (message.protocolVersion != null && Object.hasOwnProperty.call(message, \"protocolVersion\"))\n            writer.uint32(/* id 6, wireType 2 =*/50).string(message.protocolVersion);\n        if (message.sdkVersion != null && Object.hasOwnProperty.call(message, \"sdkVersion\"))\n            writer.uint32(/* id 7, wireType 2 =*/58).string(message.sdkVersion);\n        if (message.sdkType != null && Object.hasOwnProperty.call(message, \"sdkType\"))\n            writer.uint32(/* id 8, wireType 2 =*/66).string(message.sdkType);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ConnectionMessage message, length delimited. Does not implicitly {@link ConnectionMessage.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ConnectionMessage\n     * @static\n     * @param {IConnectionMessage} message ConnectionMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ConnectionMessage.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ConnectionMessage message from the specified reader or buffer.\n     * @function decode\n     * @memberof ConnectionMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ConnectionMessage} ConnectionMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ConnectionMessage.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ConnectionMessage();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.action = reader.int32();\n                break;\n            case 2:\n                message.data = reader.string();\n                break;\n            case 3:\n                message.isError = reader.bool();\n                break;\n            case 4:\n                message.isAck = reader.bool();\n                break;\n            case 5:\n                message.url = reader.string();\n                break;\n            case 6:\n                message.protocolVersion = reader.string();\n                break;\n            case 8:\n                message.sdkType = reader.string();\n                break;\n            case 7:\n                message.sdkVersion = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ConnectionMessage message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ConnectionMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ConnectionMessage} ConnectionMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ConnectionMessage.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    return ConnectionMessage;\n})();\n\n/**\n * EVENT_ACTION enum.\n * @exports EVENT_ACTION\n * @enum {number}\n * @property {number} EVENT_UNKNOWN=0 EVENT_UNKNOWN value\n * @property {number} EVENT_ERROR=1 EVENT_ERROR value\n * @property {number} EVENT_EMIT=2 EVENT_EMIT value\n * @property {number} EVENT_SUBSCRIBE=3 EVENT_SUBSCRIBE value\n * @property {number} EVENT_UNSUBSCRIBE=4 EVENT_UNSUBSCRIBE value\n * @property {number} EVENT_LISTEN=5 EVENT_LISTEN value\n * @property {number} EVENT_UNLISTEN=6 EVENT_UNLISTEN value\n * @property {number} EVENT_LISTEN_ACCEPT=7 EVENT_LISTEN_ACCEPT value\n * @property {number} EVENT_LISTEN_REJECT=8 EVENT_LISTEN_REJECT value\n * @property {number} EVENT_SUBSCRIPTION_HAS_PROVIDER=9 EVENT_SUBSCRIPTION_HAS_PROVIDER value\n * @property {number} EVENT_SUBSCRIPTION_HAS_NO_PROVIDER=10 EVENT_SUBSCRIPTION_HAS_NO_PROVIDER value\n * @property {number} EVENT_SUBSCRIPTION_FOR_PATTERN_FOUND=11 EVENT_SUBSCRIPTION_FOR_PATTERN_FOUND value\n * @property {number} EVENT_SUBSCRIPTION_FOR_PATTERN_REMOVED=12 EVENT_SUBSCRIPTION_FOR_PATTERN_REMOVED value\n * @property {number} EVENT_INVALID_LISTEN_REGEX=100 EVENT_INVALID_LISTEN_REGEX value\n * @property {number} EVENT_LISTEN_RESPONSE_TIMEOUT=101 EVENT_LISTEN_RESPONSE_TIMEOUT value\n * @property {number} EVENT_LISTEN_UNSUCCESSFUL=102 EVENT_LISTEN_UNSUCCESSFUL value\n * @property {number} EVENT_MESSAGE_PERMISSION_ERROR=103 EVENT_MESSAGE_PERMISSION_ERROR value\n * @property {number} EVENT_MESSAGE_DENIED=104 EVENT_MESSAGE_DENIED value\n * @property {number} EVENT_INVALID_MESSAGE_DATA=105 EVENT_INVALID_MESSAGE_DATA value\n * @property {number} EVENT_MULTIPLE_SUBSCRIPTIONS=106 EVENT_MULTIPLE_SUBSCRIPTIONS value\n * @property {number} EVENT_NOT_SUBSCRIBED=107 EVENT_NOT_SUBSCRIBED value\n */\n$root.EVENT_ACTION = (function() {\n    var valuesById = {}, values = Object.create(valuesById);\n    values[valuesById[0] = \"EVENT_UNKNOWN\"] = 0;\n    values[valuesById[1] = \"EVENT_ERROR\"] = 1;\n    values[valuesById[2] = \"EVENT_EMIT\"] = 2;\n    values[valuesById[3] = \"EVENT_SUBSCRIBE\"] = 3;\n    values[valuesById[4] = \"EVENT_UNSUBSCRIBE\"] = 4;\n    values[valuesById[5] = \"EVENT_LISTEN\"] = 5;\n    values[valuesById[6] = \"EVENT_UNLISTEN\"] = 6;\n    values[valuesById[7] = \"EVENT_LISTEN_ACCEPT\"] = 7;\n    values[valuesById[8] = \"EVENT_LISTEN_REJECT\"] = 8;\n    values[valuesById[9] = \"EVENT_SUBSCRIPTION_HAS_PROVIDER\"] = 9;\n    values[valuesById[10] = \"EVENT_SUBSCRIPTION_HAS_NO_PROVIDER\"] = 10;\n    values[valuesById[11] = \"EVENT_SUBSCRIPTION_FOR_PATTERN_FOUND\"] = 11;\n    values[valuesById[12] = \"EVENT_SUBSCRIPTION_FOR_PATTERN_REMOVED\"] = 12;\n    values[valuesById[100] = \"EVENT_INVALID_LISTEN_REGEX\"] = 100;\n    values[valuesById[101] = \"EVENT_LISTEN_RESPONSE_TIMEOUT\"] = 101;\n    values[valuesById[102] = \"EVENT_LISTEN_UNSUCCESSFUL\"] = 102;\n    values[valuesById[103] = \"EVENT_MESSAGE_PERMISSION_ERROR\"] = 103;\n    values[valuesById[104] = \"EVENT_MESSAGE_DENIED\"] = 104;\n    values[valuesById[105] = \"EVENT_INVALID_MESSAGE_DATA\"] = 105;\n    values[valuesById[106] = \"EVENT_MULTIPLE_SUBSCRIPTIONS\"] = 106;\n    values[valuesById[107] = \"EVENT_NOT_SUBSCRIBED\"] = 107;\n    return values;\n})();\n\n$root.EventMessage = (function() {\n\n    /**\n     * Properties of an EventMessage.\n     * @exports IEventMessage\n     * @interface IEventMessage\n     * @property {EVENT_ACTION|null} [action] EventMessage action\n     * @property {string|null} [data] EventMessage data\n     * @property {string|null} [correlationId] EventMessage correlationId\n     * @property {boolean|null} [isError] EventMessage isError\n     * @property {boolean|null} [isAck] EventMessage isAck\n     * @property {string|null} [name] EventMessage name\n     * @property {Array.<string>|null} [names] EventMessage names\n     * @property {string|null} [subscription] EventMessage subscription\n     * @property {TOPIC|null} [originalTOPIC] EventMessage originalTOPIC\n     * @property {EVENT_ACTION|null} [originalAction] EventMessage originalAction\n     */\n\n    /**\n     * Constructs a new EventMessage.\n     * @exports EventMessage\n     * @classdesc Represents an EventMessage.\n     * @implements IEventMessage\n     * @constructor\n     * @param {IEventMessage=} [properties] Properties to set\n     */\n    function EventMessage(properties) {\n        this.names = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EventMessage action.\n     * @member {EVENT_ACTION} action\n     * @memberof EventMessage\n     * @instance\n     */\n    EventMessage.prototype.action = 0;\n\n    /**\n     * EventMessage data.\n     * @member {string} data\n     * @memberof EventMessage\n     * @instance\n     */\n    EventMessage.prototype.data = \"\";\n\n    /**\n     * EventMessage correlationId.\n     * @member {string} correlationId\n     * @memberof EventMessage\n     * @instance\n     */\n    EventMessage.prototype.correlationId = \"\";\n\n    /**\n     * EventMessage isError.\n     * @member {boolean} isError\n     * @memberof EventMessage\n     * @instance\n     */\n    EventMessage.prototype.isError = false;\n\n    /**\n     * EventMessage isAck.\n     * @member {boolean} isAck\n     * @memberof EventMessage\n     * @instance\n     */\n    EventMessage.prototype.isAck = false;\n\n    /**\n     * EventMessage name.\n     * @member {string} name\n     * @memberof EventMessage\n     * @instance\n     */\n    EventMessage.prototype.name = \"\";\n\n    /**\n     * EventMessage names.\n     * @member {Array.<string>} names\n     * @memberof EventMessage\n     * @instance\n     */\n    EventMessage.prototype.names = $util.emptyArray;\n\n    /**\n     * EventMessage subscription.\n     * @member {string} subscription\n     * @memberof EventMessage\n     * @instance\n     */\n    EventMessage.prototype.subscription = \"\";\n\n    /**\n     * EventMessage originalTOPIC.\n     * @member {TOPIC} originalTOPIC\n     * @memberof EventMessage\n     * @instance\n     */\n    EventMessage.prototype.originalTOPIC = 0;\n\n    /**\n     * EventMessage originalAction.\n     * @member {EVENT_ACTION} originalAction\n     * @memberof EventMessage\n     * @instance\n     */\n    EventMessage.prototype.originalAction = 0;\n\n    /**\n     * Encodes the specified EventMessage message. Does not implicitly {@link EventMessage.verify|verify} messages.\n     * @function encode\n     * @memberof EventMessage\n     * @static\n     * @param {IEventMessage} message EventMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EventMessage.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.action != null && Object.hasOwnProperty.call(message, \"action\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.action);\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.data);\n        if (message.correlationId != null && Object.hasOwnProperty.call(message, \"correlationId\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.correlationId);\n        if (message.isError != null && Object.hasOwnProperty.call(message, \"isError\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.isError);\n        if (message.isAck != null && Object.hasOwnProperty.call(message, \"isAck\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.isAck);\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n            writer.uint32(/* id 6, wireType 2 =*/50).string(message.name);\n        if (message.names != null && message.names.length)\n            for (var i = 0; i < message.names.length; ++i)\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.names[i]);\n        if (message.subscription != null && Object.hasOwnProperty.call(message, \"subscription\"))\n            writer.uint32(/* id 8, wireType 2 =*/66).string(message.subscription);\n        if (message.originalTOPIC != null && Object.hasOwnProperty.call(message, \"originalTOPIC\"))\n            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.originalTOPIC);\n        if (message.originalAction != null && Object.hasOwnProperty.call(message, \"originalAction\"))\n            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.originalAction);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EventMessage message, length delimited. Does not implicitly {@link EventMessage.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EventMessage\n     * @static\n     * @param {IEventMessage} message EventMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EventMessage.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an EventMessage message from the specified reader or buffer.\n     * @function decode\n     * @memberof EventMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EventMessage} EventMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EventMessage.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EventMessage();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.action = reader.int32();\n                break;\n            case 2:\n                message.data = reader.string();\n                break;\n            case 3:\n                message.correlationId = reader.string();\n                break;\n            case 4:\n                message.isError = reader.bool();\n                break;\n            case 5:\n                message.isAck = reader.bool();\n                break;\n            case 6:\n                message.name = reader.string();\n                break;\n            case 7:\n                if (!(message.names && message.names.length))\n                    message.names = [];\n                message.names.push(reader.string());\n                break;\n            case 8:\n                message.subscription = reader.string();\n                break;\n            case 10:\n                message.originalTOPIC = reader.int32();\n                break;\n            case 11:\n                message.originalAction = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an EventMessage message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EventMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EventMessage} EventMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EventMessage.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    return EventMessage;\n})();\n\n/**\n * TOPIC enum.\n * @exports TOPIC\n * @enum {number}\n * @property {number} UNKNOWN=0 UNKNOWN value\n * @property {number} PARSER=1 PARSER value\n * @property {number} CONNECTION=2 CONNECTION value\n * @property {number} AUTH=3 AUTH value\n * @property {number} EVENT=4 EVENT value\n * @property {number} RECORD=5 RECORD value\n * @property {number} RPC=6 RPC value\n * @property {number} PRESENCE=7 PRESENCE value\n * @property {number} MONITORING=8 MONITORING value\n * @property {number} CLUSTER=9 CLUSTER value\n * @property {number} LOCK=10 LOCK value\n * @property {number} STATE_REGISTRY=11 STATE_REGISTRY value\n * @property {number} ERROR=100 ERROR value\n */\n$root.TOPIC = (function() {\n    var valuesById = {}, values = Object.create(valuesById);\n    values[valuesById[0] = \"UNKNOWN\"] = 0;\n    values[valuesById[1] = \"PARSER\"] = 1;\n    values[valuesById[2] = \"CONNECTION\"] = 2;\n    values[valuesById[3] = \"AUTH\"] = 3;\n    values[valuesById[4] = \"EVENT\"] = 4;\n    values[valuesById[5] = \"RECORD\"] = 5;\n    values[valuesById[6] = \"RPC\"] = 6;\n    values[valuesById[7] = \"PRESENCE\"] = 7;\n    values[valuesById[8] = \"MONITORING\"] = 8;\n    values[valuesById[9] = \"CLUSTER\"] = 9;\n    values[valuesById[10] = \"LOCK\"] = 10;\n    values[valuesById[11] = \"STATE_REGISTRY\"] = 11;\n    values[valuesById[100] = \"ERROR\"] = 100;\n    return values;\n})();\n\n$root.Message = (function() {\n\n    /**\n     * Properties of a Message.\n     * @exports IMessage\n     * @interface IMessage\n     * @property {TOPIC|null} [topic] Message topic\n     * @property {Uint8Array|null} [message] Message message\n     */\n\n    /**\n     * Constructs a new Message.\n     * @exports Message\n     * @classdesc Represents a Message.\n     * @implements IMessage\n     * @constructor\n     * @param {IMessage=} [properties] Properties to set\n     */\n    function Message(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Message topic.\n     * @member {TOPIC} topic\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.topic = 0;\n\n    /**\n     * Message message.\n     * @member {Uint8Array} message\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.message = $util.newBuffer([]);\n\n    /**\n     * Encodes the specified Message message. Does not implicitly {@link Message.verify|verify} messages.\n     * @function encode\n     * @memberof Message\n     * @static\n     * @param {IMessage} message Message message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Message.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.topic != null && Object.hasOwnProperty.call(message, \"topic\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.topic);\n        if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.message);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Message message, length delimited. Does not implicitly {@link Message.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Message\n     * @static\n     * @param {IMessage} message Message message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Message.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Message message from the specified reader or buffer.\n     * @function decode\n     * @memberof Message\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Message} Message\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Message.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Message();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 2:\n                message.topic = reader.int32();\n                break;\n            case 3:\n                message.message = reader.bytes();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Message message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Message\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Message} Message\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Message.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    return Message;\n})();\n\n/**\n * LOCK_ACTION enum.\n * @exports LOCK_ACTION\n * @enum {number}\n * @property {number} LOCK_UNKNOWN=0 LOCK_UNKNOWN value\n * @property {number} LOCK_ERROR=1 LOCK_ERROR value\n * @property {number} LOCK_REQUEST=2 LOCK_REQUEST value\n * @property {number} LOCK_RESPONSE=3 LOCK_RESPONSE value\n * @property {number} LOCK_RELEASE=4 LOCK_RELEASE value\n */\n$root.LOCK_ACTION = (function() {\n    var valuesById = {}, values = Object.create(valuesById);\n    values[valuesById[0] = \"LOCK_UNKNOWN\"] = 0;\n    values[valuesById[1] = \"LOCK_ERROR\"] = 1;\n    values[valuesById[2] = \"LOCK_REQUEST\"] = 2;\n    values[valuesById[3] = \"LOCK_RESPONSE\"] = 3;\n    values[valuesById[4] = \"LOCK_RELEASE\"] = 4;\n    return values;\n})();\n\n$root.LockMessage = (function() {\n\n    /**\n     * Properties of a LockMessage.\n     * @exports ILockMessage\n     * @interface ILockMessage\n     * @property {LOCK_ACTION|null} [action] LockMessage action\n     * @property {boolean|null} [locked] LockMessage locked\n     */\n\n    /**\n     * Constructs a new LockMessage.\n     * @exports LockMessage\n     * @classdesc Represents a LockMessage.\n     * @implements ILockMessage\n     * @constructor\n     * @param {ILockMessage=} [properties] Properties to set\n     */\n    function LockMessage(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * LockMessage action.\n     * @member {LOCK_ACTION} action\n     * @memberof LockMessage\n     * @instance\n     */\n    LockMessage.prototype.action = 0;\n\n    /**\n     * LockMessage locked.\n     * @member {boolean} locked\n     * @memberof LockMessage\n     * @instance\n     */\n    LockMessage.prototype.locked = false;\n\n    /**\n     * Encodes the specified LockMessage message. Does not implicitly {@link LockMessage.verify|verify} messages.\n     * @function encode\n     * @memberof LockMessage\n     * @static\n     * @param {ILockMessage} message LockMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    LockMessage.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.action != null && Object.hasOwnProperty.call(message, \"action\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.action);\n        if (message.locked != null && Object.hasOwnProperty.call(message, \"locked\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.locked);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified LockMessage message, length delimited. Does not implicitly {@link LockMessage.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof LockMessage\n     * @static\n     * @param {ILockMessage} message LockMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    LockMessage.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a LockMessage message from the specified reader or buffer.\n     * @function decode\n     * @memberof LockMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {LockMessage} LockMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    LockMessage.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LockMessage();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.action = reader.int32();\n                break;\n            case 3:\n                message.locked = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a LockMessage message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof LockMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {LockMessage} LockMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    LockMessage.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    return LockMessage;\n})();\n\n/**\n * MONITORING_ACTION enum.\n * @exports MONITORING_ACTION\n * @enum {number}\n * @property {number} MONITORING_UNKNOWN=0 MONITORING_UNKNOWN value\n */\n$root.MONITORING_ACTION = (function() {\n    var valuesById = {}, values = Object.create(valuesById);\n    values[valuesById[0] = \"MONITORING_UNKNOWN\"] = 0;\n    return values;\n})();\n\n$root.MonitoringMessage = (function() {\n\n    /**\n     * Properties of a MonitoringMessage.\n     * @exports IMonitoringMessage\n     * @interface IMonitoringMessage\n     * @property {MONITORING_ACTION|null} [action] MonitoringMessage action\n     * @property {string|null} [data] MonitoringMessage data\n     * @property {string|null} [correlationId] MonitoringMessage correlationId\n     * @property {boolean|null} [isError] MonitoringMessage isError\n     * @property {boolean|null} [isAck] MonitoringMessage isAck\n     */\n\n    /**\n     * Constructs a new MonitoringMessage.\n     * @exports MonitoringMessage\n     * @classdesc Represents a MonitoringMessage.\n     * @implements IMonitoringMessage\n     * @constructor\n     * @param {IMonitoringMessage=} [properties] Properties to set\n     */\n    function MonitoringMessage(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * MonitoringMessage action.\n     * @member {MONITORING_ACTION} action\n     * @memberof MonitoringMessage\n     * @instance\n     */\n    MonitoringMessage.prototype.action = 0;\n\n    /**\n     * MonitoringMessage data.\n     * @member {string} data\n     * @memberof MonitoringMessage\n     * @instance\n     */\n    MonitoringMessage.prototype.data = \"\";\n\n    /**\n     * MonitoringMessage correlationId.\n     * @member {string} correlationId\n     * @memberof MonitoringMessage\n     * @instance\n     */\n    MonitoringMessage.prototype.correlationId = \"\";\n\n    /**\n     * MonitoringMessage isError.\n     * @member {boolean} isError\n     * @memberof MonitoringMessage\n     * @instance\n     */\n    MonitoringMessage.prototype.isError = false;\n\n    /**\n     * MonitoringMessage isAck.\n     * @member {boolean} isAck\n     * @memberof MonitoringMessage\n     * @instance\n     */\n    MonitoringMessage.prototype.isAck = false;\n\n    /**\n     * Encodes the specified MonitoringMessage message. Does not implicitly {@link MonitoringMessage.verify|verify} messages.\n     * @function encode\n     * @memberof MonitoringMessage\n     * @static\n     * @param {IMonitoringMessage} message MonitoringMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    MonitoringMessage.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.action != null && Object.hasOwnProperty.call(message, \"action\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.action);\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.data);\n        if (message.correlationId != null && Object.hasOwnProperty.call(message, \"correlationId\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.correlationId);\n        if (message.isError != null && Object.hasOwnProperty.call(message, \"isError\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.isError);\n        if (message.isAck != null && Object.hasOwnProperty.call(message, \"isAck\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.isAck);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified MonitoringMessage message, length delimited. Does not implicitly {@link MonitoringMessage.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof MonitoringMessage\n     * @static\n     * @param {IMonitoringMessage} message MonitoringMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    MonitoringMessage.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a MonitoringMessage message from the specified reader or buffer.\n     * @function decode\n     * @memberof MonitoringMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {MonitoringMessage} MonitoringMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    MonitoringMessage.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.MonitoringMessage();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.action = reader.int32();\n                break;\n            case 2:\n                message.data = reader.string();\n                break;\n            case 3:\n                message.correlationId = reader.string();\n                break;\n            case 4:\n                message.isError = reader.bool();\n                break;\n            case 5:\n                message.isAck = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a MonitoringMessage message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof MonitoringMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {MonitoringMessage} MonitoringMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    MonitoringMessage.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    return MonitoringMessage;\n})();\n\n/**\n * PARSER_ACTION enum.\n * @exports PARSER_ACTION\n * @enum {number}\n * @property {number} PARSER_UNKNOWN=0 PARSER_UNKNOWN value\n * @property {number} PARSER_UNKNOWN_TOPIC=1 PARSER_UNKNOWN_TOPIC value\n * @property {number} PARSER_UNKNOWN_ACTION=2 PARSER_UNKNOWN_ACTION value\n * @property {number} PARSER_INVALID_MESSAGE=3 PARSER_INVALID_MESSAGE value\n * @property {number} PARSER_MESSAGE_PARSE_ERROR=4 PARSER_MESSAGE_PARSE_ERROR value\n * @property {number} PARSER_MAXIMUM_MESSAGE_SIZE_EXCEEDED=5 PARSER_MAXIMUM_MESSAGE_SIZE_EXCEEDED value\n * @property {number} PARSER_ERROR=6 PARSER_ERROR value\n * @property {number} PARSER_INVALID_META_PARAMS=7 PARSER_INVALID_META_PARAMS value\n */\n$root.PARSER_ACTION = (function() {\n    var valuesById = {}, values = Object.create(valuesById);\n    values[valuesById[0] = \"PARSER_UNKNOWN\"] = 0;\n    values[valuesById[1] = \"PARSER_UNKNOWN_TOPIC\"] = 1;\n    values[valuesById[2] = \"PARSER_UNKNOWN_ACTION\"] = 2;\n    values[valuesById[3] = \"PARSER_INVALID_MESSAGE\"] = 3;\n    values[valuesById[4] = \"PARSER_MESSAGE_PARSE_ERROR\"] = 4;\n    values[valuesById[5] = \"PARSER_MAXIMUM_MESSAGE_SIZE_EXCEEDED\"] = 5;\n    values[valuesById[6] = \"PARSER_ERROR\"] = 6;\n    values[valuesById[7] = \"PARSER_INVALID_META_PARAMS\"] = 7;\n    return values;\n})();\n\n$root.ParserMessage = (function() {\n\n    /**\n     * Properties of a ParserMessage.\n     * @exports IParserMessage\n     * @interface IParserMessage\n     * @property {PARSER_ACTION|null} [action] ParserMessage action\n     * @property {string|null} [data] ParserMessage data\n     * @property {TOPIC|null} [originalTOPIC] ParserMessage originalTOPIC\n     * @property {number|null} [originalAction] ParserMessage originalAction\n     */\n\n    /**\n     * Constructs a new ParserMessage.\n     * @exports ParserMessage\n     * @classdesc Represents a ParserMessage.\n     * @implements IParserMessage\n     * @constructor\n     * @param {IParserMessage=} [properties] Properties to set\n     */\n    function ParserMessage(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ParserMessage action.\n     * @member {PARSER_ACTION} action\n     * @memberof ParserMessage\n     * @instance\n     */\n    ParserMessage.prototype.action = 0;\n\n    /**\n     * ParserMessage data.\n     * @member {string} data\n     * @memberof ParserMessage\n     * @instance\n     */\n    ParserMessage.prototype.data = \"\";\n\n    /**\n     * ParserMessage originalTOPIC.\n     * @member {TOPIC} originalTOPIC\n     * @memberof ParserMessage\n     * @instance\n     */\n    ParserMessage.prototype.originalTOPIC = 0;\n\n    /**\n     * ParserMessage originalAction.\n     * @member {number} originalAction\n     * @memberof ParserMessage\n     * @instance\n     */\n    ParserMessage.prototype.originalAction = 0;\n\n    /**\n     * Encodes the specified ParserMessage message. Does not implicitly {@link ParserMessage.verify|verify} messages.\n     * @function encode\n     * @memberof ParserMessage\n     * @static\n     * @param {IParserMessage} message ParserMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ParserMessage.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.action != null && Object.hasOwnProperty.call(message, \"action\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.action);\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.data);\n        if (message.originalTOPIC != null && Object.hasOwnProperty.call(message, \"originalTOPIC\"))\n            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.originalTOPIC);\n        if (message.originalAction != null && Object.hasOwnProperty.call(message, \"originalAction\"))\n            writer.uint32(/* id 9, wireType 0 =*/72).int32(message.originalAction);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ParserMessage message, length delimited. Does not implicitly {@link ParserMessage.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ParserMessage\n     * @static\n     * @param {IParserMessage} message ParserMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ParserMessage.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ParserMessage message from the specified reader or buffer.\n     * @function decode\n     * @memberof ParserMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ParserMessage} ParserMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ParserMessage.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ParserMessage();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.action = reader.int32();\n                break;\n            case 2:\n                message.data = reader.string();\n                break;\n            case 8:\n                message.originalTOPIC = reader.int32();\n                break;\n            case 9:\n                message.originalAction = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ParserMessage message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ParserMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ParserMessage} ParserMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ParserMessage.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    return ParserMessage;\n})();\n\n/**\n * PRESENCE_ACTION enum.\n * @exports PRESENCE_ACTION\n * @enum {number}\n * @property {number} PRESENCE_UNKNOWN=0 PRESENCE_UNKNOWN value\n * @property {number} PRESENCE_ERROR=1 PRESENCE_ERROR value\n * @property {number} PRESENCE_QUERY_ALL=2 PRESENCE_QUERY_ALL value\n * @property {number} PRESENCE_QUERY_ALL_RESPONSE=3 PRESENCE_QUERY_ALL_RESPONSE value\n * @property {number} PRESENCE_QUERY=4 PRESENCE_QUERY value\n * @property {number} PRESENCE_QUERY_RESPONSE=5 PRESENCE_QUERY_RESPONSE value\n * @property {number} PRESENCE_PRESENCE_JOIN=6 PRESENCE_PRESENCE_JOIN value\n * @property {number} PRESENCE_PRESENCE_JOIN_ALL=7 PRESENCE_PRESENCE_JOIN_ALL value\n * @property {number} PRESENCE_PRESENCE_LEAVE=8 PRESENCE_PRESENCE_LEAVE value\n * @property {number} PRESENCE_PRESENCE_LEAVE_ALL=9 PRESENCE_PRESENCE_LEAVE_ALL value\n * @property {number} PRESENCE_SUBSCRIBE=10 PRESENCE_SUBSCRIBE value\n * @property {number} PRESENCE_UNSUBSCRIBE=11 PRESENCE_UNSUBSCRIBE value\n * @property {number} PRESENCE_SUBSCRIBE_ALL=12 PRESENCE_SUBSCRIBE_ALL value\n * @property {number} PRESENCE_UNSUBSCRIBE_ALL=13 PRESENCE_UNSUBSCRIBE_ALL value\n * @property {number} PRESENCE_INVALID_PRESENCE_USERS=100 PRESENCE_INVALID_PRESENCE_USERS value\n * @property {number} PRESENCE_MESSAGE_PERMISSION_ERROR=101 PRESENCE_MESSAGE_PERMISSION_ERROR value\n * @property {number} PRESENCE_MESSAGE_DENIED=102 PRESENCE_MESSAGE_DENIED value\n * @property {number} PRESENCE_MULTIPLE_SUBSCRIPTIONS=103 PRESENCE_MULTIPLE_SUBSCRIPTIONS value\n * @property {number} PRESENCE_NOT_SUBSCRIBED=104 PRESENCE_NOT_SUBSCRIBED value\n */\n$root.PRESENCE_ACTION = (function() {\n    var valuesById = {}, values = Object.create(valuesById);\n    values[valuesById[0] = \"PRESENCE_UNKNOWN\"] = 0;\n    values[valuesById[1] = \"PRESENCE_ERROR\"] = 1;\n    values[valuesById[2] = \"PRESENCE_QUERY_ALL\"] = 2;\n    values[valuesById[3] = \"PRESENCE_QUERY_ALL_RESPONSE\"] = 3;\n    values[valuesById[4] = \"PRESENCE_QUERY\"] = 4;\n    values[valuesById[5] = \"PRESENCE_QUERY_RESPONSE\"] = 5;\n    values[valuesById[6] = \"PRESENCE_PRESENCE_JOIN\"] = 6;\n    values[valuesById[7] = \"PRESENCE_PRESENCE_JOIN_ALL\"] = 7;\n    values[valuesById[8] = \"PRESENCE_PRESENCE_LEAVE\"] = 8;\n    values[valuesById[9] = \"PRESENCE_PRESENCE_LEAVE_ALL\"] = 9;\n    values[valuesById[10] = \"PRESENCE_SUBSCRIBE\"] = 10;\n    values[valuesById[11] = \"PRESENCE_UNSUBSCRIBE\"] = 11;\n    values[valuesById[12] = \"PRESENCE_SUBSCRIBE_ALL\"] = 12;\n    values[valuesById[13] = \"PRESENCE_UNSUBSCRIBE_ALL\"] = 13;\n    values[valuesById[100] = \"PRESENCE_INVALID_PRESENCE_USERS\"] = 100;\n    values[valuesById[101] = \"PRESENCE_MESSAGE_PERMISSION_ERROR\"] = 101;\n    values[valuesById[102] = \"PRESENCE_MESSAGE_DENIED\"] = 102;\n    values[valuesById[103] = \"PRESENCE_MULTIPLE_SUBSCRIPTIONS\"] = 103;\n    values[valuesById[104] = \"PRESENCE_NOT_SUBSCRIBED\"] = 104;\n    return values;\n})();\n\n$root.PresenceMessage = (function() {\n\n    /**\n     * Properties of a PresenceMessage.\n     * @exports IPresenceMessage\n     * @interface IPresenceMessage\n     * @property {PRESENCE_ACTION|null} [action] PresenceMessage action\n     * @property {TOPIC|null} [originalTOPIC] PresenceMessage originalTOPIC\n     * @property {number|null} [originalAction] PresenceMessage originalAction\n     * @property {string|null} [data] PresenceMessage data\n     * @property {string|null} [correlationId] PresenceMessage correlationId\n     * @property {boolean|null} [isError] PresenceMessage isError\n     * @property {boolean|null} [isAck] PresenceMessage isAck\n     * @property {string|null} [name] PresenceMessage name\n     * @property {Array.<string>|null} [names] PresenceMessage names\n     */\n\n    /**\n     * Constructs a new PresenceMessage.\n     * @exports PresenceMessage\n     * @classdesc Represents a PresenceMessage.\n     * @implements IPresenceMessage\n     * @constructor\n     * @param {IPresenceMessage=} [properties] Properties to set\n     */\n    function PresenceMessage(properties) {\n        this.names = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * PresenceMessage action.\n     * @member {PRESENCE_ACTION} action\n     * @memberof PresenceMessage\n     * @instance\n     */\n    PresenceMessage.prototype.action = 0;\n\n    /**\n     * PresenceMessage originalTOPIC.\n     * @member {TOPIC} originalTOPIC\n     * @memberof PresenceMessage\n     * @instance\n     */\n    PresenceMessage.prototype.originalTOPIC = 0;\n\n    /**\n     * PresenceMessage originalAction.\n     * @member {number} originalAction\n     * @memberof PresenceMessage\n     * @instance\n     */\n    PresenceMessage.prototype.originalAction = 0;\n\n    /**\n     * PresenceMessage data.\n     * @member {string} data\n     * @memberof PresenceMessage\n     * @instance\n     */\n    PresenceMessage.prototype.data = \"\";\n\n    /**\n     * PresenceMessage correlationId.\n     * @member {string} correlationId\n     * @memberof PresenceMessage\n     * @instance\n     */\n    PresenceMessage.prototype.correlationId = \"\";\n\n    /**\n     * PresenceMessage isError.\n     * @member {boolean} isError\n     * @memberof PresenceMessage\n     * @instance\n     */\n    PresenceMessage.prototype.isError = false;\n\n    /**\n     * PresenceMessage isAck.\n     * @member {boolean} isAck\n     * @memberof PresenceMessage\n     * @instance\n     */\n    PresenceMessage.prototype.isAck = false;\n\n    /**\n     * PresenceMessage name.\n     * @member {string} name\n     * @memberof PresenceMessage\n     * @instance\n     */\n    PresenceMessage.prototype.name = \"\";\n\n    /**\n     * PresenceMessage names.\n     * @member {Array.<string>} names\n     * @memberof PresenceMessage\n     * @instance\n     */\n    PresenceMessage.prototype.names = $util.emptyArray;\n\n    /**\n     * Encodes the specified PresenceMessage message. Does not implicitly {@link PresenceMessage.verify|verify} messages.\n     * @function encode\n     * @memberof PresenceMessage\n     * @static\n     * @param {IPresenceMessage} message PresenceMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PresenceMessage.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.action != null && Object.hasOwnProperty.call(message, \"action\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.action);\n        if (message.originalTOPIC != null && Object.hasOwnProperty.call(message, \"originalTOPIC\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.originalTOPIC);\n        if (message.originalAction != null && Object.hasOwnProperty.call(message, \"originalAction\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.originalAction);\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n            writer.uint32(/* id 4, wireType 2 =*/34).string(message.data);\n        if (message.correlationId != null && Object.hasOwnProperty.call(message, \"correlationId\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.correlationId);\n        if (message.isError != null && Object.hasOwnProperty.call(message, \"isError\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.isError);\n        if (message.isAck != null && Object.hasOwnProperty.call(message, \"isAck\"))\n            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.isAck);\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n            writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n        if (message.names != null && message.names.length)\n            for (var i = 0; i < message.names.length; ++i)\n                writer.uint32(/* id 9, wireType 2 =*/74).string(message.names[i]);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified PresenceMessage message, length delimited. Does not implicitly {@link PresenceMessage.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof PresenceMessage\n     * @static\n     * @param {IPresenceMessage} message PresenceMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PresenceMessage.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a PresenceMessage message from the specified reader or buffer.\n     * @function decode\n     * @memberof PresenceMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {PresenceMessage} PresenceMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PresenceMessage.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PresenceMessage();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.action = reader.int32();\n                break;\n            case 2:\n                message.originalTOPIC = reader.int32();\n                break;\n            case 3:\n                message.originalAction = reader.int32();\n                break;\n            case 4:\n                message.data = reader.string();\n                break;\n            case 5:\n                message.correlationId = reader.string();\n                break;\n            case 6:\n                message.isError = reader.bool();\n                break;\n            case 7:\n                message.isAck = reader.bool();\n                break;\n            case 8:\n                message.name = reader.string();\n                break;\n            case 9:\n                if (!(message.names && message.names.length))\n                    message.names = [];\n                message.names.push(reader.string());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a PresenceMessage message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof PresenceMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {PresenceMessage} PresenceMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PresenceMessage.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    return PresenceMessage;\n})();\n\n/**\n * RECORD_ACTION enum.\n * @exports RECORD_ACTION\n * @enum {number}\n * @property {number} RECORD_UNKNOWN=0 RECORD_UNKNOWN value\n * @property {number} RECORD_ERROR=1 RECORD_ERROR value\n * @property {number} RECORD_NOTIFY=2 RECORD_NOTIFY value\n * @property {number} RECORD_READ=3 RECORD_READ value\n * @property {number} RECORD_READ_RESPONSE=4 RECORD_READ_RESPONSE value\n * @property {number} RECORD_HEAD=5 RECORD_HEAD value\n * @property {number} RECORD_HEAD_RESPONSE=6 RECORD_HEAD_RESPONSE value\n * @property {number} RECORD_HEAD_BULK=7 RECORD_HEAD_BULK value\n * @property {number} RECORD_HEAD_RESPONSE_BULK=8 RECORD_HEAD_RESPONSE_BULK value\n * @property {number} RECORD_DELETE=9 RECORD_DELETE value\n * @property {number} RECORD_DELETE_SUCCESS=10 RECORD_DELETE_SUCCESS value\n * @property {number} RECORD_DELETE_BULK=11 RECORD_DELETE_BULK value\n * @property {number} RECORD_DELETE_BULK_SUCCESS=12 RECORD_DELETE_BULK_SUCCESS value\n * @property {number} RECORD_DELETED=13 RECORD_DELETED value\n * @property {number} RECORD_WRITE_ACKNOWLEDGEMENT=14 RECORD_WRITE_ACKNOWLEDGEMENT value\n * @property {number} RECORD_CREATE=15 RECORD_CREATE value\n * @property {number} RECORD_CREATEANDUPDATE=16 RECORD_CREATEANDUPDATE value\n * @property {number} RECORD_CREATEANDPATCH=17 RECORD_CREATEANDPATCH value\n * @property {number} RECORD_UPDATE=18 RECORD_UPDATE value\n * @property {number} RECORD_PATCH=19 RECORD_PATCH value\n * @property {number} RECORD_ERASE=20 RECORD_ERASE value\n * @property {number} RECORD_SUBSCRIBEANDHEAD=21 RECORD_SUBSCRIBEANDHEAD value\n * @property {number} RECORD_SUBSCRIBEANDREAD=22 RECORD_SUBSCRIBEANDREAD value\n * @property {number} RECORD_SUBSCRIBECREATEANDREAD=23 RECORD_SUBSCRIBECREATEANDREAD value\n * @property {number} RECORD_SUBSCRIBECREATEANDUPDATE=24 RECORD_SUBSCRIBECREATEANDUPDATE value\n * @property {number} RECORD_SUBSCRIBE=25 RECORD_SUBSCRIBE value\n * @property {number} RECORD_UNSUBSCRIBE=26 RECORD_UNSUBSCRIBE value\n * @property {number} RECORD_LISTEN=27 RECORD_LISTEN value\n * @property {number} RECORD_UNLISTEN=28 RECORD_UNLISTEN value\n * @property {number} RECORD_LISTEN_ACCEPT=29 RECORD_LISTEN_ACCEPT value\n * @property {number} RECORD_LISTEN_REJECT=30 RECORD_LISTEN_REJECT value\n * @property {number} RECORD_SUBSCRIPTION_HAS_PROVIDER=31 RECORD_SUBSCRIPTION_HAS_PROVIDER value\n * @property {number} RECORD_SUBSCRIPTION_HAS_NO_PROVIDER=32 RECORD_SUBSCRIPTION_HAS_NO_PROVIDER value\n * @property {number} RECORD_SUBSCRIPTION_FOR_PATTERN_FOUND=33 RECORD_SUBSCRIPTION_FOR_PATTERN_FOUND value\n * @property {number} RECORD_SUBSCRIPTION_FOR_PATTERN_REMOVED=34 RECORD_SUBSCRIPTION_FOR_PATTERN_REMOVED value\n * @property {number} RECORD_CACHE_RETRIEVAL_TIMEOUT=100 RECORD_CACHE_RETRIEVAL_TIMEOUT value\n * @property {number} RECORD_STORAGE_RETRIEVAL_TIMEOUT=101 RECORD_STORAGE_RETRIEVAL_TIMEOUT value\n * @property {number} RECORD_VERSION_EXISTS=102 RECORD_VERSION_EXISTS value\n * @property {number} RECORD_RECORD_LOAD_ERROR=103 RECORD_RECORD_LOAD_ERROR value\n * @property {number} RECORD_RECORD_CREATE_ERROR=104 RECORD_RECORD_CREATE_ERROR value\n * @property {number} RECORD_RECORD_UPDATE_ERROR=105 RECORD_RECORD_UPDATE_ERROR value\n * @property {number} RECORD_RECORD_DELETE_ERROR=106 RECORD_RECORD_DELETE_ERROR value\n * @property {number} RECORD_RECORD_NOT_FOUND=107 RECORD_RECORD_NOT_FOUND value\n * @property {number} RECORD_INVALID_VERSION=108 RECORD_INVALID_VERSION value\n * @property {number} RECORD_INVALID_PATCH_ON_HOTPATH=109 RECORD_INVALID_PATCH_ON_HOTPATH value\n * @property {number} RECORD_INVALID_LISTEN_REGEX=110 RECORD_INVALID_LISTEN_REGEX value\n * @property {number} RECORD_LISTEN_RESPONSE_TIMEOUT=111 RECORD_LISTEN_RESPONSE_TIMEOUT value\n * @property {number} RECORD_LISTEN_UNSUCCESSFUL=112 RECORD_LISTEN_UNSUCCESSFUL value\n * @property {number} RECORD_RECORD_NOTIFY_ERROR=113 RECORD_RECORD_NOTIFY_ERROR value\n * @property {number} RECORD_MESSAGE_PERMISSION_ERROR=114 RECORD_MESSAGE_PERMISSION_ERROR value\n * @property {number} RECORD_MESSAGE_DENIED=115 RECORD_MESSAGE_DENIED value\n * @property {number} RECORD_INVALID_MESSAGE_DATA=116 RECORD_INVALID_MESSAGE_DATA value\n * @property {number} RECORD_MULTIPLE_SUBSCRIPTIONS=117 RECORD_MULTIPLE_SUBSCRIPTIONS value\n * @property {number} RECORD_NOT_SUBSCRIBED=118 RECORD_NOT_SUBSCRIBED value\n */\n$root.RECORD_ACTION = (function() {\n    var valuesById = {}, values = Object.create(valuesById);\n    values[valuesById[0] = \"RECORD_UNKNOWN\"] = 0;\n    values[valuesById[1] = \"RECORD_ERROR\"] = 1;\n    values[valuesById[2] = \"RECORD_NOTIFY\"] = 2;\n    values[valuesById[3] = \"RECORD_READ\"] = 3;\n    values[valuesById[4] = \"RECORD_READ_RESPONSE\"] = 4;\n    values[valuesById[5] = \"RECORD_HEAD\"] = 5;\n    values[valuesById[6] = \"RECORD_HEAD_RESPONSE\"] = 6;\n    values[valuesById[7] = \"RECORD_HEAD_BULK\"] = 7;\n    values[valuesById[8] = \"RECORD_HEAD_RESPONSE_BULK\"] = 8;\n    values[valuesById[9] = \"RECORD_DELETE\"] = 9;\n    values[valuesById[10] = \"RECORD_DELETE_SUCCESS\"] = 10;\n    values[valuesById[11] = \"RECORD_DELETE_BULK\"] = 11;\n    values[valuesById[12] = \"RECORD_DELETE_BULK_SUCCESS\"] = 12;\n    values[valuesById[13] = \"RECORD_DELETED\"] = 13;\n    values[valuesById[14] = \"RECORD_WRITE_ACKNOWLEDGEMENT\"] = 14;\n    values[valuesById[15] = \"RECORD_CREATE\"] = 15;\n    values[valuesById[16] = \"RECORD_CREATEANDUPDATE\"] = 16;\n    values[valuesById[17] = \"RECORD_CREATEANDPATCH\"] = 17;\n    values[valuesById[18] = \"RECORD_UPDATE\"] = 18;\n    values[valuesById[19] = \"RECORD_PATCH\"] = 19;\n    values[valuesById[20] = \"RECORD_ERASE\"] = 20;\n    values[valuesById[21] = \"RECORD_SUBSCRIBEANDHEAD\"] = 21;\n    values[valuesById[22] = \"RECORD_SUBSCRIBEANDREAD\"] = 22;\n    values[valuesById[23] = \"RECORD_SUBSCRIBECREATEANDREAD\"] = 23;\n    values[valuesById[24] = \"RECORD_SUBSCRIBECREATEANDUPDATE\"] = 24;\n    values[valuesById[25] = \"RECORD_SUBSCRIBE\"] = 25;\n    values[valuesById[26] = \"RECORD_UNSUBSCRIBE\"] = 26;\n    values[valuesById[27] = \"RECORD_LISTEN\"] = 27;\n    values[valuesById[28] = \"RECORD_UNLISTEN\"] = 28;\n    values[valuesById[29] = \"RECORD_LISTEN_ACCEPT\"] = 29;\n    values[valuesById[30] = \"RECORD_LISTEN_REJECT\"] = 30;\n    values[valuesById[31] = \"RECORD_SUBSCRIPTION_HAS_PROVIDER\"] = 31;\n    values[valuesById[32] = \"RECORD_SUBSCRIPTION_HAS_NO_PROVIDER\"] = 32;\n    values[valuesById[33] = \"RECORD_SUBSCRIPTION_FOR_PATTERN_FOUND\"] = 33;\n    values[valuesById[34] = \"RECORD_SUBSCRIPTION_FOR_PATTERN_REMOVED\"] = 34;\n    values[valuesById[100] = \"RECORD_CACHE_RETRIEVAL_TIMEOUT\"] = 100;\n    values[valuesById[101] = \"RECORD_STORAGE_RETRIEVAL_TIMEOUT\"] = 101;\n    values[valuesById[102] = \"RECORD_VERSION_EXISTS\"] = 102;\n    values[valuesById[103] = \"RECORD_RECORD_LOAD_ERROR\"] = 103;\n    values[valuesById[104] = \"RECORD_RECORD_CREATE_ERROR\"] = 104;\n    values[valuesById[105] = \"RECORD_RECORD_UPDATE_ERROR\"] = 105;\n    values[valuesById[106] = \"RECORD_RECORD_DELETE_ERROR\"] = 106;\n    values[valuesById[107] = \"RECORD_RECORD_NOT_FOUND\"] = 107;\n    values[valuesById[108] = \"RECORD_INVALID_VERSION\"] = 108;\n    values[valuesById[109] = \"RECORD_INVALID_PATCH_ON_HOTPATH\"] = 109;\n    values[valuesById[110] = \"RECORD_INVALID_LISTEN_REGEX\"] = 110;\n    values[valuesById[111] = \"RECORD_LISTEN_RESPONSE_TIMEOUT\"] = 111;\n    values[valuesById[112] = \"RECORD_LISTEN_UNSUCCESSFUL\"] = 112;\n    values[valuesById[113] = \"RECORD_RECORD_NOTIFY_ERROR\"] = 113;\n    values[valuesById[114] = \"RECORD_MESSAGE_PERMISSION_ERROR\"] = 114;\n    values[valuesById[115] = \"RECORD_MESSAGE_DENIED\"] = 115;\n    values[valuesById[116] = \"RECORD_INVALID_MESSAGE_DATA\"] = 116;\n    values[valuesById[117] = \"RECORD_MULTIPLE_SUBSCRIPTIONS\"] = 117;\n    values[valuesById[118] = \"RECORD_NOT_SUBSCRIBED\"] = 118;\n    return values;\n})();\n\n$root.RecordMessage = (function() {\n\n    /**\n     * Properties of a RecordMessage.\n     * @exports IRecordMessage\n     * @interface IRecordMessage\n     * @property {RECORD_ACTION|null} [action] RecordMessage action\n     * @property {string|null} [data] RecordMessage data\n     * @property {string|null} [correlationId] RecordMessage correlationId\n     * @property {boolean|null} [isError] RecordMessage isError\n     * @property {boolean|null} [isAck] RecordMessage isAck\n     * @property {string|null} [name] RecordMessage name\n     * @property {Array.<string>|null} [names] RecordMessage names\n     * @property {string|null} [pattern] RecordMessage pattern\n     * @property {string|null} [subscription] RecordMessage subscription\n     * @property {RECORD_ACTION|null} [originalAction] RecordMessage originalAction\n     * @property {boolean|null} [isWriteAck] RecordMessage isWriteAck\n     * @property {string|null} [path] RecordMessage path\n     * @property {number|null} [version] RecordMessage version\n     * @property {Object.<string,number>|null} [versions] RecordMessage versions\n     */\n\n    /**\n     * Constructs a new RecordMessage.\n     * @exports RecordMessage\n     * @classdesc Represents a RecordMessage.\n     * @implements IRecordMessage\n     * @constructor\n     * @param {IRecordMessage=} [properties] Properties to set\n     */\n    function RecordMessage(properties) {\n        this.names = [];\n        this.versions = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * RecordMessage action.\n     * @member {RECORD_ACTION} action\n     * @memberof RecordMessage\n     * @instance\n     */\n    RecordMessage.prototype.action = 0;\n\n    /**\n     * RecordMessage data.\n     * @member {string} data\n     * @memberof RecordMessage\n     * @instance\n     */\n    RecordMessage.prototype.data = \"\";\n\n    /**\n     * RecordMessage correlationId.\n     * @member {string} correlationId\n     * @memberof RecordMessage\n     * @instance\n     */\n    RecordMessage.prototype.correlationId = \"\";\n\n    /**\n     * RecordMessage isError.\n     * @member {boolean} isError\n     * @memberof RecordMessage\n     * @instance\n     */\n    RecordMessage.prototype.isError = false;\n\n    /**\n     * RecordMessage isAck.\n     * @member {boolean} isAck\n     * @memberof RecordMessage\n     * @instance\n     */\n    RecordMessage.prototype.isAck = false;\n\n    /**\n     * RecordMessage name.\n     * @member {string} name\n     * @memberof RecordMessage\n     * @instance\n     */\n    RecordMessage.prototype.name = \"\";\n\n    /**\n     * RecordMessage names.\n     * @member {Array.<string>} names\n     * @memberof RecordMessage\n     * @instance\n     */\n    RecordMessage.prototype.names = $util.emptyArray;\n\n    /**\n     * RecordMessage pattern.\n     * @member {string} pattern\n     * @memberof RecordMessage\n     * @instance\n     */\n    RecordMessage.prototype.pattern = \"\";\n\n    /**\n     * RecordMessage subscription.\n     * @member {string} subscription\n     * @memberof RecordMessage\n     * @instance\n     */\n    RecordMessage.prototype.subscription = \"\";\n\n    /**\n     * RecordMessage originalAction.\n     * @member {RECORD_ACTION} originalAction\n     * @memberof RecordMessage\n     * @instance\n     */\n    RecordMessage.prototype.originalAction = 0;\n\n    /**\n     * RecordMessage isWriteAck.\n     * @member {boolean} isWriteAck\n     * @memberof RecordMessage\n     * @instance\n     */\n    RecordMessage.prototype.isWriteAck = false;\n\n    /**\n     * RecordMessage path.\n     * @member {string} path\n     * @memberof RecordMessage\n     * @instance\n     */\n    RecordMessage.prototype.path = \"\";\n\n    /**\n     * RecordMessage version.\n     * @member {number} version\n     * @memberof RecordMessage\n     * @instance\n     */\n    RecordMessage.prototype.version = 0;\n\n    /**\n     * RecordMessage versions.\n     * @member {Object.<string,number>} versions\n     * @memberof RecordMessage\n     * @instance\n     */\n    RecordMessage.prototype.versions = $util.emptyObject;\n\n    /**\n     * Encodes the specified RecordMessage message. Does not implicitly {@link RecordMessage.verify|verify} messages.\n     * @function encode\n     * @memberof RecordMessage\n     * @static\n     * @param {IRecordMessage} message RecordMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RecordMessage.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.action != null && Object.hasOwnProperty.call(message, \"action\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.action);\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.data);\n        if (message.correlationId != null && Object.hasOwnProperty.call(message, \"correlationId\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.correlationId);\n        if (message.isError != null && Object.hasOwnProperty.call(message, \"isError\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.isError);\n        if (message.isAck != null && Object.hasOwnProperty.call(message, \"isAck\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.isAck);\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n            writer.uint32(/* id 6, wireType 2 =*/50).string(message.name);\n        if (message.names != null && message.names.length)\n            for (var i = 0; i < message.names.length; ++i)\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.names[i]);\n        if (message.pattern != null && Object.hasOwnProperty.call(message, \"pattern\"))\n            writer.uint32(/* id 8, wireType 2 =*/66).string(message.pattern);\n        if (message.subscription != null && Object.hasOwnProperty.call(message, \"subscription\"))\n            writer.uint32(/* id 9, wireType 2 =*/74).string(message.subscription);\n        if (message.originalAction != null && Object.hasOwnProperty.call(message, \"originalAction\"))\n            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.originalAction);\n        if (message.isWriteAck != null && Object.hasOwnProperty.call(message, \"isWriteAck\"))\n            writer.uint32(/* id 11, wireType 0 =*/88).bool(message.isWriteAck);\n        if (message.path != null && Object.hasOwnProperty.call(message, \"path\"))\n            writer.uint32(/* id 12, wireType 2 =*/98).string(message.path);\n        if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n            writer.uint32(/* id 13, wireType 0 =*/104).int32(message.version);\n        if (message.versions != null && Object.hasOwnProperty.call(message, \"versions\"))\n            for (var keys = Object.keys(message.versions), i = 0; i < keys.length; ++i)\n                writer.uint32(/* id 14, wireType 2 =*/114).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.versions[keys[i]]).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified RecordMessage message, length delimited. Does not implicitly {@link RecordMessage.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof RecordMessage\n     * @static\n     * @param {IRecordMessage} message RecordMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RecordMessage.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a RecordMessage message from the specified reader or buffer.\n     * @function decode\n     * @memberof RecordMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {RecordMessage} RecordMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RecordMessage.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RecordMessage(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.action = reader.int32();\n                break;\n            case 2:\n                message.data = reader.string();\n                break;\n            case 3:\n                message.correlationId = reader.string();\n                break;\n            case 4:\n                message.isError = reader.bool();\n                break;\n            case 5:\n                message.isAck = reader.bool();\n                break;\n            case 6:\n                message.name = reader.string();\n                break;\n            case 7:\n                if (!(message.names && message.names.length))\n                    message.names = [];\n                message.names.push(reader.string());\n                break;\n            case 8:\n                message.pattern = reader.string();\n                break;\n            case 9:\n                message.subscription = reader.string();\n                break;\n            case 10:\n                message.originalAction = reader.int32();\n                break;\n            case 11:\n                message.isWriteAck = reader.bool();\n                break;\n            case 12:\n                message.path = reader.string();\n                break;\n            case 13:\n                message.version = reader.int32();\n                break;\n            case 14:\n                reader.skip().pos++;\n                if (message.versions === $util.emptyObject)\n                    message.versions = {};\n                key = reader.string();\n                reader.pos++;\n                message.versions[key] = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a RecordMessage message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof RecordMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {RecordMessage} RecordMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RecordMessage.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    return RecordMessage;\n})();\n\n/**\n * RPC_ACTION enum.\n * @exports RPC_ACTION\n * @enum {number}\n * @property {number} RPC_UNKNOWN=0 RPC_UNKNOWN value\n * @property {number} RPC_ERROR=1 RPC_ERROR value\n * @property {number} RPC_REQUEST=2 RPC_REQUEST value\n * @property {number} RPC_ACCEPT=4 RPC_ACCEPT value\n * @property {number} RPC_RESPONSE=5 RPC_RESPONSE value\n * @property {number} RPC_REJECT=6 RPC_REJECT value\n * @property {number} RPC_REQUEST_ERROR=7 RPC_REQUEST_ERROR value\n * @property {number} RPC_PROVIDE=8 RPC_PROVIDE value\n * @property {number} RPC_UNPROVIDE=9 RPC_UNPROVIDE value\n * @property {number} RPC_NO_RPC_PROVIDER=100 RPC_NO_RPC_PROVIDER value\n * @property {number} RPC_ACCEPT_TIMEOUT=101 RPC_ACCEPT_TIMEOUT value\n * @property {number} RPC_MULTIPLE_ACCEPT=102 RPC_MULTIPLE_ACCEPT value\n * @property {number} RPC_INVALID_RPC_CORRELATION_ID=103 RPC_INVALID_RPC_CORRELATION_ID value\n * @property {number} RPC_RESPONSE_TIMEOUT=104 RPC_RESPONSE_TIMEOUT value\n * @property {number} RPC_MULTIPLE_RESPONSE=105 RPC_MULTIPLE_RESPONSE value\n * @property {number} RPC_MESSAGE_PERMISSION_ERROR=106 RPC_MESSAGE_PERMISSION_ERROR value\n * @property {number} RPC_MESSAGE_DENIED=107 RPC_MESSAGE_DENIED value\n * @property {number} RPC_INVALID_MESSAGE_DATA=108 RPC_INVALID_MESSAGE_DATA value\n * @property {number} RPC_MULTIPLE_PROVIDERS=109 RPC_MULTIPLE_PROVIDERS value\n * @property {number} RPC_NOT_PROVIDED=110 RPC_NOT_PROVIDED value\n */\n$root.RPC_ACTION = (function() {\n    var valuesById = {}, values = Object.create(valuesById);\n    values[valuesById[0] = \"RPC_UNKNOWN\"] = 0;\n    values[valuesById[1] = \"RPC_ERROR\"] = 1;\n    values[valuesById[2] = \"RPC_REQUEST\"] = 2;\n    values[valuesById[4] = \"RPC_ACCEPT\"] = 4;\n    values[valuesById[5] = \"RPC_RESPONSE\"] = 5;\n    values[valuesById[6] = \"RPC_REJECT\"] = 6;\n    values[valuesById[7] = \"RPC_REQUEST_ERROR\"] = 7;\n    values[valuesById[8] = \"RPC_PROVIDE\"] = 8;\n    values[valuesById[9] = \"RPC_UNPROVIDE\"] = 9;\n    values[valuesById[100] = \"RPC_NO_RPC_PROVIDER\"] = 100;\n    values[valuesById[101] = \"RPC_ACCEPT_TIMEOUT\"] = 101;\n    values[valuesById[102] = \"RPC_MULTIPLE_ACCEPT\"] = 102;\n    values[valuesById[103] = \"RPC_INVALID_RPC_CORRELATION_ID\"] = 103;\n    values[valuesById[104] = \"RPC_RESPONSE_TIMEOUT\"] = 104;\n    values[valuesById[105] = \"RPC_MULTIPLE_RESPONSE\"] = 105;\n    values[valuesById[106] = \"RPC_MESSAGE_PERMISSION_ERROR\"] = 106;\n    values[valuesById[107] = \"RPC_MESSAGE_DENIED\"] = 107;\n    values[valuesById[108] = \"RPC_INVALID_MESSAGE_DATA\"] = 108;\n    values[valuesById[109] = \"RPC_MULTIPLE_PROVIDERS\"] = 109;\n    values[valuesById[110] = \"RPC_NOT_PROVIDED\"] = 110;\n    return values;\n})();\n\n$root.RpcMessage = (function() {\n\n    /**\n     * Properties of a RpcMessage.\n     * @exports IRpcMessage\n     * @interface IRpcMessage\n     * @property {RPC_ACTION|null} [action] RpcMessage action\n     * @property {string|null} [data] RpcMessage data\n     * @property {string|null} [correlationId] RpcMessage correlationId\n     * @property {boolean|null} [isError] RpcMessage isError\n     * @property {boolean|null} [isAck] RpcMessage isAck\n     * @property {Array.<string>|null} [names] RpcMessage names\n     * @property {string|null} [name] RpcMessage name\n     * @property {string|null} [reason] RpcMessage reason\n     * @property {number|null} [originalAction] RpcMessage originalAction\n     */\n\n    /**\n     * Constructs a new RpcMessage.\n     * @exports RpcMessage\n     * @classdesc Represents a RpcMessage.\n     * @implements IRpcMessage\n     * @constructor\n     * @param {IRpcMessage=} [properties] Properties to set\n     */\n    function RpcMessage(properties) {\n        this.names = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * RpcMessage action.\n     * @member {RPC_ACTION} action\n     * @memberof RpcMessage\n     * @instance\n     */\n    RpcMessage.prototype.action = 0;\n\n    /**\n     * RpcMessage data.\n     * @member {string} data\n     * @memberof RpcMessage\n     * @instance\n     */\n    RpcMessage.prototype.data = \"\";\n\n    /**\n     * RpcMessage correlationId.\n     * @member {string} correlationId\n     * @memberof RpcMessage\n     * @instance\n     */\n    RpcMessage.prototype.correlationId = \"\";\n\n    /**\n     * RpcMessage isError.\n     * @member {boolean} isError\n     * @memberof RpcMessage\n     * @instance\n     */\n    RpcMessage.prototype.isError = false;\n\n    /**\n     * RpcMessage isAck.\n     * @member {boolean} isAck\n     * @memberof RpcMessage\n     * @instance\n     */\n    RpcMessage.prototype.isAck = false;\n\n    /**\n     * RpcMessage names.\n     * @member {Array.<string>} names\n     * @memberof RpcMessage\n     * @instance\n     */\n    RpcMessage.prototype.names = $util.emptyArray;\n\n    /**\n     * RpcMessage name.\n     * @member {string} name\n     * @memberof RpcMessage\n     * @instance\n     */\n    RpcMessage.prototype.name = \"\";\n\n    /**\n     * RpcMessage reason.\n     * @member {string} reason\n     * @memberof RpcMessage\n     * @instance\n     */\n    RpcMessage.prototype.reason = \"\";\n\n    /**\n     * RpcMessage originalAction.\n     * @member {number} originalAction\n     * @memberof RpcMessage\n     * @instance\n     */\n    RpcMessage.prototype.originalAction = 0;\n\n    /**\n     * Encodes the specified RpcMessage message. Does not implicitly {@link RpcMessage.verify|verify} messages.\n     * @function encode\n     * @memberof RpcMessage\n     * @static\n     * @param {IRpcMessage} message RpcMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RpcMessage.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.action != null && Object.hasOwnProperty.call(message, \"action\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.action);\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.data);\n        if (message.correlationId != null && Object.hasOwnProperty.call(message, \"correlationId\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.correlationId);\n        if (message.isError != null && Object.hasOwnProperty.call(message, \"isError\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.isError);\n        if (message.isAck != null && Object.hasOwnProperty.call(message, \"isAck\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.isAck);\n        if (message.names != null && message.names.length)\n            for (var i = 0; i < message.names.length; ++i)\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.names[i]);\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n            writer.uint32(/* id 7, wireType 2 =*/58).string(message.name);\n        if (message.reason != null && Object.hasOwnProperty.call(message, \"reason\"))\n            writer.uint32(/* id 8, wireType 2 =*/66).string(message.reason);\n        if (message.originalAction != null && Object.hasOwnProperty.call(message, \"originalAction\"))\n            writer.uint32(/* id 9, wireType 0 =*/72).int32(message.originalAction);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified RpcMessage message, length delimited. Does not implicitly {@link RpcMessage.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof RpcMessage\n     * @static\n     * @param {IRpcMessage} message RpcMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RpcMessage.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a RpcMessage message from the specified reader or buffer.\n     * @function decode\n     * @memberof RpcMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {RpcMessage} RpcMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RpcMessage.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RpcMessage();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.action = reader.int32();\n                break;\n            case 2:\n                message.data = reader.string();\n                break;\n            case 3:\n                message.correlationId = reader.string();\n                break;\n            case 4:\n                message.isError = reader.bool();\n                break;\n            case 5:\n                message.isAck = reader.bool();\n                break;\n            case 6:\n                if (!(message.names && message.names.length))\n                    message.names = [];\n                message.names.push(reader.string());\n                break;\n            case 7:\n                message.name = reader.string();\n                break;\n            case 8:\n                message.reason = reader.string();\n                break;\n            case 9:\n                message.originalAction = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a RpcMessage message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof RpcMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {RpcMessage} RpcMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RpcMessage.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    return RpcMessage;\n})();\n\n/**\n * STATE_REGISTRY_TOPIC enum.\n * @exports STATE_REGISTRY_TOPIC\n * @enum {number}\n * @property {number} STATE_REGISTRY_UNKNOWN=0 STATE_REGISTRY_UNKNOWN value\n * @property {number} STATE_REGISTRY_EVENT_SUBSCRIPTIONS=11 STATE_REGISTRY_EVENT_SUBSCRIPTIONS value\n * @property {number} STATE_REGISTRY_RECORD_SUBSCRIPTIONS=12 STATE_REGISTRY_RECORD_SUBSCRIPTIONS value\n * @property {number} STATE_REGISTRY_SUBSCRIPTIONS=9 STATE_REGISTRY_SUBSCRIPTIONS value\n * @property {number} STATE_REGISTRY_ONLINE_USERS=10 STATE_REGISTRY_ONLINE_USERS value\n * @property {number} STATE_REGISTRY_MONITORING_SUBSCRIPTIONS=24 STATE_REGISTRY_MONITORING_SUBSCRIPTIONS value\n * @property {number} STATE_REGISTRY_RPC_SUBSCRIPTIONS=13 STATE_REGISTRY_RPC_SUBSCRIPTIONS value\n * @property {number} STATE_REGISTRY_PRESENCE_SUBSCRIPTIONS=14 STATE_REGISTRY_PRESENCE_SUBSCRIPTIONS value\n * @property {number} STATE_REGISTRY_RECORD_LISTEN_PATTERNS=15 STATE_REGISTRY_RECORD_LISTEN_PATTERNS value\n * @property {number} STATE_REGISTRY_EVENT_LISTEN_PATTERNS=16 STATE_REGISTRY_EVENT_LISTEN_PATTERNS value\n * @property {number} STATE_REGISTRY_RECORD_PUBLISHED_SUBSCRIPTIONS=17 STATE_REGISTRY_RECORD_PUBLISHED_SUBSCRIPTIONS value\n * @property {number} STATE_REGISTRY_EVENT_PUBLISHED_SUBSCRIPTIONS=18 STATE_REGISTRY_EVENT_PUBLISHED_SUBSCRIPTIONS value\n * @property {number} STATE_REGISTRY_RECORD_LISTENING=19 STATE_REGISTRY_RECORD_LISTENING value\n * @property {number} STATE_REGISTRY_EVENT_LISTENING=20 STATE_REGISTRY_EVENT_LISTENING value\n * @property {number} STATE_REGISTRY_STATE_REGISTRY=21 STATE_REGISTRY_STATE_REGISTRY value\n */\n$root.STATE_REGISTRY_TOPIC = (function() {\n    var valuesById = {}, values = Object.create(valuesById);\n    values[valuesById[0] = \"STATE_REGISTRY_UNKNOWN\"] = 0;\n    values[valuesById[11] = \"STATE_REGISTRY_EVENT_SUBSCRIPTIONS\"] = 11;\n    values[valuesById[12] = \"STATE_REGISTRY_RECORD_SUBSCRIPTIONS\"] = 12;\n    values[valuesById[9] = \"STATE_REGISTRY_SUBSCRIPTIONS\"] = 9;\n    values[valuesById[10] = \"STATE_REGISTRY_ONLINE_USERS\"] = 10;\n    values[valuesById[24] = \"STATE_REGISTRY_MONITORING_SUBSCRIPTIONS\"] = 24;\n    values[valuesById[13] = \"STATE_REGISTRY_RPC_SUBSCRIPTIONS\"] = 13;\n    values[valuesById[14] = \"STATE_REGISTRY_PRESENCE_SUBSCRIPTIONS\"] = 14;\n    values[valuesById[15] = \"STATE_REGISTRY_RECORD_LISTEN_PATTERNS\"] = 15;\n    values[valuesById[16] = \"STATE_REGISTRY_EVENT_LISTEN_PATTERNS\"] = 16;\n    values[valuesById[17] = \"STATE_REGISTRY_RECORD_PUBLISHED_SUBSCRIPTIONS\"] = 17;\n    values[valuesById[18] = \"STATE_REGISTRY_EVENT_PUBLISHED_SUBSCRIPTIONS\"] = 18;\n    values[valuesById[19] = \"STATE_REGISTRY_RECORD_LISTENING\"] = 19;\n    values[valuesById[20] = \"STATE_REGISTRY_EVENT_LISTENING\"] = 20;\n    values[valuesById[21] = \"STATE_REGISTRY_STATE_REGISTRY\"] = 21;\n    return values;\n})();\n\n/**\n * STATE_ACTION enum.\n * @exports STATE_ACTION\n * @enum {number}\n * @property {number} STATE_UNKNOWN=0 STATE_UNKNOWN value\n * @property {number} STATE_ERROR=1 STATE_ERROR value\n * @property {number} STATE_ADD=2 STATE_ADD value\n * @property {number} STATE_REMOVE=3 STATE_REMOVE value\n * @property {number} STATE_REQUEST_FULL_STATE=4 STATE_REQUEST_FULL_STATE value\n * @property {number} STATE_FULL_STATE=5 STATE_FULL_STATE value\n * @property {number} STATE_CHECKSUM=6 STATE_CHECKSUM value\n */\n$root.STATE_ACTION = (function() {\n    var valuesById = {}, values = Object.create(valuesById);\n    values[valuesById[0] = \"STATE_UNKNOWN\"] = 0;\n    values[valuesById[1] = \"STATE_ERROR\"] = 1;\n    values[valuesById[2] = \"STATE_ADD\"] = 2;\n    values[valuesById[3] = \"STATE_REMOVE\"] = 3;\n    values[valuesById[4] = \"STATE_REQUEST_FULL_STATE\"] = 4;\n    values[valuesById[5] = \"STATE_FULL_STATE\"] = 5;\n    values[valuesById[6] = \"STATE_CHECKSUM\"] = 6;\n    return values;\n})();\n\n$root.StateMessage = (function() {\n\n    /**\n     * Properties of a StateMessage.\n     * @exports IStateMessage\n     * @interface IStateMessage\n     * @property {STATE_ACTION|null} [action] StateMessage action\n     * @property {string|null} [data] StateMessage data\n     * @property {boolean|null} [isError] StateMessage isError\n     * @property {number|null} [checksum] StateMessage checksum\n     * @property {Array.<string>|null} [fullState] StateMessage fullState\n     * @property {string|null} [serverName] StateMessage serverName\n     * @property {STATE_REGISTRY_TOPIC|null} [registryTOPIC] StateMessage registryTOPIC\n     */\n\n    /**\n     * Constructs a new StateMessage.\n     * @exports StateMessage\n     * @classdesc Represents a StateMessage.\n     * @implements IStateMessage\n     * @constructor\n     * @param {IStateMessage=} [properties] Properties to set\n     */\n    function StateMessage(properties) {\n        this.fullState = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * StateMessage action.\n     * @member {STATE_ACTION} action\n     * @memberof StateMessage\n     * @instance\n     */\n    StateMessage.prototype.action = 0;\n\n    /**\n     * StateMessage data.\n     * @member {string} data\n     * @memberof StateMessage\n     * @instance\n     */\n    StateMessage.prototype.data = \"\";\n\n    /**\n     * StateMessage isError.\n     * @member {boolean} isError\n     * @memberof StateMessage\n     * @instance\n     */\n    StateMessage.prototype.isError = false;\n\n    /**\n     * StateMessage checksum.\n     * @member {number} checksum\n     * @memberof StateMessage\n     * @instance\n     */\n    StateMessage.prototype.checksum = 0;\n\n    /**\n     * StateMessage fullState.\n     * @member {Array.<string>} fullState\n     * @memberof StateMessage\n     * @instance\n     */\n    StateMessage.prototype.fullState = $util.emptyArray;\n\n    /**\n     * StateMessage serverName.\n     * @member {string} serverName\n     * @memberof StateMessage\n     * @instance\n     */\n    StateMessage.prototype.serverName = \"\";\n\n    /**\n     * StateMessage registryTOPIC.\n     * @member {STATE_REGISTRY_TOPIC} registryTOPIC\n     * @memberof StateMessage\n     * @instance\n     */\n    StateMessage.prototype.registryTOPIC = 0;\n\n    /**\n     * Encodes the specified StateMessage message. Does not implicitly {@link StateMessage.verify|verify} messages.\n     * @function encode\n     * @memberof StateMessage\n     * @static\n     * @param {IStateMessage} message StateMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StateMessage.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.action != null && Object.hasOwnProperty.call(message, \"action\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.action);\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.data);\n        if (message.isError != null && Object.hasOwnProperty.call(message, \"isError\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isError);\n        if (message.checksum != null && Object.hasOwnProperty.call(message, \"checksum\"))\n            writer.uint32(/* id 19, wireType 0 =*/152).int32(message.checksum);\n        if (message.fullState != null && message.fullState.length)\n            for (var i = 0; i < message.fullState.length; ++i)\n                writer.uint32(/* id 20, wireType 2 =*/162).string(message.fullState[i]);\n        if (message.serverName != null && Object.hasOwnProperty.call(message, \"serverName\"))\n            writer.uint32(/* id 21, wireType 2 =*/170).string(message.serverName);\n        if (message.registryTOPIC != null && Object.hasOwnProperty.call(message, \"registryTOPIC\"))\n            writer.uint32(/* id 22, wireType 0 =*/176).int32(message.registryTOPIC);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified StateMessage message, length delimited. Does not implicitly {@link StateMessage.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof StateMessage\n     * @static\n     * @param {IStateMessage} message StateMessage message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StateMessage.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a StateMessage message from the specified reader or buffer.\n     * @function decode\n     * @memberof StateMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {StateMessage} StateMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StateMessage.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StateMessage();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.action = reader.int32();\n                break;\n            case 2:\n                message.data = reader.string();\n                break;\n            case 3:\n                message.isError = reader.bool();\n                break;\n            case 19:\n                message.checksum = reader.int32();\n                break;\n            case 20:\n                if (!(message.fullState && message.fullState.length))\n                    message.fullState = [];\n                message.fullState.push(reader.string());\n                break;\n            case 21:\n                message.serverName = reader.string();\n                break;\n            case 22:\n                message.registryTOPIC = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a StateMessage message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof StateMessage\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {StateMessage} StateMessage\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StateMessage.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    return StateMessage;\n})();\n\nmodule.exports = $root;\n\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@deepstream/protobuf/dist/generated/protobuf.js?");

/***/ }),

/***/ "./node_modules/@deepstream/protobuf/dist/src/message-builder.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@deepstream/protobuf/dist/src/message-builder.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst protobuf_map_1 = __webpack_require__(/*! ./protobuf-map */ \"./node_modules/@deepstream/protobuf/dist/src/protobuf-map.js\");\n// @ts-ignore\nconst protobuf_1 = __webpack_require__(/*! ../generated/protobuf */ \"./node_modules/@deepstream/protobuf/dist/generated/protobuf.js\");\nfunction getMessage(message, isAck) {\n    if (isAck && !message.isAck) {\n        message = Object.assign(Object.assign({}, message), { isAck: true });\n    }\n    if (message.data === undefined && message.parsedData !== undefined) {\n        message.data = JSON.stringify(message.parsedData);\n    }\n    const serializedMessage = protobuf_map_1.TopicMessage[message.topic].encode(message).finish();\n    const x = protobuf_1.Message.encodeDelimited({ topic: message.topic, message: serializedMessage }).finish();\n    return x;\n}\nexports.getMessage = getMessage;\n//# sourceMappingURL=message-builder.js.map\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@deepstream/protobuf/dist/src/message-builder.js?");

/***/ }),

/***/ "./node_modules/@deepstream/protobuf/dist/src/message-parser.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@deepstream/protobuf/dist/src/message-parser.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst protobuf_map_1 = __webpack_require__(/*! ./protobuf-map */ \"./node_modules/@deepstream/protobuf/dist/src/protobuf-map.js\");\n// @ts-ignore\nconst protobuf_1 = __webpack_require__(/*! ../generated/protobuf */ \"./node_modules/@deepstream/protobuf/dist/generated/protobuf.js\");\nconst all_1 = __webpack_require__(/*! ../types/all */ \"./node_modules/@deepstream/protobuf/dist/types/all.js\");\nfunction parse(data) {\n    try {\n        const msg = protobuf_1.Message.decodeDelimited(data);\n        const message = protobuf_map_1.TopicMessage[msg.topic].decode(msg.message, msg.message.length);\n        return [Object.assign({ topic: msg.topic }, message)];\n    }\n    catch (e) {\n        return [{ topic: all_1.TOPIC.PARSER, action: all_1.PARSER_ACTION.ERROR }];\n    }\n}\nexports.parse = parse;\nfunction parseData(message) {\n    if (message.parsedData !== undefined || message.data === undefined) {\n        return true;\n    }\n    message.parsedData = JSON.parse(message.data);\n    if (message.parsedData === undefined) {\n        return new Error(`unable to parse data ${message.data}`);\n    }\n    return true;\n}\nexports.parseData = parseData;\n//# sourceMappingURL=message-parser.js.map\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@deepstream/protobuf/dist/src/message-parser.js?");

/***/ }),

/***/ "./node_modules/@deepstream/protobuf/dist/src/protobuf-map.js":
/*!********************************************************************!*\
  !*** ./node_modules/@deepstream/protobuf/dist/src/protobuf-map.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst protobuf_1 = __webpack_require__(/*! ../generated/protobuf */ \"./node_modules/@deepstream/protobuf/dist/generated/protobuf.js\");\nexports.TopicMessage = {\n    [protobuf_1.TOPIC.RECORD]: protobuf_1.RecordMessage,\n    [protobuf_1.TOPIC.CLUSTER]: protobuf_1.ClusterMessage,\n    [protobuf_1.TOPIC.CONNECTION]: protobuf_1.ConnectionMessage,\n    [protobuf_1.TOPIC.AUTH]: protobuf_1.AuthMessage,\n    [protobuf_1.TOPIC.EVENT]: protobuf_1.EventMessage,\n    [protobuf_1.TOPIC.LOCK]: protobuf_1.LockMessage,\n    [protobuf_1.TOPIC.MONITORING]: protobuf_1.MonitoringMessage,\n    [protobuf_1.TOPIC.PARSER]: protobuf_1.ParserMessage,\n    [protobuf_1.TOPIC.PRESENCE]: protobuf_1.PresenceMessage,\n    [protobuf_1.TOPIC.RPC]: protobuf_1.RpcMessage\n};\n//# sourceMappingURL=protobuf-map.js.map\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@deepstream/protobuf/dist/src/protobuf-map.js?");

/***/ }),

/***/ "./node_modules/@deepstream/protobuf/dist/types/all.js":
/*!*************************************************************!*\
  !*** ./node_modules/@deepstream/protobuf/dist/types/all.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar general_1 = __webpack_require__(/*! ../types/general */ \"./node_modules/@deepstream/protobuf/dist/types/general.js\");\nexports.TOPIC = general_1.TOPIC;\nvar record_1 = __webpack_require__(/*! ../types/record */ \"./node_modules/@deepstream/protobuf/dist/types/record.js\");\nexports.RECORD_ACTION = record_1.RECORD_ACTION;\nvar auth_1 = __webpack_require__(/*! ../types/auth */ \"./node_modules/@deepstream/protobuf/dist/types/auth.js\");\nexports.AUTH_ACTION = auth_1.AUTH_ACTION;\nvar event_1 = __webpack_require__(/*! ../types/event */ \"./node_modules/@deepstream/protobuf/dist/types/event.js\");\nexports.EVENT_ACTION = event_1.EVENT_ACTION;\nvar rpc_1 = __webpack_require__(/*! ../types/rpc */ \"./node_modules/@deepstream/protobuf/dist/types/rpc.js\");\nexports.RPC_ACTION = rpc_1.RPC_ACTION;\nvar presence_1 = __webpack_require__(/*! ../types/presence */ \"./node_modules/@deepstream/protobuf/dist/types/presence.js\");\nexports.PRESENCE_ACTION = presence_1.PRESENCE_ACTION;\nvar connection_1 = __webpack_require__(/*! ../types/connection */ \"./node_modules/@deepstream/protobuf/dist/types/connection.js\");\nexports.CONNECTION_ACTION = connection_1.CONNECTION_ACTION;\nvar cluster_1 = __webpack_require__(/*! ../types/cluster */ \"./node_modules/@deepstream/protobuf/dist/types/cluster.js\");\nexports.CLUSTER_ACTION = cluster_1.CLUSTER_ACTION;\nvar lock_1 = __webpack_require__(/*! ../types/lock */ \"./node_modules/@deepstream/protobuf/dist/types/lock.js\");\nexports.LOCK_ACTION = lock_1.LOCK_ACTION;\nvar parser_1 = __webpack_require__(/*! ../types/parser */ \"./node_modules/@deepstream/protobuf/dist/types/parser.js\");\nexports.PARSER_ACTION = parser_1.PARSER_ACTION;\nvar monitoring_1 = __webpack_require__(/*! ../types/monitoring */ \"./node_modules/@deepstream/protobuf/dist/types/monitoring.js\");\nexports.MONITORING_ACTION = monitoring_1.MONITORING_ACTION;\nvar state_1 = __webpack_require__(/*! ../types/state */ \"./node_modules/@deepstream/protobuf/dist/types/state.js\");\nexports.STATE_ACTION = state_1.STATE_ACTION;\nexports.STATE_REGISTRY_TOPIC = state_1.STATE_REGISTRY_TOPIC;\n//# sourceMappingURL=all.js.map\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@deepstream/protobuf/dist/types/all.js?");

/***/ }),

/***/ "./node_modules/@deepstream/protobuf/dist/types/auth.js":
/*!**************************************************************!*\
  !*** ./node_modules/@deepstream/protobuf/dist/types/auth.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AUTH_ACTION;\n(function (AUTH_ACTION) {\n    AUTH_ACTION[AUTH_ACTION[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    AUTH_ACTION[AUTH_ACTION[\"ERROR\"] = 1] = \"ERROR\";\n    AUTH_ACTION[AUTH_ACTION[\"REQUEST\"] = 2] = \"REQUEST\";\n    AUTH_ACTION[AUTH_ACTION[\"AUTH_SUCCESSFUL\"] = 3] = \"AUTH_SUCCESSFUL\";\n    AUTH_ACTION[AUTH_ACTION[\"AUTH_UNSUCCESSFUL\"] = 4] = \"AUTH_UNSUCCESSFUL\";\n    AUTH_ACTION[AUTH_ACTION[\"TOO_MANY_AUTH_ATTEMPTS\"] = 100] = \"TOO_MANY_AUTH_ATTEMPTS\";\n    AUTH_ACTION[AUTH_ACTION[\"INVALID_MESSAGE\"] = 101] = \"INVALID_MESSAGE\";\n    AUTH_ACTION[AUTH_ACTION[\"INVALID_MESSAGE_DATA\"] = 102] = \"INVALID_MESSAGE_DATA\";\n})(AUTH_ACTION = exports.AUTH_ACTION || (exports.AUTH_ACTION = {}));\n//# sourceMappingURL=auth.js.map\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@deepstream/protobuf/dist/types/auth.js?");

/***/ }),

/***/ "./node_modules/@deepstream/protobuf/dist/types/cluster.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@deepstream/protobuf/dist/types/cluster.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CLUSTER_ACTION;\n(function (CLUSTER_ACTION) {\n    CLUSTER_ACTION[CLUSTER_ACTION[\"REMOVE\"] = 1] = \"REMOVE\";\n    CLUSTER_ACTION[CLUSTER_ACTION[\"STATUS\"] = 2] = \"STATUS\";\n})(CLUSTER_ACTION = exports.CLUSTER_ACTION || (exports.CLUSTER_ACTION = {}));\n//# sourceMappingURL=cluster.js.map\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@deepstream/protobuf/dist/types/cluster.js?");

/***/ }),

/***/ "./node_modules/@deepstream/protobuf/dist/types/connection.js":
/*!********************************************************************!*\
  !*** ./node_modules/@deepstream/protobuf/dist/types/connection.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CONNECTION_ACTION;\n(function (CONNECTION_ACTION) {\n    CONNECTION_ACTION[CONNECTION_ACTION[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    CONNECTION_ACTION[CONNECTION_ACTION[\"ERROR\"] = 1] = \"ERROR\";\n    CONNECTION_ACTION[CONNECTION_ACTION[\"PING\"] = 2] = \"PING\";\n    CONNECTION_ACTION[CONNECTION_ACTION[\"PONG\"] = 3] = \"PONG\";\n    CONNECTION_ACTION[CONNECTION_ACTION[\"ACCEPT\"] = 4] = \"ACCEPT\";\n    CONNECTION_ACTION[CONNECTION_ACTION[\"CHALLENGE\"] = 5] = \"CHALLENGE\";\n    CONNECTION_ACTION[CONNECTION_ACTION[\"REJECT\"] = 6] = \"REJECT\";\n    CONNECTION_ACTION[CONNECTION_ACTION[\"REDIRECT\"] = 7] = \"REDIRECT\";\n    CONNECTION_ACTION[CONNECTION_ACTION[\"CLOSING\"] = 8] = \"CLOSING\";\n    CONNECTION_ACTION[CONNECTION_ACTION[\"CLOSED\"] = 9] = \"CLOSED\";\n    CONNECTION_ACTION[CONNECTION_ACTION[\"AUTHENTICATION_TIMEOUT\"] = 100] = \"AUTHENTICATION_TIMEOUT\";\n    CONNECTION_ACTION[CONNECTION_ACTION[\"INVALID_MESSAGE\"] = 101] = \"INVALID_MESSAGE\";\n})(CONNECTION_ACTION = exports.CONNECTION_ACTION || (exports.CONNECTION_ACTION = {}));\n//# sourceMappingURL=connection.js.map\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@deepstream/protobuf/dist/types/connection.js?");

/***/ }),

/***/ "./node_modules/@deepstream/protobuf/dist/types/event.js":
/*!***************************************************************!*\
  !*** ./node_modules/@deepstream/protobuf/dist/types/event.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EVENT_ACTION;\n(function (EVENT_ACTION) {\n    EVENT_ACTION[EVENT_ACTION[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    EVENT_ACTION[EVENT_ACTION[\"ERROR\"] = 1] = \"ERROR\";\n    EVENT_ACTION[EVENT_ACTION[\"EMIT\"] = 2] = \"EMIT\";\n    EVENT_ACTION[EVENT_ACTION[\"SUBSCRIBE\"] = 3] = \"SUBSCRIBE\";\n    EVENT_ACTION[EVENT_ACTION[\"UNSUBSCRIBE\"] = 4] = \"UNSUBSCRIBE\";\n    EVENT_ACTION[EVENT_ACTION[\"LISTEN\"] = 5] = \"LISTEN\";\n    EVENT_ACTION[EVENT_ACTION[\"UNLISTEN\"] = 6] = \"UNLISTEN\";\n    EVENT_ACTION[EVENT_ACTION[\"LISTEN_ACCEPT\"] = 7] = \"LISTEN_ACCEPT\";\n    EVENT_ACTION[EVENT_ACTION[\"LISTEN_REJECT\"] = 8] = \"LISTEN_REJECT\";\n    EVENT_ACTION[EVENT_ACTION[\"SUBSCRIPTION_HAS_PROVIDER\"] = 9] = \"SUBSCRIPTION_HAS_PROVIDER\";\n    EVENT_ACTION[EVENT_ACTION[\"SUBSCRIPTION_HAS_NO_PROVIDER\"] = 10] = \"SUBSCRIPTION_HAS_NO_PROVIDER\";\n    EVENT_ACTION[EVENT_ACTION[\"SUBSCRIPTION_FOR_PATTERN_FOUND\"] = 11] = \"SUBSCRIPTION_FOR_PATTERN_FOUND\";\n    EVENT_ACTION[EVENT_ACTION[\"SUBSCRIPTION_FOR_PATTERN_REMOVED\"] = 12] = \"SUBSCRIPTION_FOR_PATTERN_REMOVED\";\n    EVENT_ACTION[EVENT_ACTION[\"INVALID_LISTEN_REGEX\"] = 100] = \"INVALID_LISTEN_REGEX\";\n    EVENT_ACTION[EVENT_ACTION[\"LISTEN_RESPONSE_TIMEOUT\"] = 101] = \"LISTEN_RESPONSE_TIMEOUT\";\n    EVENT_ACTION[EVENT_ACTION[\"LISTEN_UNSUCCESSFUL\"] = 102] = \"LISTEN_UNSUCCESSFUL\";\n    EVENT_ACTION[EVENT_ACTION[\"MESSAGE_PERMISSION_ERROR\"] = 103] = \"MESSAGE_PERMISSION_ERROR\";\n    EVENT_ACTION[EVENT_ACTION[\"MESSAGE_DENIED\"] = 104] = \"MESSAGE_DENIED\";\n    EVENT_ACTION[EVENT_ACTION[\"INVALID_MESSAGE_DATA\"] = 105] = \"INVALID_MESSAGE_DATA\";\n    EVENT_ACTION[EVENT_ACTION[\"MULTIPLE_SUBSCRIPTIONS\"] = 106] = \"MULTIPLE_SUBSCRIPTIONS\";\n    EVENT_ACTION[EVENT_ACTION[\"NOT_SUBSCRIBED\"] = 107] = \"NOT_SUBSCRIBED\";\n})(EVENT_ACTION = exports.EVENT_ACTION || (exports.EVENT_ACTION = {}));\n//# sourceMappingURL=event.js.map\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@deepstream/protobuf/dist/types/event.js?");

/***/ }),

/***/ "./node_modules/@deepstream/protobuf/dist/types/general.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@deepstream/protobuf/dist/types/general.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TOPIC;\n(function (TOPIC) {\n    TOPIC[TOPIC[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    TOPIC[TOPIC[\"PARSER\"] = 1] = \"PARSER\";\n    TOPIC[TOPIC[\"CONNECTION\"] = 2] = \"CONNECTION\";\n    TOPIC[TOPIC[\"AUTH\"] = 3] = \"AUTH\";\n    TOPIC[TOPIC[\"EVENT\"] = 4] = \"EVENT\";\n    TOPIC[TOPIC[\"RECORD\"] = 5] = \"RECORD\";\n    TOPIC[TOPIC[\"RPC\"] = 6] = \"RPC\";\n    TOPIC[TOPIC[\"PRESENCE\"] = 7] = \"PRESENCE\";\n    TOPIC[TOPIC[\"MONITORING\"] = 8] = \"MONITORING\";\n    TOPIC[TOPIC[\"CLUSTER\"] = 9] = \"CLUSTER\";\n    TOPIC[TOPIC[\"LOCK\"] = 10] = \"LOCK\";\n    TOPIC[TOPIC[\"STATE_REGISTRY\"] = 11] = \"STATE_REGISTRY\";\n    TOPIC[TOPIC[\"ERROR\"] = 100] = \"ERROR\";\n})(TOPIC = exports.TOPIC || (exports.TOPIC = {}));\n//# sourceMappingURL=general.js.map\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@deepstream/protobuf/dist/types/general.js?");

/***/ }),

/***/ "./node_modules/@deepstream/protobuf/dist/types/lock.js":
/*!**************************************************************!*\
  !*** ./node_modules/@deepstream/protobuf/dist/types/lock.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LOCK_ACTION;\n(function (LOCK_ACTION) {\n    LOCK_ACTION[LOCK_ACTION[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    LOCK_ACTION[LOCK_ACTION[\"ERROR\"] = 1] = \"ERROR\";\n    LOCK_ACTION[LOCK_ACTION[\"REQUEST\"] = 2] = \"REQUEST\";\n    LOCK_ACTION[LOCK_ACTION[\"RESPONSE\"] = 3] = \"RESPONSE\";\n    LOCK_ACTION[LOCK_ACTION[\"RELEASE\"] = 4] = \"RELEASE\";\n})(LOCK_ACTION = exports.LOCK_ACTION || (exports.LOCK_ACTION = {}));\n//# sourceMappingURL=lock.js.map\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@deepstream/protobuf/dist/types/lock.js?");

/***/ }),

/***/ "./node_modules/@deepstream/protobuf/dist/types/messages.js":
/*!******************************************************************!*\
  !*** ./node_modules/@deepstream/protobuf/dist/types/messages.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst all_1 = __webpack_require__(/*! ./all */ \"./node_modules/@deepstream/protobuf/dist/types/all.js\");\nexports.ACTIONS = {\n    [all_1.TOPIC.PARSER]: all_1.PARSER_ACTION,\n    [all_1.TOPIC.CONNECTION]: all_1.CONNECTION_ACTION,\n    [all_1.TOPIC.AUTH]: all_1.AUTH_ACTION,\n    [all_1.TOPIC.EVENT]: all_1.EVENT_ACTION,\n    [all_1.TOPIC.RECORD]: all_1.RECORD_ACTION,\n    [all_1.TOPIC.RPC]: all_1.RPC_ACTION,\n    [all_1.TOPIC.PRESENCE]: all_1.PRESENCE_ACTION,\n    [all_1.TOPIC.LOCK]: all_1.LOCK_ACTION,\n    [all_1.TOPIC.STATE_REGISTRY]: all_1.STATE_ACTION,\n    [all_1.TOPIC.CLUSTER]: all_1.CLUSTER_ACTION,\n    [all_1.TOPIC.MONITORING]: all_1.MONITORING_ACTION\n};\n//# sourceMappingURL=messages.js.map\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@deepstream/protobuf/dist/types/messages.js?");

/***/ }),

/***/ "./node_modules/@deepstream/protobuf/dist/types/monitoring.js":
/*!********************************************************************!*\
  !*** ./node_modules/@deepstream/protobuf/dist/types/monitoring.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MONITORING_ACTION;\n(function (MONITORING_ACTION) {\n})(MONITORING_ACTION = exports.MONITORING_ACTION || (exports.MONITORING_ACTION = {}));\n//# sourceMappingURL=monitoring.js.map\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@deepstream/protobuf/dist/types/monitoring.js?");

/***/ }),

/***/ "./node_modules/@deepstream/protobuf/dist/types/parser.js":
/*!****************************************************************!*\
  !*** ./node_modules/@deepstream/protobuf/dist/types/parser.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PARSER_ACTION;\n(function (PARSER_ACTION) {\n    PARSER_ACTION[PARSER_ACTION[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    PARSER_ACTION[PARSER_ACTION[\"UNKNOWN_TOPIC\"] = 1] = \"UNKNOWN_TOPIC\";\n    PARSER_ACTION[PARSER_ACTION[\"UNKNOWN_ACTION\"] = 2] = \"UNKNOWN_ACTION\";\n    PARSER_ACTION[PARSER_ACTION[\"INVALID_MESSAGE\"] = 3] = \"INVALID_MESSAGE\";\n    PARSER_ACTION[PARSER_ACTION[\"MESSAGE_PARSE_ERROR\"] = 4] = \"MESSAGE_PARSE_ERROR\";\n    PARSER_ACTION[PARSER_ACTION[\"MAXIMUM_MESSAGE_SIZE_EXCEEDED\"] = 5] = \"MAXIMUM_MESSAGE_SIZE_EXCEEDED\";\n    PARSER_ACTION[PARSER_ACTION[\"ERROR\"] = 6] = \"ERROR\";\n    PARSER_ACTION[PARSER_ACTION[\"INVALID_META_PARAMS\"] = 7] = \"INVALID_META_PARAMS\";\n})(PARSER_ACTION = exports.PARSER_ACTION || (exports.PARSER_ACTION = {}));\n//# sourceMappingURL=parser.js.map\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@deepstream/protobuf/dist/types/parser.js?");

/***/ }),

/***/ "./node_modules/@deepstream/protobuf/dist/types/presence.js":
/*!******************************************************************!*\
  !*** ./node_modules/@deepstream/protobuf/dist/types/presence.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PRESENCE_ACTION;\n(function (PRESENCE_ACTION) {\n    PRESENCE_ACTION[PRESENCE_ACTION[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    PRESENCE_ACTION[PRESENCE_ACTION[\"ERROR\"] = 1] = \"ERROR\";\n    PRESENCE_ACTION[PRESENCE_ACTION[\"QUERY_ALL\"] = 2] = \"QUERY_ALL\";\n    PRESENCE_ACTION[PRESENCE_ACTION[\"QUERY_ALL_RESPONSE\"] = 3] = \"QUERY_ALL_RESPONSE\";\n    PRESENCE_ACTION[PRESENCE_ACTION[\"QUERY\"] = 4] = \"QUERY\";\n    PRESENCE_ACTION[PRESENCE_ACTION[\"QUERY_RESPONSE\"] = 5] = \"QUERY_RESPONSE\";\n    PRESENCE_ACTION[PRESENCE_ACTION[\"PRESENCE_JOIN\"] = 6] = \"PRESENCE_JOIN\";\n    PRESENCE_ACTION[PRESENCE_ACTION[\"PRESENCE_JOIN_ALL\"] = 7] = \"PRESENCE_JOIN_ALL\";\n    PRESENCE_ACTION[PRESENCE_ACTION[\"PRESENCE_LEAVE\"] = 8] = \"PRESENCE_LEAVE\";\n    PRESENCE_ACTION[PRESENCE_ACTION[\"PRESENCE_LEAVE_ALL\"] = 9] = \"PRESENCE_LEAVE_ALL\";\n    PRESENCE_ACTION[PRESENCE_ACTION[\"SUBSCRIBE\"] = 10] = \"SUBSCRIBE\";\n    PRESENCE_ACTION[PRESENCE_ACTION[\"UNSUBSCRIBE\"] = 11] = \"UNSUBSCRIBE\";\n    PRESENCE_ACTION[PRESENCE_ACTION[\"SUBSCRIBE_ALL\"] = 12] = \"SUBSCRIBE_ALL\";\n    PRESENCE_ACTION[PRESENCE_ACTION[\"UNSUBSCRIBE_ALL\"] = 13] = \"UNSUBSCRIBE_ALL\";\n    PRESENCE_ACTION[PRESENCE_ACTION[\"INVALID_PRESENCE_USERS\"] = 100] = \"INVALID_PRESENCE_USERS\";\n    PRESENCE_ACTION[PRESENCE_ACTION[\"MESSAGE_PERMISSION_ERROR\"] = 101] = \"MESSAGE_PERMISSION_ERROR\";\n    PRESENCE_ACTION[PRESENCE_ACTION[\"MESSAGE_DENIED\"] = 102] = \"MESSAGE_DENIED\";\n    PRESENCE_ACTION[PRESENCE_ACTION[\"MULTIPLE_SUBSCRIPTIONS\"] = 103] = \"MULTIPLE_SUBSCRIPTIONS\";\n    PRESENCE_ACTION[PRESENCE_ACTION[\"NOT_SUBSCRIBED\"] = 104] = \"NOT_SUBSCRIBED\";\n})(PRESENCE_ACTION = exports.PRESENCE_ACTION || (exports.PRESENCE_ACTION = {}));\n//# sourceMappingURL=presence.js.map\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@deepstream/protobuf/dist/types/presence.js?");

/***/ }),

/***/ "./node_modules/@deepstream/protobuf/dist/types/record.js":
/*!****************************************************************!*\
  !*** ./node_modules/@deepstream/protobuf/dist/types/record.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar RECORD_ACTION;\n(function (RECORD_ACTION) {\n    RECORD_ACTION[RECORD_ACTION[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    RECORD_ACTION[RECORD_ACTION[\"ERROR\"] = 1] = \"ERROR\";\n    RECORD_ACTION[RECORD_ACTION[\"NOTIFY\"] = 2] = \"NOTIFY\";\n    RECORD_ACTION[RECORD_ACTION[\"READ\"] = 3] = \"READ\";\n    RECORD_ACTION[RECORD_ACTION[\"READ_RESPONSE\"] = 4] = \"READ_RESPONSE\";\n    RECORD_ACTION[RECORD_ACTION[\"HEAD\"] = 5] = \"HEAD\";\n    RECORD_ACTION[RECORD_ACTION[\"HEAD_RESPONSE\"] = 6] = \"HEAD_RESPONSE\";\n    RECORD_ACTION[RECORD_ACTION[\"HEAD_BULK\"] = 7] = \"HEAD_BULK\";\n    RECORD_ACTION[RECORD_ACTION[\"HEAD_RESPONSE_BULK\"] = 8] = \"HEAD_RESPONSE_BULK\";\n    RECORD_ACTION[RECORD_ACTION[\"DELETE\"] = 9] = \"DELETE\";\n    RECORD_ACTION[RECORD_ACTION[\"DELETE_SUCCESS\"] = 10] = \"DELETE_SUCCESS\";\n    RECORD_ACTION[RECORD_ACTION[\"DELETE_BULK\"] = 11] = \"DELETE_BULK\";\n    RECORD_ACTION[RECORD_ACTION[\"DELETE_BULK_SUCCESS\"] = 12] = \"DELETE_BULK_SUCCESS\";\n    RECORD_ACTION[RECORD_ACTION[\"DELETED\"] = 13] = \"DELETED\";\n    RECORD_ACTION[RECORD_ACTION[\"WRITE_ACKNOWLEDGEMENT\"] = 14] = \"WRITE_ACKNOWLEDGEMENT\";\n    RECORD_ACTION[RECORD_ACTION[\"CREATE\"] = 15] = \"CREATE\";\n    RECORD_ACTION[RECORD_ACTION[\"CREATEANDUPDATE\"] = 16] = \"CREATEANDUPDATE\";\n    RECORD_ACTION[RECORD_ACTION[\"CREATEANDPATCH\"] = 17] = \"CREATEANDPATCH\";\n    RECORD_ACTION[RECORD_ACTION[\"UPDATE\"] = 18] = \"UPDATE\";\n    RECORD_ACTION[RECORD_ACTION[\"PATCH\"] = 19] = \"PATCH\";\n    RECORD_ACTION[RECORD_ACTION[\"ERASE\"] = 20] = \"ERASE\";\n    RECORD_ACTION[RECORD_ACTION[\"SUBSCRIBEANDHEAD\"] = 21] = \"SUBSCRIBEANDHEAD\";\n    RECORD_ACTION[RECORD_ACTION[\"SUBSCRIBEANDREAD\"] = 22] = \"SUBSCRIBEANDREAD\";\n    RECORD_ACTION[RECORD_ACTION[\"SUBSCRIBECREATEANDREAD\"] = 23] = \"SUBSCRIBECREATEANDREAD\";\n    RECORD_ACTION[RECORD_ACTION[\"SUBSCRIBECREATEANDUPDATE\"] = 24] = \"SUBSCRIBECREATEANDUPDATE\";\n    RECORD_ACTION[RECORD_ACTION[\"SUBSCRIBE\"] = 25] = \"SUBSCRIBE\";\n    RECORD_ACTION[RECORD_ACTION[\"UNSUBSCRIBE\"] = 26] = \"UNSUBSCRIBE\";\n    RECORD_ACTION[RECORD_ACTION[\"LISTEN\"] = 27] = \"LISTEN\";\n    RECORD_ACTION[RECORD_ACTION[\"UNLISTEN\"] = 28] = \"UNLISTEN\";\n    RECORD_ACTION[RECORD_ACTION[\"LISTEN_ACCEPT\"] = 29] = \"LISTEN_ACCEPT\";\n    RECORD_ACTION[RECORD_ACTION[\"LISTEN_REJECT\"] = 30] = \"LISTEN_REJECT\";\n    RECORD_ACTION[RECORD_ACTION[\"SUBSCRIPTION_HAS_PROVIDER\"] = 31] = \"SUBSCRIPTION_HAS_PROVIDER\";\n    RECORD_ACTION[RECORD_ACTION[\"SUBSCRIPTION_HAS_NO_PROVIDER\"] = 32] = \"SUBSCRIPTION_HAS_NO_PROVIDER\";\n    RECORD_ACTION[RECORD_ACTION[\"SUBSCRIPTION_FOR_PATTERN_FOUND\"] = 33] = \"SUBSCRIPTION_FOR_PATTERN_FOUND\";\n    RECORD_ACTION[RECORD_ACTION[\"SUBSCRIPTION_FOR_PATTERN_REMOVED\"] = 34] = \"SUBSCRIPTION_FOR_PATTERN_REMOVED\";\n    RECORD_ACTION[RECORD_ACTION[\"CACHE_RETRIEVAL_TIMEOUT\"] = 100] = \"CACHE_RETRIEVAL_TIMEOUT\";\n    RECORD_ACTION[RECORD_ACTION[\"STORAGE_RETRIEVAL_TIMEOUT\"] = 101] = \"STORAGE_RETRIEVAL_TIMEOUT\";\n    RECORD_ACTION[RECORD_ACTION[\"VERSION_EXISTS\"] = 102] = \"VERSION_EXISTS\";\n    RECORD_ACTION[RECORD_ACTION[\"RECORD_LOAD_ERROR\"] = 103] = \"RECORD_LOAD_ERROR\";\n    RECORD_ACTION[RECORD_ACTION[\"RECORD_CREATE_ERROR\"] = 104] = \"RECORD_CREATE_ERROR\";\n    RECORD_ACTION[RECORD_ACTION[\"RECORD_UPDATE_ERROR\"] = 105] = \"RECORD_UPDATE_ERROR\";\n    RECORD_ACTION[RECORD_ACTION[\"RECORD_DELETE_ERROR\"] = 106] = \"RECORD_DELETE_ERROR\";\n    RECORD_ACTION[RECORD_ACTION[\"RECORD_NOT_FOUND\"] = 107] = \"RECORD_NOT_FOUND\";\n    RECORD_ACTION[RECORD_ACTION[\"INVALID_VERSION\"] = 108] = \"INVALID_VERSION\";\n    RECORD_ACTION[RECORD_ACTION[\"INVALID_PATCH_ON_HOTPATH\"] = 109] = \"INVALID_PATCH_ON_HOTPATH\";\n    RECORD_ACTION[RECORD_ACTION[\"INVALID_LISTEN_REGEX\"] = 110] = \"INVALID_LISTEN_REGEX\";\n    RECORD_ACTION[RECORD_ACTION[\"LISTEN_RESPONSE_TIMEOUT\"] = 111] = \"LISTEN_RESPONSE_TIMEOUT\";\n    RECORD_ACTION[RECORD_ACTION[\"LISTEN_UNSUCCESSFUL\"] = 112] = \"LISTEN_UNSUCCESSFUL\";\n    RECORD_ACTION[RECORD_ACTION[\"RECORD_NOTIFY_ERROR\"] = 113] = \"RECORD_NOTIFY_ERROR\";\n    RECORD_ACTION[RECORD_ACTION[\"MESSAGE_PERMISSION_ERROR\"] = 114] = \"MESSAGE_PERMISSION_ERROR\";\n    RECORD_ACTION[RECORD_ACTION[\"MESSAGE_DENIED\"] = 115] = \"MESSAGE_DENIED\";\n    RECORD_ACTION[RECORD_ACTION[\"INVALID_MESSAGE_DATA\"] = 116] = \"INVALID_MESSAGE_DATA\";\n    RECORD_ACTION[RECORD_ACTION[\"MULTIPLE_SUBSCRIPTIONS\"] = 117] = \"MULTIPLE_SUBSCRIPTIONS\";\n    RECORD_ACTION[RECORD_ACTION[\"NOT_SUBSCRIBED\"] = 118] = \"NOT_SUBSCRIBED\";\n})(RECORD_ACTION = exports.RECORD_ACTION || (exports.RECORD_ACTION = {}));\n//# sourceMappingURL=record.js.map\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@deepstream/protobuf/dist/types/record.js?");

/***/ }),

/***/ "./node_modules/@deepstream/protobuf/dist/types/rpc.js":
/*!*************************************************************!*\
  !*** ./node_modules/@deepstream/protobuf/dist/types/rpc.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar RPC_ACTION;\n(function (RPC_ACTION) {\n    RPC_ACTION[RPC_ACTION[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    RPC_ACTION[RPC_ACTION[\"ERROR\"] = 1] = \"ERROR\";\n    RPC_ACTION[RPC_ACTION[\"REQUEST\"] = 2] = \"REQUEST\";\n    RPC_ACTION[RPC_ACTION[\"ACCEPT\"] = 4] = \"ACCEPT\";\n    RPC_ACTION[RPC_ACTION[\"RESPONSE\"] = 5] = \"RESPONSE\";\n    RPC_ACTION[RPC_ACTION[\"REJECT\"] = 6] = \"REJECT\";\n    RPC_ACTION[RPC_ACTION[\"REQUEST_ERROR\"] = 7] = \"REQUEST_ERROR\";\n    RPC_ACTION[RPC_ACTION[\"PROVIDE\"] = 8] = \"PROVIDE\";\n    RPC_ACTION[RPC_ACTION[\"UNPROVIDE\"] = 9] = \"UNPROVIDE\";\n    RPC_ACTION[RPC_ACTION[\"NO_RPC_PROVIDER\"] = 100] = \"NO_RPC_PROVIDER\";\n    RPC_ACTION[RPC_ACTION[\"ACCEPT_TIMEOUT\"] = 101] = \"ACCEPT_TIMEOUT\";\n    RPC_ACTION[RPC_ACTION[\"MULTIPLE_ACCEPT\"] = 102] = \"MULTIPLE_ACCEPT\";\n    RPC_ACTION[RPC_ACTION[\"INVALID_RPC_CORRELATION_ID\"] = 103] = \"INVALID_RPC_CORRELATION_ID\";\n    RPC_ACTION[RPC_ACTION[\"RESPONSE_TIMEOUT\"] = 104] = \"RESPONSE_TIMEOUT\";\n    RPC_ACTION[RPC_ACTION[\"MULTIPLE_RESPONSE\"] = 105] = \"MULTIPLE_RESPONSE\";\n    RPC_ACTION[RPC_ACTION[\"MESSAGE_PERMISSION_ERROR\"] = 106] = \"MESSAGE_PERMISSION_ERROR\";\n    RPC_ACTION[RPC_ACTION[\"MESSAGE_DENIED\"] = 107] = \"MESSAGE_DENIED\";\n    RPC_ACTION[RPC_ACTION[\"INVALID_MESSAGE_DATA\"] = 108] = \"INVALID_MESSAGE_DATA\";\n    RPC_ACTION[RPC_ACTION[\"MULTIPLE_PROVIDERS\"] = 109] = \"MULTIPLE_PROVIDERS\";\n    RPC_ACTION[RPC_ACTION[\"NOT_PROVIDED\"] = 110] = \"NOT_PROVIDED\";\n})(RPC_ACTION = exports.RPC_ACTION || (exports.RPC_ACTION = {}));\n//# sourceMappingURL=rpc.js.map\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@deepstream/protobuf/dist/types/rpc.js?");

/***/ }),

/***/ "./node_modules/@deepstream/protobuf/dist/types/state.js":
/*!***************************************************************!*\
  !*** ./node_modules/@deepstream/protobuf/dist/types/state.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar STATE_REGISTRY_TOPIC;\n(function (STATE_REGISTRY_TOPIC) {\n    STATE_REGISTRY_TOPIC[STATE_REGISTRY_TOPIC[\"EVENT_SUBSCRIPTIONS\"] = 11] = \"EVENT_SUBSCRIPTIONS\";\n    STATE_REGISTRY_TOPIC[STATE_REGISTRY_TOPIC[\"RECORD_SUBSCRIPTIONS\"] = 12] = \"RECORD_SUBSCRIPTIONS\";\n    STATE_REGISTRY_TOPIC[STATE_REGISTRY_TOPIC[\"SUBSCRIPTIONS\"] = 9] = \"SUBSCRIPTIONS\";\n    STATE_REGISTRY_TOPIC[STATE_REGISTRY_TOPIC[\"ONLINE_USERS\"] = 10] = \"ONLINE_USERS\";\n    STATE_REGISTRY_TOPIC[STATE_REGISTRY_TOPIC[\"MONITORING_SUBSCRIPTIONS\"] = 24] = \"MONITORING_SUBSCRIPTIONS\";\n    STATE_REGISTRY_TOPIC[STATE_REGISTRY_TOPIC[\"RPC_SUBSCRIPTIONS\"] = 13] = \"RPC_SUBSCRIPTIONS\";\n    STATE_REGISTRY_TOPIC[STATE_REGISTRY_TOPIC[\"PRESENCE_SUBSCRIPTIONS\"] = 14] = \"PRESENCE_SUBSCRIPTIONS\";\n    STATE_REGISTRY_TOPIC[STATE_REGISTRY_TOPIC[\"RECORD_LISTEN_PATTERNS\"] = 15] = \"RECORD_LISTEN_PATTERNS\";\n    STATE_REGISTRY_TOPIC[STATE_REGISTRY_TOPIC[\"EVENT_LISTEN_PATTERNS\"] = 16] = \"EVENT_LISTEN_PATTERNS\";\n    STATE_REGISTRY_TOPIC[STATE_REGISTRY_TOPIC[\"RECORD_PUBLISHED_SUBSCRIPTIONS\"] = 17] = \"RECORD_PUBLISHED_SUBSCRIPTIONS\";\n    STATE_REGISTRY_TOPIC[STATE_REGISTRY_TOPIC[\"EVENT_PUBLISHED_SUBSCRIPTIONS\"] = 18] = \"EVENT_PUBLISHED_SUBSCRIPTIONS\";\n    STATE_REGISTRY_TOPIC[STATE_REGISTRY_TOPIC[\"RECORD_LISTENING\"] = 19] = \"RECORD_LISTENING\";\n    STATE_REGISTRY_TOPIC[STATE_REGISTRY_TOPIC[\"EVENT_LISTENING\"] = 20] = \"EVENT_LISTENING\";\n    STATE_REGISTRY_TOPIC[STATE_REGISTRY_TOPIC[\"STATE_REGISTRY\"] = 21] = \"STATE_REGISTRY\";\n})(STATE_REGISTRY_TOPIC = exports.STATE_REGISTRY_TOPIC || (exports.STATE_REGISTRY_TOPIC = {}));\nvar STATE_ACTION;\n(function (STATE_ACTION) {\n    STATE_ACTION[STATE_ACTION[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    STATE_ACTION[STATE_ACTION[\"ERROR\"] = 1] = \"ERROR\";\n    STATE_ACTION[STATE_ACTION[\"ADD\"] = 2] = \"ADD\";\n    STATE_ACTION[STATE_ACTION[\"REMOVE\"] = 3] = \"REMOVE\";\n    STATE_ACTION[STATE_ACTION[\"REQUEST_FULL_STATE\"] = 4] = \"REQUEST_FULL_STATE\";\n    STATE_ACTION[STATE_ACTION[\"FULL_STATE\"] = 5] = \"FULL_STATE\";\n    STATE_ACTION[STATE_ACTION[\"CHECKSUM\"] = 6] = \"CHECKSUM\";\n})(STATE_ACTION = exports.STATE_ACTION || (exports.STATE_ACTION = {}));\n//# sourceMappingURL=state.js.map\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@deepstream/protobuf/dist/types/state.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/aspromise/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@protobufjs/aspromise/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@protobufjs/aspromise/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/base64/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@protobufjs/base64/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@protobufjs/base64/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/eventemitter/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@protobufjs/eventemitter/index.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@protobufjs/eventemitter/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/float/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@protobufjs/float/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@protobufjs/float/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/inquire/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@protobufjs/inquire/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@protobufjs/inquire/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/pool/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/pool/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@protobufjs/pool/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/utf8/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/utf8/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/@protobufjs/utf8/index.js?");

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/buffer/node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/buffer/node_modules/isarray/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/buffer/node_modules/isarray/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/buffer/node_modules/isarray/index.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/protobufjs/minimal.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/minimal.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// minimal library entry point.\n\n\nmodule.exports = __webpack_require__(/*! ./src/index-minimal */ \"./node_modules/protobufjs/src/index-minimal.js\");\n\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/protobufjs/minimal.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/index-minimal.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/index-minimal.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = __webpack_require__(/*! ./writer */ \"./node_modules/protobufjs/src/writer.js\");\nprotobuf.BufferWriter = __webpack_require__(/*! ./writer_buffer */ \"./node_modules/protobufjs/src/writer_buffer.js\");\nprotobuf.Reader       = __webpack_require__(/*! ./reader */ \"./node_modules/protobufjs/src/reader.js\");\nprotobuf.BufferReader = __webpack_require__(/*! ./reader_buffer */ \"./node_modules/protobufjs/src/reader_buffer.js\");\n\n// Utility\nprotobuf.util         = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\nprotobuf.rpc          = __webpack_require__(/*! ./rpc */ \"./node_modules/protobufjs/src/rpc.js\");\nprotobuf.roots        = __webpack_require__(/*! ./roots */ \"./node_modules/protobufjs/src/roots.js\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/protobufjs/src/index-minimal.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/reader.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/reader.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = Reader;\n\nvar util      = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/protobufjs/src/reader.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/reader_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/reader_buffer.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = __webpack_require__(/*! ./reader */ \"./node_modules/protobufjs/src/reader.js\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/protobufjs/src/reader_buffer.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/roots.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/roots.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/protobufjs/src/roots.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/rpc.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/src/rpc.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = __webpack_require__(/*! ./rpc/service */ \"./node_modules/protobufjs/src/rpc/service.js\");\n\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/protobufjs/src/rpc.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/rpc/service.js":
/*!****************************************************!*\
  !*** ./node_modules/protobufjs/src/rpc/service.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = Service;\n\nvar util = __webpack_require__(/*! ../util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/protobufjs/src/rpc/service.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/util/longbits.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/util/longbits.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = LongBits;\n\nvar util = __webpack_require__(/*! ../util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/protobufjs/src/util/longbits.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/util/minimal.js":
/*!*****************************************************!*\
  !*** ./node_modules/protobufjs/src/util/minimal.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = __webpack_require__(/*! @protobufjs/aspromise */ \"./node_modules/@protobufjs/aspromise/index.js\");\n\n// converts to / from base64 encoded strings\nutil.base64 = __webpack_require__(/*! @protobufjs/base64 */ \"./node_modules/@protobufjs/base64/index.js\");\n\n// base class of rpc.Service\nutil.EventEmitter = __webpack_require__(/*! @protobufjs/eventemitter */ \"./node_modules/@protobufjs/eventemitter/index.js\");\n\n// float handling accross browsers\nutil.float = __webpack_require__(/*! @protobufjs/float */ \"./node_modules/@protobufjs/float/index.js\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = __webpack_require__(/*! @protobufjs/inquire */ \"./node_modules/@protobufjs/inquire/index.js\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = __webpack_require__(/*! @protobufjs/utf8 */ \"./node_modules/@protobufjs/utf8/index.js\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = __webpack_require__(/*! @protobufjs/pool */ \"./node_modules/@protobufjs/pool/index.js\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = __webpack_require__(/*! ./longbits */ \"./node_modules/protobufjs/src/util/longbits.js\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/protobufjs/src/util/minimal.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/writer.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/writer.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = Writer;\n\nvar util      = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/protobufjs/src/writer.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/writer_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/writer_buffer.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = __webpack_require__(/*! ./writer */ \"./node_modules/protobufjs/src/writer.js\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n\n\n//# sourceURL=webpack://DeepstreamClient/./node_modules/protobufjs/src/writer_buffer.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack://DeepstreamClient/(webpack)/buildin/global.js?");

/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/*! exports provided: name, version, description, keywords, mocha, main, types, directories, scripts, repository, dependencies, browser, devDependencies, author, license, bugs, homepage, eslintConfig, husky, nyc, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"name\\\":\\\"@deepstream/client\\\",\\\"version\\\":\\\"5.2.7\\\",\\\"description\\\":\\\"the javascript client for deepstream.io\\\",\\\"keywords\\\":[\\\"deepstream\\\",\\\"javascript\\\",\\\"realtime\\\",\\\"client\\\"],\\\"mocha\\\":{\\\"recursive\\\":true,\\\"reporter\\\":\\\"dot\\\",\\\"require\\\":\\\"ts-node/register/transpile-only\\\",\\\"exit\\\":true},\\\"main\\\":\\\"dist/src/deepstream.js\\\",\\\"types\\\":\\\"dist/src/deepstream-client.d.ts\\\",\\\"directories\\\":{\\\"test\\\":\\\"src/test\\\"},\\\"scripts\\\":{\\\"tsc\\\":\\\"rm -rf dist && tsc\\\",\\\"build\\\":\\\"npm run tsc && npm run build:dev && npm run build:prod\\\",\\\"build:dev\\\":\\\"webpack --config webpack.dev.js\\\",\\\"build:prod\\\":\\\"webpack --config webpack.prod.js\\\",\\\"rebuild\\\":\\\"rimraf dist && webpack\\\",\\\"clean\\\":\\\"rimraf dist\\\",\\\"lint\\\":\\\"tslint src/*.ts src/**/*.ts -t verbose\\\",\\\"lint:fix\\\":\\\"npm run lint -- --fix\\\",\\\"test\\\":\\\"mocha src/**/*.spec.ts\\\",\\\"test:coverage\\\":\\\"nyc npm test\\\",\\\"bundle:analyse\\\":\\\"webpack --config webpack.prod.js --profile --json > ./dist/stats.json && webpack-bundle-analyzer ./dist/stats.json\\\",\\\"postinstall\\\":\\\"node scripts/postinstall.js\\\"},\\\"repository\\\":{\\\"type\\\":\\\"git\\\",\\\"url\\\":\\\"https://github.com/deepstreamIO/deepstream.io-client-js.git\\\"},\\\"dependencies\\\":{\\\"@deepstream/protobuf\\\":\\\"^1.0.4\\\",\\\"protobufjs\\\":\\\"^6.10.2\\\",\\\"ws\\\":\\\"^7.4.0\\\"},\\\"browser\\\":{\\\"net\\\":false,\\\"ws\\\":false},\\\"devDependencies\\\":{\\\"@istanbuljs/nyc-config-typescript\\\":\\\"^1.0.1\\\",\\\"@types/chai\\\":\\\"^4.2.14\\\",\\\"@types/mocha\\\":\\\"^8.0.4\\\",\\\"@types/node\\\":\\\"^14.14.9\\\",\\\"@types/sinon\\\":\\\"^9.0.9\\\",\\\"@types/ws\\\":\\\"^7.4.0\\\",\\\"chai\\\":\\\"^4.2.0\\\",\\\"coveralls\\\":\\\"^3.1.0\\\",\\\"husky\\\":\\\"^4.3.0\\\",\\\"mocha\\\":\\\"^8.2.1\\\",\\\"mocha-lcov-reporter\\\":\\\"^1.3.0\\\",\\\"nyc\\\":\\\"^15.1.0\\\",\\\"rimraf\\\":\\\"^3.0.2\\\",\\\"sinon\\\":\\\"^9.2.1\\\",\\\"terser-webpack-plugin\\\":\\\"^4.2.3\\\",\\\"ts-essentials\\\":\\\"^7.0.1\\\",\\\"ts-loader\\\":\\\"^8.0.11\\\",\\\"ts-node\\\":\\\"^9.1.1\\\",\\\"tslint\\\":\\\"^6.1.3\\\",\\\"typescript\\\":\\\"^4.1.2\\\",\\\"uglifyjs-webpack-plugin\\\":\\\"^2.2.0\\\",\\\"webpack\\\":\\\"^4.44.2\\\",\\\"webpack-bundle-analyzer\\\":\\\"^3.9.0\\\",\\\"webpack-cli\\\":\\\"^3.3.12\\\"},\\\"author\\\":\\\"deepstreamHub GmbH\\\",\\\"license\\\":\\\"MIT\\\",\\\"bugs\\\":{\\\"url\\\":\\\"https://github.com/deepstreamIO/deepstream.io-client-js/issues\\\"},\\\"homepage\\\":\\\"http://deepstream.io\\\",\\\"eslintConfig\\\":{\\\"extends\\\":\\\"deepstream\\\"},\\\"husky\\\":{\\\"hooks\\\":{\\\"pre-commit\\\":\\\"npm t && npm run lint && npm run build\\\",\\\"pre-publish\\\":\\\"npm t && npm run build\\\"}},\\\"nyc\\\":{\\\"extends\\\":\\\"@istanbuljs/nyc-config-typescript\\\",\\\"include\\\":[\\\"src/**/*.ts\\\"],\\\"exclude\\\":[\\\"src/**/*.spec.ts\\\"],\\\"extension\\\":[\\\".ts\\\"],\\\"require\\\":[\\\"ts-node/register\\\"],\\\"reporter\\\":[\\\"lcov\\\"]}}\");\n\n//# sourceURL=webpack://DeepstreamClient/./package.json?");

/***/ }),

/***/ "./src/client-options.ts":
/*!*******************************!*\
  !*** ./src/client-options.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultOptions = void 0;\nvar merge_strategy_1 = __webpack_require__(/*! ./record/merge-strategy */ \"./src/record/merge-strategy.ts\");\nexports.DefaultOptions = {\n    nativeTimerRegistry: true,\n    intervalTimerResolution: 50,\n    subscriptionInterval: 100,\n    heartbeatInterval: 30000,\n    reconnectIntervalIncrement: 4000,\n    maxReconnectInterval: 180000,\n    maxReconnectAttempts: 5,\n    subscriptionTimeout: 2000,\n    recordReadAckTimeout: 15000,\n    recordReadTimeout: 15000,\n    recordDeleteTimeout: 15000,\n    offlineBufferTimeout: 2000,\n    recordDiscardTimeout: 5000,\n    offlineEnabled: false,\n    saveUpdatesOffline: false,\n    recordReadOnlyMode: false,\n    recordPrefixWriteWhitelist: [],\n    path: '/deepstream',\n    mergeStrategy: merge_strategy_1.REMOTE_WINS,\n    recordDeepCopy: true,\n    dirtyStorageName: '__ds__dirty_records',\n    nodeStoragePath: './local-storage',\n    indexdb: {\n        autoVersion: false,\n        dbVersion: 1,\n        primaryKey: 'id',\n        storageDatabaseName: 'deepstream',\n        defaultObjectStoreName: 'records',\n        objectStoreNames: [],\n        ignorePrefixes: [],\n        flushTimeout: 50,\n    },\n    nodeStorageSize: 5,\n    lazyConnect: false,\n    debug: false,\n    initialRecordVersion: 1\n};\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/client-options.ts?");

/***/ }),

/***/ "./src/connection/connection.ts":
/*!**************************************!*\
  !*** ./src/connection/connection.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Connection = void 0;\nvar constants_1 = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\nvar message_parser_1 = __webpack_require__(/*! @deepstream/protobuf/dist/src/message-parser */ \"./node_modules/@deepstream/protobuf/dist/src/message-parser.js\");\nvar state_machine_1 = __webpack_require__(/*! ../util/state-machine */ \"./src/util/state-machine.ts\");\nvar utils = __webpack_require__(/*! ../util/utils */ \"./src/util/utils.ts\");\nvar emitter_1 = __webpack_require__(/*! ../util/emitter */ \"./src/util/emitter.ts\");\nvar pkg = __webpack_require__(/*! ../../package.json */ \"./package.json\");\nvar Connection = /** @class */ (function () {\n    function Connection(services, options, url, emitter) {\n        var _this = this;\n        this.services = services;\n        this.options = options;\n        this.reconnectTimeout = null;\n        this.authParams = null;\n        this.handlers = new Map();\n        this.authCallback = null;\n        this.resumeCallback = null;\n        this.emitter = emitter;\n        this.internalEmitter = new emitter_1.Emitter();\n        this.isInLimbo = true;\n        this.clientData = null;\n        this.heartbeatIntervalTimeout = null;\n        this.endpoint = null;\n        this.reconnectionAttempt = 0;\n        this.limboTimeout = null;\n        var isReconnecting = false;\n        var firstOpen = true;\n        this.stateMachine = new state_machine_1.StateMachine(this.services.logger, {\n            init: constants_1.CONNECTION_STATE.CLOSED,\n            onStateChanged: function (newState, oldState) {\n                if (newState === oldState) {\n                    return;\n                }\n                emitter.emit(constants_1.EVENT.CONNECTION_STATE_CHANGED, newState);\n                if (newState === constants_1.CONNECTION_STATE.RECONNECTING) {\n                    _this.isInLimbo = true;\n                    isReconnecting = true;\n                    if (oldState !== constants_1.CONNECTION_STATE.CLOSED) {\n                        _this.internalEmitter.emit(constants_1.EVENT.CONNECTION_LOST);\n                        _this.limboTimeout = _this.services.timerRegistry.add({\n                            duration: _this.options.offlineBufferTimeout,\n                            context: _this,\n                            callback: function () {\n                                _this.isInLimbo = false;\n                                _this.internalEmitter.emit(constants_1.EVENT.EXIT_LIMBO);\n                            }\n                        });\n                    }\n                }\n                else if (newState === constants_1.CONNECTION_STATE.OPEN && (isReconnecting || firstOpen)) {\n                    firstOpen = false;\n                    _this.isInLimbo = false;\n                    _this.internalEmitter.emit(constants_1.EVENT.CONNECTION_REESTABLISHED);\n                    _this.services.timerRegistry.remove(_this.limboTimeout);\n                }\n            },\n            transitions: [\n                { name: \"initialised\" /* INITIALISED */, from: constants_1.CONNECTION_STATE.CLOSED, to: constants_1.CONNECTION_STATE.INITIALISING },\n                { name: \"connected\" /* CONNECTED */, from: constants_1.CONNECTION_STATE.INITIALISING, to: constants_1.CONNECTION_STATE.AWAITING_CONNECTION },\n                { name: \"connected\" /* CONNECTED */, from: constants_1.CONNECTION_STATE.REDIRECTING, to: constants_1.CONNECTION_STATE.AWAITING_CONNECTION },\n                { name: \"connected\" /* CONNECTED */, from: constants_1.CONNECTION_STATE.RECONNECTING, to: constants_1.CONNECTION_STATE.AWAITING_CONNECTION },\n                { name: \"challenge\" /* CHALLENGE */, from: constants_1.CONNECTION_STATE.AWAITING_CONNECTION, to: constants_1.CONNECTION_STATE.CHALLENGING },\n                { name: \"redirected\" /* CONNECTION_REDIRECTED */, from: constants_1.CONNECTION_STATE.CHALLENGING, to: constants_1.CONNECTION_STATE.REDIRECTING },\n                { name: \"challenge-denied\" /* CHALLENGE_DENIED */, from: constants_1.CONNECTION_STATE.CHALLENGING, to: constants_1.CONNECTION_STATE.CHALLENGE_DENIED },\n                { name: \"accepted\" /* CHALLENGE_ACCEPTED */, from: constants_1.CONNECTION_STATE.CHALLENGING, to: constants_1.CONNECTION_STATE.AWAITING_AUTHENTICATION, handler: this.onAwaitingAuthentication.bind(this) },\n                { name: \"authentication-timeout\" /* AUTHENTICATION_TIMEOUT */, from: constants_1.CONNECTION_STATE.AWAITING_CONNECTION, to: constants_1.CONNECTION_STATE.AUTHENTICATION_TIMEOUT },\n                { name: \"authentication-timeout\" /* AUTHENTICATION_TIMEOUT */, from: constants_1.CONNECTION_STATE.AWAITING_AUTHENTICATION, to: constants_1.CONNECTION_STATE.AUTHENTICATION_TIMEOUT },\n                { name: \"authenticate\" /* AUTHENTICATE */, from: constants_1.CONNECTION_STATE.AWAITING_AUTHENTICATION, to: constants_1.CONNECTION_STATE.AUTHENTICATING },\n                { name: \"unsuccesful-login\" /* UNSUCCESFUL_LOGIN */, from: constants_1.CONNECTION_STATE.AUTHENTICATING, to: constants_1.CONNECTION_STATE.AWAITING_AUTHENTICATION },\n                { name: \"succesful-login\" /* SUCCESFUL_LOGIN */, from: constants_1.CONNECTION_STATE.AUTHENTICATING, to: constants_1.CONNECTION_STATE.OPEN },\n                { name: \"too-many-auth-attempts\" /* TOO_MANY_AUTH_ATTEMPTS */, from: constants_1.CONNECTION_STATE.AUTHENTICATING, to: constants_1.CONNECTION_STATE.TOO_MANY_AUTH_ATTEMPTS },\n                { name: \"too-many-auth-attempts\" /* TOO_MANY_AUTH_ATTEMPTS */, from: constants_1.CONNECTION_STATE.AWAITING_AUTHENTICATION, to: constants_1.CONNECTION_STATE.TOO_MANY_AUTH_ATTEMPTS },\n                { name: \"authentication-timeout\" /* AUTHENTICATION_TIMEOUT */, from: constants_1.CONNECTION_STATE.AWAITING_AUTHENTICATION, to: constants_1.CONNECTION_STATE.AUTHENTICATION_TIMEOUT },\n                { name: \"reconnect\" /* RECONNECT */, from: constants_1.CONNECTION_STATE.RECONNECTING, to: constants_1.CONNECTION_STATE.RECONNECTING },\n                { name: \"closed\" /* CLOSED */, from: constants_1.CONNECTION_STATE.CLOSING, to: constants_1.CONNECTION_STATE.CLOSED },\n                { name: \"offline\" /* OFFLINE */, from: constants_1.CONNECTION_STATE.PAUSING, to: constants_1.CONNECTION_STATE.OFFLINE },\n                { name: \"error\" /* ERROR */, to: constants_1.CONNECTION_STATE.RECONNECTING },\n                { name: \"connection-lost\" /* LOST */, to: constants_1.CONNECTION_STATE.RECONNECTING },\n                { name: \"resume\" /* RESUME */, to: constants_1.CONNECTION_STATE.RECONNECTING },\n                { name: \"pause\" /* PAUSE */, to: constants_1.CONNECTION_STATE.PAUSING },\n                { name: \"close\" /* CLOSE */, to: constants_1.CONNECTION_STATE.CLOSING },\n            ]\n        });\n        this.stateMachine.transition(\"initialised\" /* INITIALISED */);\n        this.originalUrl = utils.parseUrl(url, this.options.path);\n        this.url = this.originalUrl;\n        if (!options.lazyConnect) {\n            this.createEndpoint();\n        }\n    }\n    Object.defineProperty(Connection.prototype, \"isConnected\", {\n        get: function () {\n            return this.stateMachine.state === constants_1.CONNECTION_STATE.OPEN;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Connection.prototype.onLost = function (callback) {\n        this.internalEmitter.on(constants_1.EVENT.CONNECTION_LOST, callback);\n    };\n    Connection.prototype.removeOnLost = function (callback) {\n        this.internalEmitter.off(constants_1.EVENT.CONNECTION_LOST, callback);\n    };\n    Connection.prototype.onReestablished = function (callback) {\n        this.internalEmitter.on(constants_1.EVENT.CONNECTION_REESTABLISHED, callback);\n    };\n    Connection.prototype.removeOnReestablished = function (callback) {\n        this.internalEmitter.off(constants_1.EVENT.CONNECTION_REESTABLISHED, callback);\n    };\n    Connection.prototype.onExitLimbo = function (callback) {\n        this.internalEmitter.on(constants_1.EVENT.EXIT_LIMBO, callback);\n    };\n    Connection.prototype.registerHandler = function (topic, callback) {\n        this.handlers.set(topic, callback);\n    };\n    Connection.prototype.sendMessage = function (message) {\n        if (!this.isOpen()) {\n            this.services.logger.error(message, constants_1.EVENT.IS_CLOSED);\n            return;\n        }\n        if (this.endpoint) {\n            this.endpoint.sendParsedMessage(message);\n        }\n    };\n    Connection.prototype.authenticate = function (authParamsOrCallback, callback) {\n        if (authParamsOrCallback &&\n            typeof authParamsOrCallback !== 'object' &&\n            typeof authParamsOrCallback !== 'function') {\n            throw new Error('invalid argument authParamsOrCallback');\n        }\n        if (callback && typeof callback !== 'function') {\n            throw new Error('invalid argument callback');\n        }\n        if (this.stateMachine.state === constants_1.CONNECTION_STATE.CHALLENGE_DENIED ||\n            this.stateMachine.state === constants_1.CONNECTION_STATE.TOO_MANY_AUTH_ATTEMPTS ||\n            this.stateMachine.state === constants_1.CONNECTION_STATE.AUTHENTICATION_TIMEOUT) {\n            this.services.logger.error({ topic: constants_1.TOPIC.CONNECTION }, constants_1.EVENT.IS_CLOSED);\n            return;\n        }\n        if (authParamsOrCallback) {\n            // @ts-ignore\n            this.authParams = typeof authParamsOrCallback === 'object' ? authParamsOrCallback : {};\n        }\n        if (authParamsOrCallback && typeof authParamsOrCallback === 'function') {\n            this.authCallback = authParamsOrCallback;\n        }\n        else if (callback) {\n            this.authCallback = callback;\n        }\n        else {\n            this.authCallback = function () { };\n        }\n        // if (this.stateMachine.state === CONNECTION_STATE.CLOSED && !this.endpoint) {\n        //   this.createEndpoint()\n        //   return\n        // }\n        if (this.stateMachine.state === constants_1.CONNECTION_STATE.AWAITING_AUTHENTICATION && this.authParams) {\n            this.sendAuthParams();\n        }\n        if (!this.endpoint) {\n            this.createEndpoint();\n        }\n    };\n    /*\n    * Returns the current connection state.\n    */\n    Connection.prototype.getConnectionState = function () {\n        return this.stateMachine.state;\n    };\n    Connection.prototype.isOpen = function () {\n        var connState = this.getConnectionState();\n        return connState !== constants_1.CONNECTION_STATE.CLOSED\n            && connState !== constants_1.CONNECTION_STATE.ERROR\n            && connState !== constants_1.CONNECTION_STATE.CLOSING;\n    };\n    /**\n     * Closes the connection. Using this method\n     * will prevent the client from reconnecting.\n     */\n    Connection.prototype.close = function () {\n        this.services.timerRegistry.remove(this.heartbeatIntervalTimeout);\n        this.sendMessage({\n            topic: constants_1.TOPIC.CONNECTION,\n            action: constants_1.CONNECTION_ACTION.CLOSING\n        });\n        this.stateMachine.transition(\"close\" /* CLOSE */);\n    };\n    Connection.prototype.pause = function () {\n        this.stateMachine.transition(\"pause\" /* PAUSE */);\n        this.services.timerRegistry.remove(this.heartbeatIntervalTimeout);\n        if (this.endpoint) {\n            this.endpoint.close();\n        }\n    };\n    Connection.prototype.resume = function (callback) {\n        this.stateMachine.transition(\"resume\" /* RESUME */);\n        this.resumeCallback = callback;\n        this.tryReconnect();\n    };\n    /**\n     * Creates the endpoint to connect to using the url deepstream\n     * was initialised with.\n     */\n    Connection.prototype.createEndpoint = function () {\n        this.endpoint = this.services.socketFactory(this.url, this.options.socketOptions, this.options.heartbeatInterval);\n        this.endpoint.onopened = this.onOpen.bind(this);\n        this.endpoint.onerror = this.onError.bind(this);\n        this.endpoint.onclosed = this.onClose.bind(this);\n        this.endpoint.onparsedmessages = this.onMessages.bind(this);\n    };\n    /********************************\n    ****** Endpoint Callbacks ******\n    /********************************/\n    /**\n    * Will be invoked once the connection is established. The client\n    * can't send messages yet, and needs to get a connection ACK or REDIRECT\n    * from the server before authenticating\n    */\n    Connection.prototype.onOpen = function () {\n        this.clearReconnect();\n        this.checkHeartBeat();\n        this.stateMachine.transition(\"connected\" /* CONNECTED */);\n        this.sendMessage({\n            topic: constants_1.TOPIC.CONNECTION,\n            action: constants_1.CONNECTION_ACTION.CHALLENGE,\n            url: this.originalUrl,\n            protocolVersion: '0.1a',\n            sdkVersion: pkg.version,\n            sdkType: 'javascript'\n        });\n        this.stateMachine.transition(\"challenge\" /* CHALLENGE */);\n    };\n    /**\n     * Callback for generic connection errors. Forwards\n     * the error to the client.\n     *\n     * The connection is considered broken once this method has been\n     * invoked.\n     */\n    Connection.prototype.onError = function (error) {\n        var _this = this;\n        /*\n         * If the implementation isn't listening on the error event this will throw\n         * an error. So let's defer it to allow the reconnection to kick in.\n         */\n        setTimeout(function () {\n            var msg;\n            if (error.code === 'ECONNRESET' || error.code === 'ECONNREFUSED') {\n                msg = \"Can't connect! Deepstream server unreachable on \" + _this.originalUrl;\n            }\n            else {\n                msg = error;\n            }\n            _this.services.logger.error({ topic: constants_1.TOPIC.CONNECTION }, constants_1.EVENT.CONNECTION_ERROR, msg);\n        }, 1);\n        this.services.timerRegistry.remove(this.heartbeatIntervalTimeout);\n        this.stateMachine.transition(\"error\" /* ERROR */);\n        this.tryReconnect();\n    };\n    /**\n     * Callback when the connection closes. This might have been a deliberate\n     * close triggered by the client or the result of the connection getting\n     * lost.\n     *\n     * In the latter case the client will try to reconnect using the configured\n     * strategy.\n     */\n    Connection.prototype.onClose = function () {\n        this.services.timerRegistry.remove(this.heartbeatIntervalTimeout);\n        if (this.stateMachine.state === constants_1.CONNECTION_STATE.REDIRECTING) {\n            this.createEndpoint();\n            return;\n        }\n        if (this.stateMachine.state === constants_1.CONNECTION_STATE.CHALLENGE_DENIED ||\n            this.stateMachine.state === constants_1.CONNECTION_STATE.TOO_MANY_AUTH_ATTEMPTS ||\n            this.stateMachine.state === constants_1.CONNECTION_STATE.AUTHENTICATION_TIMEOUT) {\n            return;\n        }\n        if (this.stateMachine.state === constants_1.CONNECTION_STATE.CLOSING) {\n            this.stateMachine.transition(\"closed\" /* CLOSED */);\n            return;\n        }\n        if (this.stateMachine.state === constants_1.CONNECTION_STATE.PAUSING) {\n            this.stateMachine.transition(\"offline\" /* OFFLINE */);\n            return;\n        }\n        this.stateMachine.transition(\"connection-lost\" /* LOST */);\n        this.tryReconnect();\n    };\n    /**\n     * Callback for messages received on the connection.\n     */\n    Connection.prototype.onMessages = function (parseResults) {\n        var _this = this;\n        parseResults.forEach(function (parseResult) {\n            if (parseResult.parseError) {\n                _this.services.logger.error({ topic: constants_1.TOPIC.PARSER }, parseResult.action, parseResult.raw && parseResult.raw.toString());\n                return;\n            }\n            var message = parseResult;\n            var res = message_parser_1.parseData(message);\n            if (res !== true) {\n                _this.services.logger.error({ topic: constants_1.TOPIC.PARSER }, constants_1.PARSER_ACTION.INVALID_MESSAGE, res);\n            }\n            if (message === null) {\n                return;\n            }\n            if (message.topic === constants_1.TOPIC.CONNECTION) {\n                _this.handleConnectionResponse(message);\n                return;\n            }\n            if (message.topic === constants_1.TOPIC.AUTH) {\n                _this.handleAuthResponse(message);\n                return;\n            }\n            var handler = _this.handlers.get(message.topic);\n            if (!handler) {\n                // this should never happen\n                return;\n            }\n            handler(message);\n        });\n    };\n    /**\n    * Sends authentication params to the server. Please note, this\n    * doesn't use the queued message mechanism, but rather sends the message directly\n    */\n    Connection.prototype.sendAuthParams = function () {\n        this.stateMachine.transition(\"authenticate\" /* AUTHENTICATE */);\n        this.sendMessage({\n            topic: constants_1.TOPIC.AUTH,\n            action: constants_1.AUTH_ACTION.REQUEST,\n            parsedData: this.authParams\n        });\n    };\n    /**\n    * Ensures that a heartbeat was not missed more than once, otherwise it considers the connection\n    * to have been lost and closes it for reconnection.\n    */\n    Connection.prototype.checkHeartBeat = function () {\n        var heartBeatTolerance = this.options.heartbeatInterval * 2;\n        if (!this.endpoint) {\n            return;\n        }\n        if (this.endpoint.getTimeSinceLastMessage() > heartBeatTolerance) {\n            this.services.timerRegistry.remove(this.heartbeatIntervalTimeout);\n            this.services.logger.error({ topic: constants_1.TOPIC.CONNECTION }, constants_1.EVENT.HEARTBEAT_TIMEOUT);\n            this.endpoint.close();\n            return;\n        }\n        this.heartbeatIntervalTimeout = this.services.timerRegistry.add({\n            duration: this.options.heartbeatInterval,\n            callback: this.checkHeartBeat,\n            context: this\n        });\n    };\n    /**\n    * If the connection drops or is closed in error this\n    * method schedules increasing reconnection intervals\n    *\n    * If the number of failed reconnection attempts exceeds\n    * options.maxReconnectAttempts the connection is closed\n    */\n    Connection.prototype.tryReconnect = function () {\n        if (this.reconnectTimeout !== null) {\n            return;\n        }\n        if (this.reconnectionAttempt < this.options.maxReconnectAttempts) {\n            this.stateMachine.transition(\"reconnect\" /* RECONNECT */);\n            this.reconnectTimeout = this.services.timerRegistry.add({\n                callback: this.tryOpen,\n                context: this,\n                duration: Math.min(this.options.maxReconnectInterval, this.options.reconnectIntervalIncrement * this.reconnectionAttempt)\n            });\n            this.reconnectionAttempt++;\n            return;\n        }\n        this.emitter.emit(constants_1.EVENT[constants_1.EVENT.MAX_RECONNECTION_ATTEMPTS_REACHED], this.reconnectionAttempt);\n        this.clearReconnect();\n        this.close();\n    };\n    /**\n     * Attempts to open a errourosly closed connection\n     */\n    Connection.prototype.tryOpen = function () {\n        if (this.stateMachine.state !== constants_1.CONNECTION_STATE.REDIRECTING) {\n            this.url = this.originalUrl;\n        }\n        this.createEndpoint();\n        this.reconnectTimeout = null;\n    };\n    /**\n     * Stops all further reconnection attempts,\n     * either because the connection is open again\n     * or because the maximal number of reconnection\n     * attempts has been exceeded\n     */\n    Connection.prototype.clearReconnect = function () {\n        this.services.timerRegistry.remove(this.reconnectTimeout);\n        this.reconnectTimeout = null;\n        this.reconnectionAttempt = 0;\n    };\n    /**\n     * The connection response will indicate whether the deepstream connection\n     * can be used or if it should be forwarded to another instance. This\n     * allows us to introduce load-balancing if needed.\n     *\n     * If authentication parameters are already provided this will kick of\n     * authentication immediately. The actual 'open' event won't be emitted\n     * by the client until the authentication is successful.\n     *\n     * If a challenge is recieved, the user will send the url to the server\n     * in response to get the appropriate redirect. If the URL is invalid the\n     * server will respond with a REJECTION resulting in the client connection\n     * being permanently closed.\n     *\n     * If a redirect is recieved, this connection is closed and updated with\n     * a connection to the url supplied in the message.\n     */\n    Connection.prototype.handleConnectionResponse = function (message) {\n        if (message.action === constants_1.CONNECTION_ACTION.ACCEPT) {\n            this.stateMachine.transition(\"accepted\" /* CHALLENGE_ACCEPTED */);\n            return;\n        }\n        if (message.action === constants_1.CONNECTION_ACTION.REJECT) {\n            this.stateMachine.transition(\"challenge-denied\" /* CHALLENGE_DENIED */);\n            if (this.endpoint) {\n                this.endpoint.close();\n            }\n            return;\n        }\n        if (message.action === constants_1.CONNECTION_ACTION.REDIRECT) {\n            this.url = message.url;\n            this.stateMachine.transition(\"redirected\" /* CONNECTION_REDIRECTED */);\n            if (this.endpoint) {\n                this.endpoint.close();\n            }\n            return;\n        }\n        if (message.action === constants_1.CONNECTION_ACTION.AUTHENTICATION_TIMEOUT) {\n            this.stateMachine.transition(\"authentication-timeout\" /* AUTHENTICATION_TIMEOUT */);\n            this.services.logger.error(message);\n        }\n    };\n    /**\n     * Callback for messages received for the AUTH topic. If\n     * the authentication was successful this method will\n     * open the connection and send all messages that the client\n     * tried to send so far.\n     */\n    Connection.prototype.handleAuthResponse = function (message) {\n        if (message.action === constants_1.AUTH_ACTION.TOO_MANY_AUTH_ATTEMPTS) {\n            this.stateMachine.transition(\"too-many-auth-attempts\" /* TOO_MANY_AUTH_ATTEMPTS */);\n            this.services.logger.error(message);\n            return;\n        }\n        if (message.action === constants_1.AUTH_ACTION.AUTH_UNSUCCESSFUL) {\n            this.stateMachine.transition(\"unsuccesful-login\" /* UNSUCCESFUL_LOGIN */);\n            this.onAuthUnSuccessful();\n            return;\n        }\n        if (message.action === constants_1.AUTH_ACTION.AUTH_SUCCESSFUL) {\n            this.stateMachine.transition(\"succesful-login\" /* SUCCESFUL_LOGIN */);\n            this.onAuthSuccessful(message.parsedData);\n            return;\n        }\n    };\n    Connection.prototype.onAwaitingAuthentication = function () {\n        if (this.authParams) {\n            this.sendAuthParams();\n        }\n    };\n    Connection.prototype.onAuthSuccessful = function (clientData) {\n        this.updateClientData(clientData);\n        if (this.resumeCallback) {\n            this.resumeCallback();\n            this.resumeCallback = null;\n        }\n        if (this.authCallback === null) {\n            return;\n        }\n        this.authCallback(true, this.clientData);\n        this.authCallback = null;\n    };\n    Connection.prototype.onAuthUnSuccessful = function () {\n        var reason = { reason: constants_1.EVENT[constants_1.EVENT.INVALID_AUTHENTICATION_DETAILS] };\n        if (this.resumeCallback) {\n            this.resumeCallback(reason);\n            this.resumeCallback = null;\n        }\n        if (this.authCallback === null) {\n            this.emitter.emit(constants_1.EVENT.REAUTHENTICATION_FAILURE, reason);\n            return;\n        }\n        this.authCallback(false, reason);\n        this.authCallback = null;\n    };\n    Connection.prototype.updateClientData = function (data) {\n        var newClientData = data || null;\n        if (this.clientData === null &&\n            (newClientData === null || Object.keys(newClientData).length === 0)) {\n            return;\n        }\n        if (!utils.deepEquals(this.clientData, data)) {\n            this.emitter.emit(constants_1.EVENT.CLIENT_DATA_CHANGED, Object.assign({}, newClientData));\n            this.clientData = newClientData;\n        }\n    };\n    return Connection;\n}());\nexports.Connection = Connection;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/connection/connection.ts?");

/***/ }),

/***/ "./src/connection/socket-factory.ts":
/*!******************************************!*\
  !*** ./src/connection/socket-factory.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global, Buffer) {\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.socketFactory = void 0;\nvar message_parser_1 = __webpack_require__(/*! @deepstream/protobuf/dist/src/message-parser */ \"./node_modules/@deepstream/protobuf/dist/src/message-parser.js\");\nvar message_builder_1 = __webpack_require__(/*! @deepstream/protobuf/dist/src/message-builder */ \"./node_modules/@deepstream/protobuf/dist/src/message-builder.js\");\nvar constants_1 = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\nvar BrowserWebsocket = (global.WebSocket || global.MozWebSocket);\nvar socketFactory = function (url, options, heartBeatInterval) {\n    if (options === void 0) { options = { jsonTransportMode: false }; }\n    var socket = BrowserWebsocket\n        ? new BrowserWebsocket(url, [], options)\n        : new (__webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module 'ws'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())))(url, options);\n    if (BrowserWebsocket && options.jsonTransportMode !== true) {\n        socket.binaryType = 'arraybuffer';\n    }\n    var buildMessage = options.jsonTransportMode !== true ? message_builder_1.getMessage : function (message, isAck) { return JSON.stringify(__assign(__assign({}, message), { isAck: isAck })); };\n    var pingMessage = buildMessage({ topic: constants_1.TOPIC.CONNECTION, action: constants_1.CONNECTION_ACTION.PING }, false);\n    var pingInterval = null;\n    var lastRecievedMessageTimestamp = -1;\n    // tslint:disable-next-line:no-empty\n    socket.onparsedmessage = function () { };\n    socket.onmessage = function (raw) {\n        lastRecievedMessageTimestamp = Date.now();\n        var parseResults;\n        if (options.jsonTransportMode !== true) {\n            parseResults = message_parser_1.parse(BrowserWebsocket ? new Buffer(new Uint8Array(raw.data)) : raw.data);\n        }\n        else {\n            parseResults = [JSON.parse(raw.data)];\n        }\n        socket.onparsedmessages(parseResults);\n    };\n    socket.getTimeSinceLastMessage = function () {\n        if (lastRecievedMessageTimestamp < 0)\n            return 0;\n        return Date.now() - lastRecievedMessageTimestamp;\n    };\n    socket.sendParsedMessage = function (message) {\n        if (message.topic === constants_1.TOPIC.CONNECTION && message.action === constants_1.CONNECTION_ACTION.CLOSING) {\n            socket.onparsedmessages([{ topic: constants_1.TOPIC.CONNECTION, action: constants_1.CONNECTION_ACTION.CLOSED }]);\n            socket.close();\n            return;\n        }\n        if (message.parsedData) {\n            message.data = JSON.stringify(message.parsedData);\n        }\n        // if (message.action !== CONNECTION_ACTIONS.PONG && message.action !== CONNECTION_ACTIONS.PING) {\n        //     console.log('>>>', TOPIC[message.topic], (ACTIONS as any)[message.topic][message.action], message.parsedData, message.data, message.name)\n        // }\n        if (message.data === undefined) {\n            delete message.data;\n        }\n        socket.send(buildMessage(message, false));\n    };\n    socket.onclosed = null;\n    socket.onclose = function () {\n        clearInterval(pingInterval);\n        socket.onclosed();\n    };\n    socket.onopened = null;\n    socket.onopen = function () {\n        pingInterval = setInterval(function () {\n            try {\n                socket.send(pingMessage);\n            }\n            catch (e) {\n                clearTimeout(pingInterval);\n            }\n        }, heartBeatInterval);\n        socket.onopened();\n    };\n    return socket;\n};\nexports.socketFactory = socketFactory;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../node_modules/buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack://DeepstreamClient/./src/connection/socket-factory.ts?");

/***/ }),

/***/ "./src/constants.ts":
/*!**************************!*\
  !*** ./src/constants.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar _a, _b, _c, _d;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CONNECTION_STATE = exports.EVENT = exports.RESPONSE_TO_REQUEST = void 0;\nvar all_1 = __webpack_require__(/*! @deepstream/protobuf/dist/types/all */ \"./node_modules/@deepstream/protobuf/dist/types/all.js\");\n__exportStar(__webpack_require__(/*! @deepstream/protobuf/dist/types/all */ \"./node_modules/@deepstream/protobuf/dist/types/all.js\"), exports);\n__exportStar(__webpack_require__(/*! @deepstream/protobuf/dist/types/messages */ \"./node_modules/@deepstream/protobuf/dist/types/messages.js\"), exports);\nexports.RESPONSE_TO_REQUEST = (_a = {},\n    _a[all_1.TOPIC.RECORD] = (_b = {},\n        _b[all_1.RECORD_ACTION.HEAD_RESPONSE] = all_1.RECORD_ACTION.HEAD,\n        _b[all_1.RECORD_ACTION.READ_RESPONSE] = all_1.RECORD_ACTION.READ,\n        _b[all_1.RECORD_ACTION.DELETE_SUCCESS] = all_1.RECORD_ACTION.DELETE,\n        _b),\n    _a[all_1.TOPIC.PRESENCE] = (_c = {},\n        _c[all_1.PRESENCE_ACTION.QUERY_RESPONSE] = all_1.PRESENCE_ACTION.QUERY,\n        _c[all_1.PRESENCE_ACTION.QUERY_ALL_RESPONSE] = all_1.PRESENCE_ACTION.QUERY_ALL,\n        _c),\n    _a[all_1.TOPIC.RPC] = (_d = {},\n        _d[all_1.RPC_ACTION.ACCEPT] = all_1.RPC_ACTION.REQUEST,\n        _d[all_1.RPC_ACTION.ERROR] = all_1.RPC_ACTION.REQUEST,\n        _d),\n    _a[all_1.TOPIC.EVENT] = {},\n    _a);\nvar EVENT;\n(function (EVENT) {\n    EVENT[\"RECORD_READ_ONLY_MODE\"] = \"RECORD_READ_ONLY_MODE\";\n    EVENT[\"UNSOLICITED_MESSAGE\"] = \"UNSOLICITED_MESSAGE\";\n    EVENT[\"IS_CLOSED\"] = \"IS_CLOSED\";\n    EVENT[\"MAX_RECONNECTION_ATTEMPTS_REACHED\"] = \"MAX_RECONNECTION_ATTEMPTS_REACHED\";\n    EVENT[\"CONNECTION_ERROR\"] = \"CONNECTION_ERROR\";\n    EVENT[\"ACK_TIMEOUT\"] = \"ACK_TIMEOUT\";\n    EVENT[\"UNKNOWN_CORRELATION_ID\"] = \"UNKNOWN_CORRELATION_ID\";\n    EVENT[\"HEARTBEAT_TIMEOUT\"] = \"HEARTBEAT_TIMEOUT\";\n    EVENT[\"LISTENER_EXISTS\"] = \"LISTENER_EXISTS\";\n    EVENT[\"NOT_LISTENING\"] = \"NOT_LISTENING\";\n    EVENT[\"RECORD_ALREADY_DESTROYED\"] = \"RECORD_ALREADY_DESTROYED\";\n    EVENT[\"RECORD_DELETE_TIMEOUT\"] = \"RECORD_DELETE_TIMEOUT\";\n    EVENT[\"CLIENT_OFFLINE\"] = \"client offline\";\n    EVENT[\"INVALID_AUTHENTICATION_DETAILS\"] = \"INVALID_AUTHENTICATION_DETAILS\";\n    EVENT[\"CONNECTION_LOST\"] = \"connectionLost\";\n    EVENT[\"CONNECTION_REESTABLISHED\"] = \"connectionReestablished\";\n    EVENT[\"EXIT_LIMBO\"] = \"exitLimbo\";\n    EVENT[\"CONNECTION_STATE_CHANGED\"] = \"connectionStateChanged\";\n    EVENT[\"CLIENT_DATA_CHANGED\"] = \"clientDataChanged\";\n    EVENT[\"REAUTHENTICATION_FAILURE\"] = \"reauthenticationFailure\";\n    EVENT[\"AUTHENTICATION_TIMEOUT\"] = \"AUTHENTICATION_TIMEOUT\";\n    EVENT[\"RECORD_ERROR\"] = \"error\";\n    EVENT[\"RECORD_READY\"] = \"ready\";\n    EVENT[\"RECORD_DELETED\"] = \"delete\";\n    EVENT[\"RECORD_DISCARDED\"] = \"discard\";\n    EVENT[\"RECORD_VERSION_EXISTS\"] = \"versionExists\";\n    EVENT[\"RECORD_HAS_PROVIDER_CHANGED\"] = \"hasProviderChanged\";\n    EVENT[\"RECORD_STATE_CHANGED\"] = \"onRecordStateChanged\";\n    EVENT[\"ENTRY_ADDED_EVENT\"] = \"entry-added\";\n    EVENT[\"ENTRY_REMOVED_EVENT\"] = \"entry-removed\";\n    EVENT[\"ENTRY_MOVED_EVENT\"] = \"entry-moved\";\n})(EVENT = exports.EVENT || (exports.EVENT = {}));\nvar CONNECTION_STATE;\n(function (CONNECTION_STATE) {\n    CONNECTION_STATE[\"CLOSING\"] = \"CLOSING\";\n    CONNECTION_STATE[\"CLOSED\"] = \"CLOSED\";\n    CONNECTION_STATE[\"INITIALISING\"] = \"INITIALISING\";\n    CONNECTION_STATE[\"AWAITING_CONNECTION\"] = \"AWAITING_CONNECTION\";\n    CONNECTION_STATE[\"CHALLENGING\"] = \"CHALLENGING\";\n    CONNECTION_STATE[\"AWAITING_AUTHENTICATION\"] = \"AWAITING_AUTHENTICATION\";\n    CONNECTION_STATE[\"AUTHENTICATING\"] = \"AUTHENTICATING\";\n    CONNECTION_STATE[\"OPEN\"] = \"OPEN\";\n    CONNECTION_STATE[\"ERROR\"] = \"ERROR\";\n    CONNECTION_STATE[\"RECONNECTING\"] = \"RECONNECTING\";\n    CONNECTION_STATE[\"REDIRECTING\"] = \"REDIRECTING\";\n    CONNECTION_STATE[\"CHALLENGE_DENIED\"] = \"CHALLENGE_DENIED\";\n    CONNECTION_STATE[\"TOO_MANY_AUTH_ATTEMPTS\"] = \"TOO_MANY_AUTH_ATTEMPTS\";\n    CONNECTION_STATE[\"AUTHENTICATION_TIMEOUT\"] = \"AUTHENTICATION_TIMEOUT\";\n    CONNECTION_STATE[\"PAUSING\"] = \"PAUSING\";\n    CONNECTION_STATE[\"OFFLINE\"] = \"OFFLINE\";\n})(CONNECTION_STATE = exports.CONNECTION_STATE || (exports.CONNECTION_STATE = {}));\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/constants.ts?");

/***/ }),

/***/ "./src/deepstream-client.ts":
/*!**********************************!*\
  !*** ./src/deepstream-client.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultOptions = exports.C = exports.DeepstreamClient = void 0;\nvar client_options_1 = __webpack_require__(/*! ./client-options */ \"./src/client-options.ts\");\nObject.defineProperty(exports, \"DefaultOptions\", { enumerable: true, get: function () { return client_options_1.DefaultOptions; } });\nvar C = __webpack_require__(/*! ./constants */ \"./src/constants.ts\");\nexports.C = C;\nvar logger_1 = __webpack_require__(/*! ./util/logger */ \"./src/util/logger.ts\");\nvar timeout_registry_1 = __webpack_require__(/*! ./util/timeout-registry */ \"./src/util/timeout-registry.ts\");\nvar interval_timer_registry_1 = __webpack_require__(/*! ./util/interval-timer-registry */ \"./src/util/interval-timer-registry.ts\");\nvar native_timer_registry_1 = __webpack_require__(/*! ./util/native-timer-registry */ \"./src/util/native-timer-registry.ts\");\nvar connection_1 = __webpack_require__(/*! ./connection/connection */ \"./src/connection/connection.ts\");\nvar socket_factory_1 = __webpack_require__(/*! ./connection/socket-factory */ \"./src/connection/socket-factory.ts\");\nvar event_handler_1 = __webpack_require__(/*! ./event/event-handler */ \"./src/event/event-handler.ts\");\nvar rpc_handler_1 = __webpack_require__(/*! ./rpc/rpc-handler */ \"./src/rpc/rpc-handler.ts\");\nvar record_handler_1 = __webpack_require__(/*! ./record/record-handler */ \"./src/record/record-handler.ts\");\nvar presence_handler_1 = __webpack_require__(/*! ./presence/presence-handler */ \"./src/presence/presence-handler.ts\");\nvar emitter_1 = __webpack_require__(/*! ./util/emitter */ \"./src/util/emitter.ts\");\nvar indexdb_storage_service_1 = __webpack_require__(/*! ./storage/indexdb-storage-service */ \"./src/storage/indexdb-storage-service.ts\");\nvar noop_storage_service_1 = __webpack_require__(/*! ./storage/noop-storage-service */ \"./src/storage/noop-storage-service.ts\");\nvar DeepstreamClient = /** @class */ (function (_super) {\n    __extends(DeepstreamClient, _super);\n    function DeepstreamClient(url, options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this) || this;\n        _this.options = __assign(__assign({}, client_options_1.DefaultOptions), options);\n        var services = {};\n        services.logger = new logger_1.Logger(_this);\n        if (options.nativeTimerRegistry) {\n            services.timerRegistry = new native_timer_registry_1.NativeTimerRegistry();\n        }\n        else {\n            services.timerRegistry = new interval_timer_registry_1.IntervalTimerRegistry(_this.options.intervalTimerResolution);\n        }\n        services.timeoutRegistry = new timeout_registry_1.TimeoutRegistry(services, _this.options);\n        services.socketFactory = _this.options.socketFactory || socket_factory_1.socketFactory;\n        services.connection = new connection_1.Connection(services, _this.options, url, _this);\n        if (_this.options.offlineEnabled) {\n            services.storage = _this.options.storage || new indexdb_storage_service_1.Storage(_this.options);\n        }\n        else {\n            services.storage = new noop_storage_service_1.NoopStorage();\n        }\n        _this.services = services;\n        _this.services.connection.onLost(services.timeoutRegistry.onConnectionLost.bind(services.timeoutRegistry));\n        _this.event = new event_handler_1.EventHandler(_this.services, _this.options);\n        _this.rpc = new rpc_handler_1.RPCHandler(_this.services, _this.options);\n        _this.record = new record_handler_1.RecordHandler(_this.services, _this.options);\n        _this.presence = new presence_handler_1.PresenceHandler(_this.services, _this.options);\n        return _this;\n    }\n    DeepstreamClient.prototype.login = function (detailsOrCallback, callback) {\n        var _this = this;\n        if (detailsOrCallback && typeof detailsOrCallback === 'object') {\n            if (callback) {\n                this.services.connection.authenticate(detailsOrCallback, callback);\n            }\n            else {\n                return new Promise(function (resolve, reject) {\n                    _this.services.connection.authenticate(detailsOrCallback, function (success, data) {\n                        success ? resolve(data) : reject(data);\n                    });\n                });\n            }\n        }\n        else {\n            if (typeof detailsOrCallback === 'function') {\n                this.services.connection.authenticate({}, detailsOrCallback);\n            }\n            else {\n                return new Promise(function (resolve, reject) {\n                    _this.services.connection.authenticate({}, function (success, data) {\n                        success ? resolve(data) : reject(data);\n                    });\n                });\n            }\n        }\n    };\n    DeepstreamClient.prototype.getConnectionState = function () {\n        return this.services.connection.getConnectionState();\n    };\n    DeepstreamClient.prototype.close = function () {\n        var _this = this;\n        Object.keys(this.services).forEach(function (serviceName) {\n            if (_this.services[serviceName].close) {\n                _this.services[serviceName].close();\n            }\n        });\n    };\n    DeepstreamClient.prototype.pause = function () {\n        this.services.connection.pause();\n    };\n    DeepstreamClient.prototype.resume = function (callback) {\n        var _this = this;\n        if (callback) {\n            this.services.connection.resume(callback);\n            return;\n        }\n        return new Promise(function (resolve, reject) {\n            _this.services.connection.resume(function (error) {\n                error ? reject(error) : resolve();\n            });\n        });\n    };\n    /**\n    * Returns a random string. The first block of characters\n    * is a timestamp, in order to allow databases to optimize for semi-\n    * sequential numberings\n    */\n    DeepstreamClient.prototype.getUid = function () {\n        var timestamp = (new Date()).getTime().toString(36);\n        var randomString = (Math.random() * 10000000000000000).toString(36).replace('.', '');\n        return timestamp + \"-\" + randomString;\n    };\n    return DeepstreamClient;\n}(emitter_1.Emitter));\nexports.DeepstreamClient = DeepstreamClient;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/deepstream-client.ts?");

/***/ }),

/***/ "./src/deepstream.ts":
/*!***************************!*\
  !*** ./src/deepstream.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Options = exports.C = exports.DeepstreamClient = void 0;\nvar deepstream_client_1 = __webpack_require__(/*! ./deepstream-client */ \"./src/deepstream-client.ts\");\nObject.defineProperty(exports, \"DeepstreamClient\", { enumerable: true, get: function () { return deepstream_client_1.DeepstreamClient; } });\nObject.defineProperty(exports, \"C\", { enumerable: true, get: function () { return deepstream_client_1.C; } });\nObject.defineProperty(exports, \"Options\", { enumerable: true, get: function () { return deepstream_client_1.DefaultOptions; } });\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/deepstream.ts?");

/***/ }),

/***/ "./src/event/event-handler.ts":
/*!************************************!*\
  !*** ./src/event/event-handler.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EventHandler = void 0;\nvar constants_1 = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\nvar listener_1 = __webpack_require__(/*! ../util/listener */ \"./src/util/listener.ts\");\nvar emitter_1 = __webpack_require__(/*! ../util/emitter */ \"./src/util/emitter.ts\");\nvar bulk_subscription_service_1 = __webpack_require__(/*! ../util/bulk-subscription-service */ \"./src/util/bulk-subscription-service.ts\");\nvar EventHandler = /** @class */ (function () {\n    function EventHandler(services, options, listeners) {\n        this.services = services;\n        this.emitter = new emitter_1.Emitter();\n        this.limboQueue = [];\n        this.bulkSubscription = new bulk_subscription_service_1.BulkSubscriptionService(this.services, options.subscriptionInterval, constants_1.TOPIC.EVENT, constants_1.EVENT_ACTION.SUBSCRIBE, constants_1.EVENT_ACTION.UNSUBSCRIBE, this.onBulkSubscriptionSent.bind(this));\n        this.listeners = listeners || new listener_1.Listener(constants_1.TOPIC.EVENT, services);\n        this.services.connection.registerHandler(constants_1.TOPIC.EVENT, this.handle.bind(this));\n        this.services.connection.onExitLimbo(this.onExitLimbo.bind(this));\n        this.services.connection.onReestablished(this.onConnectionReestablished.bind(this));\n    }\n    /**\n     * Returns all the events that are subscribed to locally\n     */\n    EventHandler.prototype.eventNames = function () {\n        return this.emitter.eventNames();\n    };\n    /**\n    * Subscribe to an event. This will receive both locally emitted events\n    * as well as events emitted by other connected clients.\n    */\n    EventHandler.prototype.subscribe = function (name, callback) {\n        if (typeof name !== 'string' || name.length === 0) {\n            throw new Error('invalid argument name');\n        }\n        if (typeof callback !== 'function') {\n            throw new Error('invalid argument callback');\n        }\n        if (!this.emitter.hasListeners(name)) {\n            if (this.services.connection.isConnected) {\n                this.bulkSubscription.subscribe(name);\n            }\n        }\n        this.emitter.on(name, callback);\n    };\n    /**\n     * Removes a callback for a specified event. If all callbacks\n     * for an event have been removed, the server will be notified\n     * that the client is unsubscribed as a listener\n     */\n    EventHandler.prototype.unsubscribe = function (name, callback) {\n        if (!name || typeof name !== 'string' || name.length === 0) {\n            throw new Error('invalid argument name');\n        }\n        if (callback !== undefined && typeof callback !== 'function') {\n            throw new Error('invalid argument callback');\n        }\n        if (!this.emitter.hasListeners(name)) {\n            this.services.logger.warn({\n                topic: constants_1.TOPIC.EVENT,\n                action: constants_1.EVENT_ACTION.NOT_SUBSCRIBED,\n                name: name\n            });\n            return;\n        }\n        this.emitter.off(name, callback);\n        if (!this.emitter.hasListeners(name)) {\n            this.bulkSubscription.unsubscribe(name);\n        }\n    };\n    /**\n     * Emits an event locally and sends a message to the server to\n     * broadcast the event to the other connected clients\n     */\n    EventHandler.prototype.emit = function (name, data) {\n        if (typeof name !== 'string' || name.length === 0) {\n            throw new Error('invalid argument name');\n        }\n        var message = {\n            topic: constants_1.TOPIC.EVENT,\n            action: constants_1.EVENT_ACTION.EMIT,\n            name: name,\n            parsedData: data\n        };\n        if (this.services.connection.isConnected) {\n            this.services.connection.sendMessage(message);\n        }\n        else if (this.services.connection.isInLimbo) {\n            this.limboQueue.push(message);\n        }\n        this.emitter.emit(name, data);\n    };\n    /**\n   * Allows to listen for event subscriptions made by this or other clients. This\n   * is useful to create \"active\" data providers, e.g. providers that only provide\n   * data for a particular event if a user is actually interested in it\n   */\n    EventHandler.prototype.listen = function (pattern, callback) {\n        this.listeners.listen(pattern, callback);\n    };\n    /**\n     * Removes a listener that was previously registered\n     */\n    EventHandler.prototype.unlisten = function (pattern) {\n        this.listeners.unlisten(pattern);\n    };\n    /**\n   * Handles incoming messages from the server\n   */\n    EventHandler.prototype.handle = function (message) {\n        if (message.isAck) {\n            this.services.timeoutRegistry.remove(message);\n            return;\n        }\n        if (message.action === constants_1.EVENT_ACTION.EMIT) {\n            if (message.parsedData !== undefined) {\n                this.emitter.emit(message.name, message.parsedData);\n            }\n            else {\n                this.emitter.emit(message.name, undefined);\n            }\n            return;\n        }\n        if (message.action === constants_1.EVENT_ACTION.MESSAGE_DENIED) {\n            this.services.logger.error({ topic: constants_1.TOPIC.EVENT }, constants_1.EVENT_ACTION.MESSAGE_DENIED);\n            this.services.timeoutRegistry.remove(message);\n            if (message.originalAction === constants_1.EVENT_ACTION.SUBSCRIBE) {\n                this.emitter.off(message.name);\n            }\n            return;\n        }\n        if (message.action === constants_1.EVENT_ACTION.MULTIPLE_SUBSCRIPTIONS || message.action === constants_1.EVENT_ACTION.NOT_SUBSCRIBED) {\n            this.services.timeoutRegistry.remove(__assign(__assign({}, message), { action: constants_1.EVENT_ACTION.SUBSCRIBE }));\n            this.services.logger.warn(message);\n            return;\n        }\n        if (message.action === constants_1.EVENT_ACTION.SUBSCRIPTION_FOR_PATTERN_FOUND ||\n            message.action === constants_1.EVENT_ACTION.SUBSCRIPTION_FOR_PATTERN_REMOVED) {\n            this.listeners.handle(message);\n            return;\n        }\n        if (message.action === constants_1.EVENT_ACTION.INVALID_LISTEN_REGEX) {\n            this.services.logger.error(message);\n            return;\n        }\n        this.services.logger.error(message, constants_1.EVENT.UNSOLICITED_MESSAGE);\n    };\n    /**\n     * Resubscribes to events when connection is lost\n     */\n    EventHandler.prototype.onConnectionReestablished = function () {\n        this.bulkSubscription.subscribeList(this.emitter.eventNames());\n        for (var i = 0; i < this.limboQueue.length; i++) {\n            this.services.connection.sendMessage(this.limboQueue[i]);\n        }\n        this.limboQueue = [];\n    };\n    EventHandler.prototype.onExitLimbo = function () {\n        this.limboQueue = [];\n    };\n    EventHandler.prototype.onBulkSubscriptionSent = function (message) {\n        this.services.timeoutRegistry.add({ message: message });\n    };\n    return EventHandler;\n}());\nexports.EventHandler = EventHandler;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/event/event-handler.ts?");

/***/ }),

/***/ "./src/presence/presence-handler.ts":
/*!******************************************!*\
  !*** ./src/presence/presence-handler.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PresenceHandler = void 0;\nvar constants_1 = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\nvar emitter_1 = __webpack_require__(/*! ../util/emitter */ \"./src/util/emitter.ts\");\nvar bulk_subscription_service_1 = __webpack_require__(/*! ../util/bulk-subscription-service */ \"./src/util/bulk-subscription-service.ts\");\nvar ONLY_EVENT = 'OE';\nfunction validateQueryArguments(rest) {\n    var users = null;\n    var callback = null;\n    if (rest.length === 1) {\n        if (Array.isArray(rest[0])) {\n            users = rest[0];\n        }\n        else {\n            if (typeof rest[0] !== 'function') {\n                throw new Error('invalid argument: \"callback\"');\n            }\n            callback = rest[0];\n        }\n    }\n    else if (rest.length === 2) {\n        users = rest[0];\n        callback = rest[1];\n        if (!Array.isArray(users) || typeof callback !== 'function') {\n            throw new Error('invalid argument: \"users\" or \"callback\"');\n        }\n    }\n    return { users: users, callback: callback };\n}\nvar PresenceHandler = /** @class */ (function () {\n    function PresenceHandler(services, options) {\n        this.services = services;\n        this.globalSubscriptionEmitter = new emitter_1.Emitter();\n        this.subscriptionEmitter = new emitter_1.Emitter();\n        this.queryEmitter = new emitter_1.Emitter();\n        this.queryAllEmitter = new emitter_1.Emitter();\n        this.counter = 0;\n        this.limboQueue = [];\n        this.bulkSubscription = new bulk_subscription_service_1.BulkSubscriptionService(this.services, options.subscriptionInterval, constants_1.TOPIC.PRESENCE, constants_1.PRESENCE_ACTION.SUBSCRIBE, constants_1.PRESENCE_ACTION.UNSUBSCRIBE, this.onBulkSubscriptionSent.bind(this));\n        this.services.connection.registerHandler(constants_1.TOPIC.PRESENCE, this.handle.bind(this));\n        this.services.connection.onExitLimbo(this.onExitLimbo.bind(this));\n        this.services.connection.onLost(this.onExitLimbo.bind(this));\n        this.services.connection.onReestablished(this.onConnectionReestablished.bind(this));\n    }\n    PresenceHandler.prototype.subscribe = function (userOrCallback, callback) {\n        if (typeof userOrCallback === 'string' && userOrCallback.length > 0 && typeof callback === 'function') {\n            var user = userOrCallback;\n            if (!this.subscriptionEmitter.hasListeners(user)) {\n                this.bulkSubscription.subscribe(user);\n            }\n            this.subscriptionEmitter.on(user, callback);\n            return;\n        }\n        if (typeof userOrCallback === 'function' && typeof callback === 'undefined') {\n            if (!this.globalSubscriptionEmitter.hasListeners(ONLY_EVENT)) {\n                this.subscribeToAllChanges();\n            }\n            this.globalSubscriptionEmitter.on(ONLY_EVENT, userOrCallback);\n            return;\n        }\n        throw new Error('invalid arguments: \"user\" or \"callback\"');\n    };\n    PresenceHandler.prototype.unsubscribe = function (userOrCallback, callback) {\n        if (userOrCallback && typeof userOrCallback === 'string' && userOrCallback.length > 0) {\n            var user = userOrCallback;\n            if (callback) {\n                if (typeof callback !== 'function') {\n                    throw new Error('invalid argument: \"callback\"');\n                }\n                this.subscriptionEmitter.off(user, callback);\n            }\n            else {\n                this.subscriptionEmitter.off(user);\n            }\n            if (!this.subscriptionEmitter.hasListeners(user)) {\n                this.bulkSubscription.unsubscribe(user);\n                return;\n            }\n        }\n        if (userOrCallback && typeof userOrCallback === 'function') {\n            callback = userOrCallback;\n            this.globalSubscriptionEmitter.off(ONLY_EVENT, callback);\n            if (!this.globalSubscriptionEmitter.hasListeners(ONLY_EVENT)) {\n                this.unsubscribeToAllChanges();\n            }\n            return;\n        }\n        if (typeof userOrCallback === 'undefined' && typeof callback === 'undefined') {\n            this.subscriptionEmitter.off();\n            this.globalSubscriptionEmitter.off();\n            this.bulkSubscription.unsubscribeList(this.subscriptionEmitter.eventNames());\n            this.unsubscribeToAllChanges();\n            return;\n        }\n        throw new Error('invalid argument: \"user\" or \"callback\"');\n    };\n    PresenceHandler.prototype.getAll = function () {\n        var rest = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            rest[_i] = arguments[_i];\n        }\n        var _a = validateQueryArguments(rest), callback = _a.callback, users = _a.users;\n        var message;\n        var emitter;\n        var emitterAction;\n        if (users) {\n            var queryId = (this.counter++).toString();\n            message = {\n                topic: constants_1.TOPIC.PRESENCE,\n                action: constants_1.PRESENCE_ACTION.QUERY,\n                correlationId: queryId,\n                names: users\n            };\n            emitter = this.queryEmitter;\n            emitterAction = queryId;\n        }\n        else {\n            message = {\n                topic: constants_1.TOPIC.PRESENCE,\n                action: constants_1.PRESENCE_ACTION.QUERY_ALL\n            };\n            emitter = this.queryAllEmitter;\n            emitterAction = ONLY_EVENT;\n        }\n        if (this.services.connection.isConnected) {\n            this.sendQuery(message);\n        }\n        else if (this.services.connection.isInLimbo) {\n            this.limboQueue.push(message);\n        }\n        else {\n            this.services.timerRegistry.requestIdleCallback(function () {\n                emitter.emit(emitterAction, constants_1.EVENT.CLIENT_OFFLINE);\n            });\n        }\n        if (callback) {\n            emitter.once(emitterAction, callback);\n            return;\n        }\n        return new Promise(function (resolve, reject) {\n            emitter.once(emitterAction, function (error, results) { return error ? reject(error) : resolve(results); });\n        });\n    };\n    PresenceHandler.prototype.handle = function (message) {\n        if (message.isAck) {\n            this.services.timeoutRegistry.remove(message);\n            return;\n        }\n        if (message.action === constants_1.PRESENCE_ACTION.QUERY_ALL_RESPONSE) {\n            this.queryAllEmitter.emit(ONLY_EVENT, null, message.names);\n            this.services.timeoutRegistry.remove(message);\n            return;\n        }\n        if (message.action === constants_1.PRESENCE_ACTION.QUERY_RESPONSE) {\n            this.queryEmitter.emit(message.correlationId, null, message.parsedData);\n            this.services.timeoutRegistry.remove(message);\n            return;\n        }\n        if (message.action === constants_1.PRESENCE_ACTION.PRESENCE_JOIN) {\n            this.subscriptionEmitter.emit(message.name, message.name, true);\n            return;\n        }\n        if (message.action === constants_1.PRESENCE_ACTION.PRESENCE_JOIN_ALL) {\n            this.globalSubscriptionEmitter.emit(ONLY_EVENT, message.name, true);\n            return;\n        }\n        if (message.action === constants_1.PRESENCE_ACTION.PRESENCE_LEAVE) {\n            this.subscriptionEmitter.emit(message.name, message.name, false);\n            return;\n        }\n        if (message.action === constants_1.PRESENCE_ACTION.PRESENCE_LEAVE_ALL) {\n            this.globalSubscriptionEmitter.emit(ONLY_EVENT, message.name, false);\n            return;\n        }\n        if (message.isError) {\n            this.services.timeoutRegistry.remove(message);\n            if (message.originalAction === constants_1.PRESENCE_ACTION.QUERY) {\n                this.queryEmitter.emit(message.correlationId, constants_1.PRESENCE_ACTION[message.action]);\n            }\n            else if (message.originalAction === constants_1.PRESENCE_ACTION.QUERY_ALL) {\n                this.queryAllEmitter.emit(ONLY_EVENT, constants_1.PRESENCE_ACTION[message.action]);\n            }\n            else {\n                this.services.logger.error(message);\n            }\n            return;\n        }\n        this.services.logger.error(message, constants_1.EVENT.UNSOLICITED_MESSAGE);\n    };\n    PresenceHandler.prototype.sendQuery = function (message) {\n        this.services.connection.sendMessage(message);\n        this.services.timeoutRegistry.add({ message: message });\n    };\n    PresenceHandler.prototype.subscribeToAllChanges = function () {\n        if (!this.services.connection.isConnected) {\n            return;\n        }\n        var message = { topic: constants_1.TOPIC.PRESENCE, action: constants_1.PRESENCE_ACTION.SUBSCRIBE_ALL };\n        this.services.timeoutRegistry.add({ message: message });\n        this.services.connection.sendMessage(message);\n    };\n    PresenceHandler.prototype.unsubscribeToAllChanges = function () {\n        if (!this.services.connection.isConnected) {\n            return;\n        }\n        var message = { topic: constants_1.TOPIC.PRESENCE, action: constants_1.PRESENCE_ACTION.UNSUBSCRIBE_ALL };\n        this.services.timeoutRegistry.add({ message: message });\n        this.services.connection.sendMessage(message);\n    };\n    PresenceHandler.prototype.onConnectionReestablished = function () {\n        var keys = this.subscriptionEmitter.eventNames();\n        if (keys.length > 0) {\n            this.bulkSubscription.subscribeList(keys);\n        }\n        var hasGlobalSubscription = this.globalSubscriptionEmitter.hasListeners(ONLY_EVENT);\n        if (hasGlobalSubscription) {\n            this.subscribeToAllChanges();\n        }\n        for (var i = 0; i < this.limboQueue.length; i++) {\n            this.sendQuery(this.limboQueue[i]);\n        }\n        this.limboQueue = [];\n    };\n    PresenceHandler.prototype.onExitLimbo = function () {\n        var _this = this;\n        this.queryEmitter.eventNames().forEach(function (correlationId) {\n            _this.queryEmitter.emit(correlationId, constants_1.EVENT.CLIENT_OFFLINE);\n        });\n        this.queryAllEmitter.emit(ONLY_EVENT, constants_1.EVENT.CLIENT_OFFLINE);\n        this.limboQueue = [];\n        this.queryAllEmitter.off();\n        this.queryEmitter.off();\n    };\n    PresenceHandler.prototype.onBulkSubscriptionSent = function (message) {\n        this.services.timeoutRegistry.add({ message: message });\n    };\n    return PresenceHandler;\n}());\nexports.PresenceHandler = PresenceHandler;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/presence/presence-handler.ts?");

/***/ }),

/***/ "./src/record/anonymous-record.ts":
/*!****************************************!*\
  !*** ./src/record/anonymous-record.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AnonymousRecord = void 0;\nvar utils = __webpack_require__(/*! ../util/utils */ \"./src/util/utils.ts\");\nvar emitter_1 = __webpack_require__(/*! ../util/emitter */ \"./src/util/emitter.ts\");\nvar AnonymousRecord = /** @class */ (function (_super) {\n    __extends(AnonymousRecord, _super);\n    function AnonymousRecord(getRecordCore) {\n        var _this = _super.call(this) || this;\n        _this.record = null;\n        _this.subscriptions = [];\n        _this.getRecordCore = getRecordCore;\n        return _this;\n    }\n    Object.defineProperty(AnonymousRecord.prototype, \"name\", {\n        get: function () {\n            if (!this.record) {\n                return '';\n            }\n            return this.record.name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AnonymousRecord.prototype, \"isReady\", {\n        get: function () {\n            if (!this.record) {\n                return false;\n            }\n            return this.record.isReady;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(AnonymousRecord.prototype, \"version\", {\n        get: function () {\n            if (!this.record) {\n                return -1;\n            }\n            return this.record.version;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    AnonymousRecord.prototype.whenReady = function (callback) {\n        if (this.record) {\n            if (callback) {\n                this.record.whenReady(this, callback);\n            }\n            else {\n                return this.record.whenReady(this);\n            }\n        }\n    };\n    AnonymousRecord.prototype.setName = function (recordName, callback) {\n        if (this.name === recordName) {\n            return;\n        }\n        this.discard();\n        this.record = this.getRecordCore(recordName);\n        this.record.addReference(this);\n        for (var i = 0; i < this.subscriptions.length; i++) {\n            this.record.subscribe(this.subscriptions[i], this);\n        }\n        this.emit('nameChanged', recordName);\n        if (callback) {\n            this.record.whenReady(this, callback);\n        }\n        else {\n            return this.record.whenReady(this);\n        }\n    };\n    AnonymousRecord.prototype.get = function (path) {\n        if (this.record) {\n            return this.record.get(path);\n        }\n    };\n    AnonymousRecord.prototype.set = function (path, data, callback) {\n        if (this.record) {\n            return this.record.set(utils.normalizeSetArguments(arguments));\n        }\n    };\n    AnonymousRecord.prototype.setWithAck = function (path, data, callback) {\n        if (this.record) {\n            return this.record.setWithAck(utils.normalizeSetArguments(arguments));\n        }\n    };\n    AnonymousRecord.prototype.erase = function (path) {\n        if (this.record) {\n            return this.record.set(utils.normalizeSetArguments(arguments));\n        }\n    };\n    AnonymousRecord.prototype.eraseWithAck = function (path, callback) {\n        if (this.record) {\n            return this.record.setWithAck(utils.normalizeSetArguments(arguments));\n        }\n    };\n    AnonymousRecord.prototype.subscribe = function (path, callback, triggerNow) {\n        var parameters = utils.normalizeArguments(arguments);\n        this.subscriptions.push(parameters);\n        if (this.record) {\n            this.record.subscribe(parameters, this);\n        }\n    };\n    AnonymousRecord.prototype.unsubscribe = function (path, callback) {\n        var parameters = utils.normalizeArguments(arguments);\n        this.subscriptions = this.subscriptions.filter(function (subscription) {\n            if (!parameters.callback && (subscription.path === parameters.path))\n                return false;\n            if (parameters.callback && (subscription.path === parameters.path && subscription.callback === parameters.callback))\n                return false;\n            return true;\n        });\n        if (this.record) {\n            this.record.unsubscribe(parameters, this);\n        }\n    };\n    AnonymousRecord.prototype.discard = function () {\n        if (this.record) {\n            for (var i = 0; i < this.subscriptions.length; i++) {\n                this.record.unsubscribe(this.subscriptions[i], this);\n            }\n            return this.record.removeReference(this);\n        }\n    };\n    AnonymousRecord.prototype.delete = function (callback) {\n        if (this.record) {\n            return this.record.delete(callback);\n        }\n    };\n    AnonymousRecord.prototype.setMergeStrategy = function (mergeStrategy) {\n        if (this.record) {\n            this.record.setMergeStrategy(mergeStrategy);\n        }\n    };\n    return AnonymousRecord;\n}(emitter_1.Emitter));\nexports.AnonymousRecord = AnonymousRecord;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/record/anonymous-record.ts?");

/***/ }),

/***/ "./src/record/dirty-service.ts":
/*!*************************************!*\
  !*** ./src/record/dirty-service.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DirtyService = void 0;\nvar DirtyService = /** @class */ (function () {\n    function DirtyService(storage, dirtyStorageName) {\n        this.storage = storage;\n        this.dirtyStorageName = dirtyStorageName;\n        this.dirtyRecords = new Map();\n        this.loadedCallback = [];\n        this.flushTimeout = null;\n        this.loaded = false;\n        this.save = this.save.bind(this);\n        this.load();\n    }\n    DirtyService.prototype.isDirty = function (recordName) {\n        return this.dirtyRecords.has(recordName);\n    };\n    DirtyService.prototype.setDirty = function (recordName, isDirty) {\n        var changed = true;\n        if (isDirty) {\n            this.dirtyRecords.set(recordName, true);\n        }\n        else {\n            changed = this.dirtyRecords.delete(recordName);\n        }\n        if (!this.flushTimeout && changed) {\n            this.flushTimeout = setTimeout(this.save, 1000);\n        }\n    };\n    DirtyService.prototype.save = function () {\n        this.storage.set(this.dirtyStorageName, 1, __spread(this.dirtyRecords), function () { });\n        if (this.flushTimeout) {\n            clearTimeout(this.flushTimeout);\n        }\n        this.flushTimeout = null;\n    };\n    DirtyService.prototype.whenLoaded = function (context, callback) {\n        if (this.loaded) {\n            callback.call(context);\n            return;\n        }\n        this.loadedCallback.push({ callback: callback, context: context });\n    };\n    DirtyService.prototype.getAll = function () {\n        return this.dirtyRecords;\n    };\n    DirtyService.prototype.load = function () {\n        var _this = this;\n        if (this.loaded) {\n            return;\n        }\n        this.storage.get(this.dirtyStorageName, function (recordName, version, data) {\n            _this.dirtyRecords = data ? new Map(data) : new Map();\n            _this.loaded = true;\n            _this.loadedCallback.forEach(function (_a) {\n                var callback = _a.callback, context = _a.context;\n                return callback.call(context);\n            });\n        });\n    };\n    return DirtyService;\n}());\nexports.DirtyService = DirtyService;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/record/dirty-service.ts?");

/***/ }),

/***/ "./src/record/json-path.ts":
/*!*********************************!*\
  !*** ./src/record/json-path.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setValue = exports.get = void 0;\nvar utils = __webpack_require__(/*! ../util/utils */ \"./src/util/utils.ts\");\nvar SPLIT_REG_EXP = /[[\\]]/g;\n/**\n* Returns the value of the path or\n* undefined if the path can't be resolved\n*/\nfunction get(data, path, deepCopy) {\n    if (deepCopy === void 0) { deepCopy = false; }\n    var tokens = tokenize(path);\n    var value = data;\n    for (var i = 0; i < tokens.length; i++) {\n        if (value === undefined) {\n            return undefined;\n        }\n        if (typeof value !== 'object') {\n            throw new Error('invalid data or path');\n        }\n        value = value[tokens[i]];\n    }\n    return deepCopy !== false ? utils.deepCopy(value) : value;\n}\nexports.get = get;\n/**\n * This class allows to set or get specific\n * values within a json data structure using\n * string-based paths\n */\nfunction setValue(root, path, value) {\n    if (path === null) {\n        return value;\n    }\n    var tokens = tokenize(path);\n    var rootCopy = utils.deepCopy(root);\n    var valueCopy = utils.deepCopy(value);\n    var node = rootCopy;\n    var i;\n    for (i = 0; i < tokens.length - 1; i++) {\n        var token = tokens[i];\n        if (node[token] !== undefined && node[token] !== null && typeof node[token] === 'object') {\n            node = node[token];\n        }\n        else if (typeof tokens[i + 1] === 'number') {\n            var array = new Array(tokens[i + 1]);\n            array.fill(null);\n            node = node[token] = array;\n        }\n        else {\n            node = node[token] = {};\n        }\n    }\n    if (value === undefined) {\n        delete node[tokens[i]];\n    }\n    else {\n        node[tokens[i]] = valueCopy;\n    }\n    return rootCopy;\n}\nexports.setValue = setValue;\n/**\n * Parses the path. Splits it into\n * keys for objects and indices for arrays.\n */\nfunction tokenize(path) {\n    if (path === null) {\n        return [];\n    }\n    var tokens = [];\n    var parts = path.split('.');\n    for (var i = 0; i < parts.length; i++) {\n        var part = parts[i].trim();\n        if (part.length === 0) {\n            continue;\n        }\n        var arrayIndexes = part.split(SPLIT_REG_EXP);\n        if (arrayIndexes.length === 0) {\n            // TODO\n            continue;\n        }\n        tokens.push(arrayIndexes[0]);\n        for (var j = 1; j < arrayIndexes.length; j++) {\n            if (arrayIndexes[j].length === 0) {\n                continue;\n            }\n            tokens.push(Number(arrayIndexes[j]));\n        }\n    }\n    return tokens;\n}\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/record/json-path.ts?");

/***/ }),

/***/ "./src/record/list.ts":
/*!****************************!*\
  !*** ./src/record/list.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.List = void 0;\nvar utils = __webpack_require__(/*! ../util/utils */ \"./src/util/utils.ts\");\nvar constants_1 = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\nvar emitter_1 = __webpack_require__(/*! ../util/emitter */ \"./src/util/emitter.ts\");\nvar List = /** @class */ (function (_super) {\n    __extends(List, _super);\n    function List(record) {\n        var _this = _super.call(this) || this;\n        _this.record = record;\n        _this.debugId = _this.record.getDebugId();\n        _this.wrappedFunctions = new Map();\n        _this.hasAddListener = false;\n        _this.hasRemoveListener = false;\n        _this.hasMoveListener = false;\n        _this.subscriptions = [];\n        _this.originalApplyUpdate = _this.record.applyUpdate.bind(_this.record);\n        _this.record.applyUpdate = _this.applyUpdate.bind(_this);\n        _this.record.addReference(_this);\n        _this.record.on('discard', function () { return _this.emit('discard', _this); }, _this);\n        _this.record.on('delete', function () { return _this.emit('delete', _this); }, _this);\n        _this.record.on('error', function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return _this.emit.apply(_this, __spread(['error'], args));\n        }, _this);\n        return _this;\n    }\n    Object.defineProperty(List.prototype, \"name\", {\n        get: function () {\n            return this.record.name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(List.prototype, \"isReady\", {\n        get: function () {\n            return this.record.isReady;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(List.prototype, \"version\", {\n        get: function () {\n            return this.record.version;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    List.prototype.whenReady = function (callback) {\n        if (callback) {\n            this.record.whenReady(this, callback);\n        }\n        else {\n            return this.record.whenReady(this);\n        }\n    };\n    List.prototype.discard = function () {\n        this.destroy();\n        this.record.removeReference(this);\n    };\n    List.prototype.delete = function (callback) {\n        this.destroy();\n        return this.record.delete(callback);\n    };\n    /**\n     * Returns the array of list entries or an\n     * empty array if the list hasn't been populated yet.\n     */\n    List.prototype.getEntries = function () {\n        var entries = this.record.get();\n        if (!(entries instanceof Array)) {\n            return [];\n        }\n        return entries;\n    };\n    /**\n   * Returns true if the list is empty\n   */\n    List.prototype.isEmpty = function () {\n        return this.getEntries().length === 0;\n    };\n    List.prototype.setEntriesWithAck = function (entries, callback) {\n        var _this = this;\n        if (!callback) {\n            return new Promise(function (resolve, reject) {\n                _this.setEntries(entries, function (error) {\n                    if (error) {\n                        reject(error);\n                    }\n                    else {\n                        resolve();\n                    }\n                });\n            });\n        }\n        this.setEntries(entries, callback);\n    };\n    /**\n    * Updates the list with a new set of entries\n    */\n    List.prototype.setEntries = function (entries, callback) {\n        var errorMsg = 'entries must be an array of record names';\n        var i;\n        if (!(entries instanceof Array)) {\n            throw new Error(errorMsg);\n        }\n        for (i = 0; i < entries.length; i++) {\n            if (typeof entries[i] !== 'string') {\n                throw new Error(errorMsg);\n            }\n        }\n        this.beforeChange();\n        this.record.set({ data: entries, callback: callback });\n        this.afterChange();\n    };\n    /**\n     * Removes an entry from the list\n     *\n     * @param {String} entry\n     * @param {Number} [index]\n     */\n    List.prototype.removeEntry = function (entry, index, callback) {\n        // @ts-ignore\n        var currentEntries = this.record.get();\n        var hasIndex = this.hasIndex(index);\n        var entries = [];\n        var i;\n        for (i = 0; i < currentEntries.length; i++) {\n            if (currentEntries[i] !== entry || (hasIndex && index !== i)) {\n                entries.push(currentEntries[i]);\n            }\n        }\n        this.beforeChange();\n        this.record.set({ data: entries, callback: callback });\n        this.afterChange();\n    };\n    /**\n   * Adds an entry to the list\n   *\n   * @param {String} entry\n   * @param {Number} [index]\n   */\n    List.prototype.addEntry = function (entry, index, callback) {\n        if (typeof entry !== 'string') {\n            throw new Error('Entry must be a recordName');\n        }\n        var hasIndex = this.hasIndex(index);\n        var entries = this.getEntries();\n        if (hasIndex) {\n            entries.splice(index, 0, entry);\n        }\n        else {\n            entries.push(entry);\n        }\n        this.beforeChange();\n        this.record.set({ data: entries, callback: callback });\n        this.afterChange();\n    };\n    /**\n   * Proxies the underlying Record's subscribe method. Makes sure\n   * that no path is provided\n   */\n    List.prototype.subscribe = function (callback) {\n        var parameters = utils.normalizeArguments(arguments);\n        if (parameters.path) {\n            throw new Error('path is not supported for List.subscribe');\n        }\n        // Make sure the callback is invoked with an empty array for new records\n        var listCallback = function (scope, cb) {\n            cb(scope.getEntries());\n        }.bind(this, this, parameters.callback);\n        /**\n        * Adding a property onto a function directly is terrible practice,\n        * and we will change this as soon as we have a more seperate approach\n        * of creating lists that doesn't have records default state.\n        *\n        * The reason we are holding a referencing to wrapped array is so that\n        * on unsubscribe it can provide a reference to the actual method the\n        * record is subscribed too.\n        **/\n        this.wrappedFunctions.set(parameters.callback, listCallback);\n        parameters.callback = listCallback;\n        this.subscriptions.push(parameters);\n        this.record.subscribe(parameters, this);\n    };\n    /**\n   * Proxies the underlying Record's unsubscribe method. Makes sure\n   * that no path is provided\n   */\n    List.prototype.unsubscribe = function (callback) {\n        var parameters = utils.normalizeArguments(arguments);\n        if (parameters.path) {\n            throw new Error('path is not supported for List.unsubscribe');\n        }\n        var listenCallback = this.wrappedFunctions.get(parameters.callback);\n        parameters.callback = listenCallback;\n        this.wrappedFunctions.delete(parameters.callback);\n        this.subscriptions = this.subscriptions.filter(function (subscription) {\n            if (parameters.callback && parameters.callback !== subscription.callback)\n                return true;\n            return false;\n        });\n        this.record.unsubscribe(parameters, this);\n    };\n    /**\n     * Proxies the underlying Record's _update method. Set's\n     * data to an empty array if no data is provided.\n     */\n    List.prototype.applyUpdate = function (message) {\n        if (!(message.parsedData instanceof Array)) {\n            message.parsedData = [];\n        }\n        this.beforeChange();\n        this.originalApplyUpdate(message);\n        this.afterChange();\n    };\n    /**\n     * Validates that the index provided is within the current set of entries.\n     */\n    List.prototype.hasIndex = function (index) {\n        var hasIndex = false;\n        var entries = this.getEntries();\n        if (index !== undefined) {\n            if (isNaN(index)) {\n                throw new Error('Index must be a number');\n            }\n            if (index !== entries.length && (index >= entries.length || index < 0)) {\n                throw new Error('Index must be within current entries');\n            }\n            hasIndex = true;\n        }\n        return hasIndex;\n    };\n    /**\n     * Establishes the current structure of the list, provided the client has attached any\n     * add / move / remove listener\n     *\n     * This will be called before any change to the list, regardsless if the change was triggered\n     * by an incoming message from the server or by the client\n     */\n    List.prototype.beforeChange = function () {\n        this.hasAddListener = this.hasListeners(constants_1.EVENT.ENTRY_ADDED_EVENT);\n        this.hasRemoveListener = this.hasListeners(constants_1.EVENT.ENTRY_REMOVED_EVENT);\n        this.hasMoveListener = this.hasListeners(constants_1.EVENT.ENTRY_MOVED_EVENT);\n        if (this.hasAddListener || this.hasRemoveListener || this.hasMoveListener) {\n            this.beforeStructure = this.getStructure();\n        }\n        else {\n            this.beforeStructure = null;\n        }\n    };\n    /**\n     * Compares the structure of the list after a change to its previous structure and notifies\n     * any add / move / remove listener. Won't do anything if no listeners are attached.\n     */\n    List.prototype.afterChange = function () {\n        if (this.beforeStructure === null) {\n            return;\n        }\n        var after = this.getStructure();\n        var before = this.beforeStructure;\n        var entry;\n        var i;\n        if (this.hasRemoveListener) {\n            for (entry in before) {\n                for (i = 0; i < before[entry].length; i++) {\n                    if (after[entry] === undefined || after[entry][i] === undefined) {\n                        this.emit(constants_1.EVENT.ENTRY_REMOVED_EVENT, entry, before[entry][i]);\n                    }\n                }\n            }\n        }\n        if (this.hasAddListener || this.hasMoveListener) {\n            for (entry in after) {\n                if (before[entry] === undefined) {\n                    for (i = 0; i < after[entry].length; i++) {\n                        this.emit(constants_1.EVENT.ENTRY_ADDED_EVENT, entry, after[entry][i]);\n                    }\n                }\n                else {\n                    for (i = 0; i < after[entry].length; i++) {\n                        if (before[entry][i] !== after[entry][i]) {\n                            if (before[entry][i] === undefined) {\n                                this.emit(constants_1.EVENT.ENTRY_ADDED_EVENT, entry, after[entry][i]);\n                            }\n                            else {\n                                this.emit(constants_1.EVENT.ENTRY_MOVED_EVENT, entry, after[entry][i]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * Iterates through the list and creates a map with the entry as a key\n     * and an array of its position(s) within the list as a value, e.g.\n     *\n     * {\n     *   'recordA': [ 0, 3 ],\n     *   'recordB': [ 1 ],\n     *   'recordC': [ 2 ]\n     * }\n     */\n    List.prototype.getStructure = function () {\n        var structure = {};\n        var i;\n        var entries = this.getEntries();\n        for (i = 0; i < entries.length; i++) {\n            if (structure[entries[i]] === undefined) {\n                structure[entries[i]] = [i];\n            }\n            else {\n                structure[entries[i]].push(i);\n            }\n        }\n        return structure;\n    };\n    List.prototype.destroy = function () {\n        for (var i = 0; i < this.subscriptions.length; i++) {\n            this.record.unsubscribe(this.subscriptions[i], this);\n        }\n        this.wrappedFunctions.clear();\n        this.record.removeContext(this);\n    };\n    return List;\n}(emitter_1.Emitter));\nexports.List = List;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/record/list.ts?");

/***/ }),

/***/ "./src/record/merge-strategy-service.ts":
/*!**********************************************!*\
  !*** ./src/record/merge-strategy-service.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MergeStrategyService = void 0;\nvar constants_1 = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\nvar MergeStrategyService = /** @class */ (function () {\n    function MergeStrategyService(services, defaultStrategy) {\n        this.services = services;\n        this.defaultStrategy = defaultStrategy;\n        this.strategiesByRecord = new Map();\n        this.strategiesByPattern = new Map();\n    }\n    MergeStrategyService.prototype.setMergeStrategyByName = function (recordName, strategy) {\n        this.strategiesByRecord.set(recordName, strategy);\n    };\n    MergeStrategyService.prototype.setMergeStrategyByPattern = function (pattern, strategy) {\n        this.strategiesByPattern.set(pattern, strategy);\n    };\n    MergeStrategyService.prototype.merge = function (remoteRecord, localVersion, localData, callback, context) {\n        var e_1, _a;\n        var recordName = remoteRecord.name;\n        var exactMergeStrategy = this.strategiesByRecord.get(recordName);\n        if (exactMergeStrategy) {\n            exactMergeStrategy(localData, localVersion, remoteRecord.parsedData, remoteRecord.version, function (error, data) {\n                callback.call(context, error, remoteRecord, data, localVersion, localData);\n            });\n            return;\n        }\n        try {\n            for (var _b = __values(this.strategiesByPattern), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = __read(_c.value, 2), pattern = _d[0], patternMergeStrategy = _d[1];\n                if (pattern.test(recordName)) {\n                    patternMergeStrategy(localData, localVersion, remoteRecord.parsedData, remoteRecord.version, function (error, data) {\n                        callback.call(context, error, remoteRecord, data, localVersion, localData);\n                    });\n                    return;\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        if (this.defaultStrategy) {\n            this.defaultStrategy(localData, localVersion, remoteRecord.parsedData, remoteRecord.version, function (error, data) {\n                callback.call(context, error, remoteRecord, data, localVersion, localData);\n            });\n            return;\n        }\n        this.services.logger.error({ topic: constants_1.TOPIC.RECORD }, constants_1.EVENT.RECORD_VERSION_EXISTS, { remoteVersion: remoteRecord.version, recordName: recordName });\n    };\n    return MergeStrategyService;\n}());\nexports.MergeStrategyService = MergeStrategyService;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/record/merge-strategy-service.ts?");

/***/ }),

/***/ "./src/record/merge-strategy.ts":
/*!**************************************!*\
  !*** ./src/record/merge-strategy.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LOCAL_WINS = exports.REMOTE_WINS = void 0;\n/**\n *  Choose the server's state over the client's\n**/\nvar REMOTE_WINS = function (localValue, localVersion, remoteValue, remoteVersion, callback) {\n    callback(null, remoteValue);\n};\nexports.REMOTE_WINS = REMOTE_WINS;\n/**\n *  Choose the local state over the server's\n**/\nvar LOCAL_WINS = function (localValue, localVersion, remoteValue, remoteVersion, callback) {\n    callback(null, localValue);\n};\nexports.LOCAL_WINS = LOCAL_WINS;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/record/merge-strategy.ts?");

/***/ }),

/***/ "./src/record/record-core.ts":
/*!***********************************!*\
  !*** ./src/record/record-core.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RecordCore = void 0;\nvar constants_1 = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\nvar json_path_1 = __webpack_require__(/*! ./json-path */ \"./src/record/json-path.ts\");\nvar emitter_1 = __webpack_require__(/*! ../util/emitter */ \"./src/util/emitter.ts\");\nvar utils = __webpack_require__(/*! ../util/utils */ \"./src/util/utils.ts\");\nvar state_machine_1 = __webpack_require__(/*! ../util/state-machine */ \"./src/util/state-machine.ts\");\nvar RecordCore = /** @class */ (function (_super) {\n    __extends(RecordCore, _super);\n    function RecordCore(name, services, options, recordServices, whenComplete) {\n        var _this = _super.call(this) || this;\n        _this.name = name;\n        _this.services = services;\n        _this.options = options;\n        _this.recordServices = recordServices;\n        _this.whenComplete = whenComplete;\n        _this.isReady = false;\n        _this.hasProvider = false;\n        _this.version = null;\n        _this.references = new Set();\n        _this.emitter = new emitter_1.Emitter();\n        _this.data = Object.create(null);\n        _this.responseTimeout = null;\n        _this.discardTimeout = null;\n        _this.deletedTimeout = null;\n        _this.deleteResponse = null;\n        _this.pendingWrites = [];\n        _this.readyTimer = -1;\n        _this.recordReadOnlyMode = _this.options.recordReadOnlyMode && _this.options.recordPrefixWriteWhitelist.every(function (prefix) { return !_this.name.startsWith(prefix); });\n        _this.readyCallbacks = [];\n        if (typeof name !== 'string' || name.length === 0) {\n            throw new Error('invalid argument name');\n        }\n        _this.onConnectionLost = _this.onConnectionLost.bind(_this);\n        _this.onConnectionReestablished = _this.onConnectionReestablished.bind(_this);\n        _this.stateMachine = new state_machine_1.StateMachine(_this.services.logger, {\n            init: \"LOADING_OFFLINE\" /* LOADING_OFFLINE */,\n            context: _this,\n            onStateChanged: _this.onStateChanged,\n            transitions: recordStateTransitions\n        });\n        _this.recordServices.dirtyService.whenLoaded(_this, _this.onDirtyServiceLoaded);\n        return _this;\n    }\n    Object.defineProperty(RecordCore.prototype, \"recordState\", {\n        get: function () {\n            return this.stateMachine.state;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    RecordCore.prototype.addReference = function (ref) {\n        if (this.references.size === 0 && this.isReady) {\n            this.services.timeoutRegistry.clear(this.discardTimeout);\n            this.services.timerRegistry.remove(this.readyTimer);\n            this.readyTimer = -1;\n            this.stateMachine.transition(constants_1.RECORD_ACTION.SUBSCRIBE);\n        }\n        this.references.add(ref);\n    };\n    /**\n    * Removes all change listeners and notifies the server that the client is\n    * no longer interested in updates for this record\n    */\n    RecordCore.prototype.removeReference = function (ref) {\n        var _this = this;\n        if (this.checkDestroyed('discard')) {\n            return;\n        }\n        this.whenReadyInternal(ref, function () {\n            _this.references.delete(ref);\n            if (_this.references.size === 0 && _this.readyTimer === -1) {\n                _this.readyTimer = _this.services.timerRegistry.add({\n                    duration: _this.options.recordDiscardTimeout,\n                    callback: _this.stateMachine.transition,\n                    context: _this.stateMachine,\n                    data: \"UNSUBSCRIBE_FOR_REAL\" /* UNSUBSCRIBE_FOR_REAL */\n                });\n                _this.stateMachine.transition(constants_1.RECORD_ACTION.UNSUBSCRIBE);\n            }\n        });\n    };\n    RecordCore.prototype.onDirtyServiceLoaded = function () {\n        var _this = this;\n        this.services.storage.get(this.name, function (recordName, version, data) {\n            _this.services.connection.onReestablished(_this.onConnectionReestablished);\n            _this.services.connection.onLost(_this.onConnectionLost);\n            if (!_this.services.connection.isConnected) {\n                if (version === -1) {\n                    if (_this.recordReadOnlyMode) {\n                        return;\n                    }\n                    _this.version = _this.options.initialRecordVersion;\n                    _this.data = Object.create(null);\n                    // We do this sync in order to avoid the possibility of a race condition\n                    // where connection is established while we are saving. We could introduce\n                    // another transition but its probably overkill since we only set this\n                    // in order to allow the possibility of this record being retrieved in the\n                    // future to know its been created\n                    _this.recordServices.dirtyService.setDirty(_this.name, true);\n                    _this.services.storage.set(_this.name, _this.version, _this.data, function (error) { });\n                }\n                else {\n                    _this.version = version;\n                    _this.data = data;\n                }\n                _this.stateMachine.transition(\"LOADED\" /* LOADED */);\n                return;\n            }\n            if (version === -1 && !_this.recordServices.dirtyService.isDirty(_this.name)) {\n                /**\n                 * Record has never been created before\n                 */\n                _this.stateMachine.transition(constants_1.RECORD_ACTION.SUBSCRIBECREATEANDREAD);\n            }\n            else {\n                _this.version = version;\n                _this.data = data;\n                _this.stateMachine.transition(\"RESUBSCRIBE\" /* RESUBSCRIBE */);\n            }\n        });\n    };\n    RecordCore.prototype.onStateChanged = function (newState, oldState) {\n        this.emitter.emit(constants_1.EVENT.RECORD_STATE_CHANGED, newState);\n    };\n    RecordCore.prototype.whenReady = function (context, callback) {\n        var _this = this;\n        if (callback) {\n            this.whenReadyInternal(context, function (realContext) {\n                callback(realContext);\n            });\n            return;\n        }\n        return new Promise(function (resolve) { return _this.whenReadyInternal(context, function () { return resolve(context); }); });\n    };\n    /**\n   */\n    RecordCore.prototype.whenReadyInternal = function (context, callback) {\n        if (this.isReady === true) {\n            callback(context);\n            return;\n        }\n        this.readyCallbacks.push({ callback: callback, context: context });\n    };\n    /**\n     * Sets the value of either the entire dataset\n     * or of a specific path within the record\n     * and submits the changes to the server\n     *\n     * If the new data is equal to the current data, nothing will happen\n     *\n     * @param {[String|Object]} pathOrData Either a JSON path when called with\n     *                                     two arguments or the data itself\n     * @param {Object} data     The data that should be stored in the record\n     */\n    RecordCore.prototype.set = function (_a) {\n        var _this = this;\n        var path = _a.path, data = _a.data, callback = _a.callback;\n        if (!path && (data === null || typeof data !== 'object')) {\n            throw new Error('invalid arguments, scalar values cannot be set without path');\n        }\n        if (this.checkDestroyed('set')) {\n            return;\n        }\n        if (this.recordReadOnlyMode) {\n            this.services.logger.error({ topic: constants_1.TOPIC.RECORD }, constants_1.EVENT.RECORD_READ_ONLY_MODE, 'Attempting to set data when in readonly mode, ignoring');\n            return;\n        }\n        if (this.isReady === false) {\n            this.pendingWrites.push({ path: path, data: data, callback: callback });\n            return;\n        }\n        var oldValue = this.data;\n        var newValue = json_path_1.setValue(oldValue, path || null, data);\n        if (utils.deepEquals(oldValue, newValue)) {\n            if (callback) {\n                this.services.timerRegistry.requestIdleCallback(function () { return callback(null, _this.name); });\n            }\n            return;\n        }\n        this.applyChange(newValue);\n        if (this.services.connection.isConnected) {\n            this.sendUpdate(path, data, callback);\n        }\n        else {\n            if (callback) {\n                callback(constants_1.EVENT.CLIENT_OFFLINE, this.name);\n            }\n            this.saveUpdate();\n        }\n    };\n    /**\n     * Wrapper function around the record.set that returns a promise\n     * if no callback is supplied.\n     * @returns {Promise} if a callback is omitted a Promise is returned with the result of the write\n     */\n    RecordCore.prototype.setWithAck = function (args) {\n        var _this = this;\n        if (args.callback) {\n            this.set(args);\n            return;\n        }\n        return new Promise(function (resolve, reject) {\n            args.callback = function (error) { return error === null ? resolve() : reject(error); };\n            _this.set(args);\n        });\n    };\n    /**\n   * Returns a copy of either the entire dataset of the record\n   * or - if called with a path - the value of that path within\n   * the record's dataset.\n   *\n   * Returning a copy rather than the actual value helps to prevent\n   * the record getting out of sync due to unintentional changes to\n   * its data\n   */\n    RecordCore.prototype.get = function (path) {\n        return json_path_1.get(this.data, path || null, this.options.recordDeepCopy);\n    };\n    /**\n   * Subscribes to changes to the records dataset.\n   *\n   * Callback is the only mandatory argument.\n   *\n   * When called with a path, it will only subscribe to updates\n   * to that path, rather than the entire record\n   *\n   * If called with true for triggerNow, the callback will\n   * be called immediatly with the current value\n   */\n    RecordCore.prototype.subscribe = function (args, context) {\n        var _this = this;\n        if (args.path !== undefined && (typeof args.path !== 'string' || args.path.length === 0)) {\n            throw new Error('invalid argument path');\n        }\n        if (typeof args.callback !== 'function') {\n            throw new Error('invalid argument callback');\n        }\n        if (this.checkDestroyed('subscribe')) {\n            return;\n        }\n        if (args.triggerNow) {\n            this.whenReadyInternal(null, function () {\n                _this.emitter.on(args.path || '', args.callback, context);\n                args.callback(_this.get(args.path));\n            });\n        }\n        else {\n            this.emitter.on(args.path || '', args.callback, context);\n        }\n    };\n    /**\n     * Removes a subscription that was previously made using record.subscribe()\n     *\n     * Can be called with a path to remove the callback for this specific\n     * path or only with a callback which removes it from the generic subscriptions\n     *\n     * Please Note: unsubscribe is a purely client side operation. If the app is no longer\n     * interested in receiving updates for this record from the server it needs to call\n     * discard instead\n     *\n     * @param   {String}           path  A JSON path\n     * @param   {Function}         callback     The callback method. Please note, if a bound\n     *                                          method was passed to subscribe, the same method\n     *                                          must be passed to unsubscribe as well.\n     */\n    RecordCore.prototype.unsubscribe = function (args, context) {\n        if (args.path !== undefined && (typeof args.path !== 'string' || args.path.length === 0)) {\n            throw new Error('invalid argument path');\n        }\n        if (args.callback !== undefined && typeof args.callback !== 'function') {\n            throw new Error('invalid argument callback');\n        }\n        if (this.checkDestroyed('unsubscribe')) {\n            return;\n        }\n        this.emitter.off(args.path || '', args.callback, context);\n    };\n    /**\n     * Deletes the record on the server.\n     */\n    RecordCore.prototype.delete = function (callback) {\n        var _this = this;\n        if (!this.services.connection.isConnected) {\n            // this.services.logger.warn({ topic: TOPIC.RECORD }, RECORD_ACTION.DELETE, 'Deleting while offline is not supported')\n            if (callback) {\n                this.services.timerRegistry.requestIdleCallback(function () {\n                    callback('Deleting while offline is not supported');\n                });\n                return;\n            }\n            return Promise.reject('Deleting while offline is not supported');\n        }\n        if (this.checkDestroyed('delete')) {\n            return;\n        }\n        this.stateMachine.transition(constants_1.RECORD_ACTION.DELETE);\n        if (callback && typeof callback === 'function') {\n            this.deleteResponse = { callback: callback };\n            this.sendDelete();\n        }\n        else {\n            return new Promise(function (resolve, reject) {\n                _this.deleteResponse = { resolve: resolve, reject: reject };\n                _this.sendDelete();\n            });\n        }\n    };\n    /**\n     * Set a merge strategy to resolve any merge conflicts that may occur due\n     * to offline work or write conflicts. The function will be called with the\n     * local record, the remote version/data and a callback to call once the merge has\n     * completed or if an error occurs ( which leaves it in an inconsistent state until\n     * the next update merge attempt ).\n     */\n    RecordCore.prototype.setMergeStrategy = function (mergeStrategy) {\n        this.recordServices.mergeStrategy.setMergeStrategyByName(this.name, mergeStrategy);\n    };\n    RecordCore.prototype.saveRecordToOffline = function (callback) {\n        if (callback === void 0) { callback = function () { }; }\n        this.services.storage.set(this.name, this.version, this.data, callback);\n    };\n    /**\n     * Transition States\n     */\n    RecordCore.prototype.onSubscribing = function () {\n        this.recordServices.readRegistry.register(this.name, this, this.handleReadResponse);\n        this.responseTimeout = this.services.timeoutRegistry.add({\n            message: {\n                topic: constants_1.TOPIC.RECORD,\n                action: constants_1.RECORD_ACTION.READ_RESPONSE,\n                name: this.name\n            }\n        });\n        if (this.recordReadOnlyMode) {\n            this.recordServices.bulkSubscriptionService[constants_1.RECORD_ACTION.SUBSCRIBEANDREAD].subscribe(this.name);\n        }\n        else {\n            this.recordServices.bulkSubscriptionService[constants_1.RECORD_ACTION.SUBSCRIBECREATEANDREAD].subscribe(this.name);\n        }\n    };\n    RecordCore.prototype.onResubscribing = function () {\n        this.services.timerRegistry.remove(this.readyTimer);\n        this.recordServices.headRegistry.register(this.name, this, this.handleHeadResponse);\n        this.responseTimeout = this.services.timeoutRegistry.add({\n            message: {\n                topic: constants_1.TOPIC.RECORD,\n                action: constants_1.RECORD_ACTION.HEAD,\n                name: this.name\n            }\n        });\n        this.recordServices.bulkSubscriptionService[constants_1.RECORD_ACTION.SUBSCRIBEANDHEAD].subscribe(this.name);\n    };\n    RecordCore.prototype.onReady = function () {\n        this.services.timeoutRegistry.clear(this.responseTimeout);\n        this.applyPendingWrites();\n        this.isReady = true;\n        // We temporarily reset the data in order to allow the change callback\n        // to trigger all the subscriptions on the first response.\n        this.applyChange(this.data, true, false);\n        this.readyCallbacks.forEach(function (_a) {\n            var context = _a.context, callback = _a.callback;\n            callback.call(context, context);\n        });\n        this.readyCallbacks = [];\n    };\n    RecordCore.prototype.applyPendingWrites = function () {\n        var _this = this;\n        var writeCallbacks = [];\n        var oldData = this.data;\n        var newData = oldData;\n        for (var i = 0; i < this.pendingWrites.length; i++) {\n            var _a = this.pendingWrites[i], callback = _a.callback, path = _a.path, data = _a.data;\n            if (callback) {\n                writeCallbacks.push(callback);\n            }\n            newData = json_path_1.setValue(newData, path || null, data);\n        }\n        this.pendingWrites = [];\n        this.applyChange(newData);\n        var runFns;\n        if (writeCallbacks.length !== 0) {\n            runFns = function (err) {\n                for (var i = 0; i < writeCallbacks.length; i++) {\n                    writeCallbacks[i](err, _this.name);\n                }\n            };\n        }\n        if (utils.deepEquals(oldData, newData)) {\n            if (runFns) {\n                runFns(null);\n            }\n            return;\n        }\n        if (this.services.connection.isConnected) {\n            this.sendUpdate(null, newData, runFns);\n        }\n        else {\n            if (runFns) {\n                runFns(constants_1.EVENT.CLIENT_OFFLINE);\n            }\n            this.saveUpdate();\n        }\n    };\n    RecordCore.prototype.onUnsubscribed = function () {\n        var _this = this;\n        if (this.services.connection.isConnected) {\n            // TODO: Remove the discard concept from an individual record into bulk\n            // this.recordServices.bulkSubscriptionService[RA.SUBSCRIBEANDHEAD].unsubscribe(this.name)\n            var message = {\n                topic: constants_1.TOPIC.RECORD,\n                action: constants_1.RECORD_ACTION.UNSUBSCRIBE,\n                names: [this.name],\n                correlationId: this.name\n            };\n            this.discardTimeout = this.services.timeoutRegistry.add({ message: message });\n            this.services.connection.sendMessage(message);\n        }\n        this.emit(constants_1.EVENT.RECORD_DISCARDED);\n        this.saveRecordToOffline(function () { return _this.destroy(); });\n    };\n    RecordCore.prototype.onDeleted = function () {\n        this.services.storage.delete(this.name, function () { });\n        this.emit(constants_1.EVENT.RECORD_DELETED);\n        this.destroy();\n    };\n    RecordCore.prototype.handle = function (message) {\n        if (message.action === constants_1.RECORD_ACTION.PATCH || message.action === constants_1.RECORD_ACTION.UPDATE || message.action === constants_1.RECORD_ACTION.ERASE) {\n            if (this.stateMachine.state === \"MERGING\" /* MERGING */) {\n                // The scenario this covers is when a read is requested because the head doesn't match\n                // but an update comes in because we subscribed. In that scenario we just ignore the update\n                // and wait for the read response. Hopefully the messages don't cross on the wire in which case\n                // it might result in another merge conflict.\n                return;\n            }\n            this.applyUpdate(message);\n            return;\n        }\n        if (message.action === constants_1.RECORD_ACTION.DELETE_SUCCESS) {\n            this.services.timeoutRegistry.clear(this.deletedTimeout);\n            this.stateMachine.transition(constants_1.RECORD_ACTION.DELETE_SUCCESS);\n            if (this.deleteResponse.callback) {\n                this.deleteResponse.callback(null);\n            }\n            else if (this.deleteResponse.resolve) {\n                this.deleteResponse.resolve();\n            }\n            return;\n        }\n        if (message.action === constants_1.RECORD_ACTION.DELETED) {\n            this.stateMachine.transition(constants_1.RECORD_ACTION.DELETED);\n            return;\n        }\n        if (message.action === constants_1.RECORD_ACTION.VERSION_EXISTS) {\n            this.recoverRecordFromMessage(message);\n            return;\n        }\n        if (message.action === constants_1.RECORD_ACTION.MESSAGE_DENIED ||\n            message.action === constants_1.RECORD_ACTION.MESSAGE_PERMISSION_ERROR) {\n            if (message.originalAction === constants_1.RECORD_ACTION.SUBSCRIBECREATEANDREAD ||\n                message.originalAction === constants_1.RECORD_ACTION.SUBSCRIBEANDHEAD ||\n                message.originalAction === constants_1.RECORD_ACTION.SUBSCRIBEANDREAD) {\n                var subscribeMsg = __assign(__assign({}, message), { originalAction: constants_1.RECORD_ACTION.SUBSCRIBE });\n                var actionMsg = __assign(__assign({}, message), { originalAction: message.originalAction === constants_1.RECORD_ACTION.SUBSCRIBECREATEANDREAD ? constants_1.RECORD_ACTION.READ_RESPONSE : constants_1.RECORD_ACTION.HEAD_RESPONSE });\n                this.services.timeoutRegistry.remove(subscribeMsg); // TODO: This doesn't contain correlationIds\n                this.services.timeoutRegistry.remove(actionMsg);\n            }\n            // handle message denied on record set with ack\n            if (message.originalAction === constants_1.RECORD_ACTION.PATCH) {\n                if (message.correlationId) {\n                    this.recordServices.writeAckService.recieve(message);\n                    return;\n                }\n            }\n            this.emit(constants_1.EVENT.RECORD_ERROR, constants_1.RECORD_ACTION[constants_1.RECORD_ACTION.MESSAGE_DENIED], constants_1.RECORD_ACTION[message.originalAction]);\n            if (message.originalAction === constants_1.RECORD_ACTION.DELETE) {\n                if (this.deleteResponse.callback) {\n                    this.deleteResponse.callback(constants_1.RECORD_ACTION[constants_1.RECORD_ACTION.MESSAGE_DENIED]);\n                }\n                else if (this.deleteResponse.reject) {\n                    this.deleteResponse.reject(constants_1.RECORD_ACTION[constants_1.RECORD_ACTION.MESSAGE_DENIED]);\n                }\n            }\n            return;\n        }\n        if (message.action === constants_1.RECORD_ACTION.SUBSCRIPTION_HAS_PROVIDER ||\n            message.action === constants_1.RECORD_ACTION.SUBSCRIPTION_HAS_NO_PROVIDER) {\n            this.hasProvider = message.action === constants_1.RECORD_ACTION.SUBSCRIPTION_HAS_PROVIDER;\n            this.emit(constants_1.EVENT.RECORD_HAS_PROVIDER_CHANGED, this.hasProvider);\n            return;\n        }\n    };\n    RecordCore.prototype.handleReadResponse = function (message) {\n        if (this.stateMachine.state === \"MERGING\" /* MERGING */) {\n            this.recoverRecordFromMessage(message);\n            this.recordServices.dirtyService.setDirty(this.name, false);\n            return;\n        }\n        this.version = message.version;\n        this.data = message.parsedData;\n        this.stateMachine.transition(constants_1.RECORD_ACTION.READ_RESPONSE);\n    };\n    RecordCore.prototype.handleHeadResponse = function (message) {\n        var remoteVersion = message.version;\n        if (this.recordServices.dirtyService.isDirty(this.name)) {\n            if (remoteVersion === -1 && this.version === this.options.initialRecordVersion) {\n                /**\n                 * Record created while offline\n                 */\n                this.stateMachine.transition(\"SUBSCRIBED\" /* SUBSCRIBED */);\n                this.sendCreateUpdate(this.data);\n            }\n            else if (this.version === remoteVersion + 1) {\n                /**\n                 * record updated by client while offline\n                */\n                this.stateMachine.transition(\"RESUBSCRIBED\" /* RESUBSCRIBED */);\n                this.sendUpdate(null, this.data);\n            }\n            else {\n                /**\n                 * record updated by server when offline, get latest data\n                 */\n                this.stateMachine.transition(\"INVALID_VERSION\" /* INVALID_VERSION */);\n                if (remoteVersion !== -1) {\n                    /**\n                     * A read with version -1 would result in a read error\n                     */\n                    this.sendRead();\n                    this.recordServices.readRegistry.register(this.name, this, this.handleReadResponse);\n                }\n                else {\n                    this.recoverRecordDeletedRemotely();\n                }\n            }\n        }\n        else {\n            if (this.version === remoteVersion) {\n                this.stateMachine.transition(\"RESUBSCRIBED\" /* RESUBSCRIBED */);\n            }\n            else {\n                this.stateMachine.transition(\"INVALID_VERSION\" /* INVALID_VERSION */);\n                if (remoteVersion < this.version) {\n                    /**\n                     *  deleted and created again remotely, up to merge conflict I guess\n                     */\n                    this.recoverRecordDeletedRemotely();\n                }\n                else {\n                    this.sendRead();\n                    this.recordServices.readRegistry.register(this.name, this, this.handleReadResponse);\n                }\n            }\n        }\n    };\n    RecordCore.prototype.sendRead = function () {\n        this.services.connection.sendMessage({\n            topic: constants_1.TOPIC.RECORD,\n            action: constants_1.RECORD_ACTION.READ,\n            name: this.name\n        });\n    };\n    RecordCore.prototype.saveUpdate = function () {\n        if (!this.recordServices.dirtyService.isDirty(this.name)) {\n            this.version++;\n            this.recordServices.dirtyService.setDirty(this.name, true);\n        }\n        this.saveRecordToOffline();\n    };\n    RecordCore.prototype.sendUpdate = function (path, data, callback) {\n        if (path === void 0) { path = null; }\n        if (this.recordReadOnlyMode) {\n            this.services.logger.error({ topic: constants_1.TOPIC.RECORD }, constants_1.EVENT.RECORD_READ_ONLY_MODE, 'Attempting to send updated data, ignoring');\n            return;\n        }\n        if (this.recordServices.dirtyService.isDirty(this.name)) {\n            this.recordServices.dirtyService.setDirty(this.name, false);\n        }\n        else {\n            this.version++;\n        }\n        var message = {\n            topic: constants_1.TOPIC.RECORD,\n            version: this.version,\n            name: this.name\n        };\n        if (path) {\n            if (data === undefined) {\n                Object.assign(message, { action: constants_1.RECORD_ACTION.ERASE, path: path });\n            }\n            else {\n                Object.assign(message, { action: constants_1.RECORD_ACTION.PATCH, path: path, parsedData: data });\n            }\n        }\n        else {\n            Object.assign(message, { action: constants_1.RECORD_ACTION.UPDATE, parsedData: data });\n        }\n        if (callback) {\n            this.recordServices.writeAckService.send(message, callback);\n        }\n        else {\n            this.services.connection.sendMessage(message);\n        }\n    };\n    RecordCore.prototype.sendCreateUpdate = function (data) {\n        this.services.connection.sendMessage({\n            name: this.name,\n            topic: constants_1.TOPIC.RECORD,\n            action: constants_1.RECORD_ACTION.CREATEANDUPDATE,\n            version: this.options.initialRecordVersion,\n            parsedData: data\n        });\n        this.recordServices.dirtyService.setDirty(this.name, false);\n    };\n    /**\n     * Applies incoming updates and patches to the record's dataset\n     */\n    RecordCore.prototype.applyUpdate = function (message) {\n        var version = message.version;\n        var data = message.parsedData;\n        if (this.version === null) {\n            this.version = version;\n        }\n        else if (this.version + 1 !== version) {\n            this.stateMachine.transition(\"INVALID_VERSION\" /* INVALID_VERSION */);\n            if (message.action === constants_1.RECORD_ACTION.PATCH) {\n                /**\n                * Request a snapshot so that a merge can be done with the read reply which contains\n                * the full state of the record\n                **/\n                this.sendRead();\n                this.recordServices.readRegistry.register(this.name, this, this.handleReadResponse);\n            }\n            else {\n                this.recoverRecordFromMessage(message);\n            }\n            return;\n        }\n        this.version = version;\n        var newData;\n        if (message.action === constants_1.RECORD_ACTION.PATCH) {\n            newData = json_path_1.setValue(this.data, message.path, data);\n        }\n        else if (message.action === constants_1.RECORD_ACTION.ERASE) {\n            newData = json_path_1.setValue(this.data, message.path, undefined);\n        }\n        else {\n            newData = data;\n        }\n        this.applyChange(newData);\n    };\n    /**\n     * Compares the new values for every path with the previously stored ones and\n     * updates the subscribers if the value has changed\n     */\n    RecordCore.prototype.applyChange = function (newData, force, save) {\n        if (force === void 0) { force = false; }\n        if (save === void 0) { save = true; }\n        if (this.stateMachine.inEndState) {\n            return;\n        }\n        var oldData = this.data;\n        this.data = newData;\n        if (this.options.saveUpdatesOffline && save) {\n            this.saveRecordToOffline();\n        }\n        var paths = this.emitter.eventNames();\n        for (var i = 0; i < paths.length; i++) {\n            var newValue = json_path_1.get(newData, paths[i], false);\n            var oldValue = json_path_1.get(oldData, paths[i], false);\n            if (!utils.deepEquals(newValue, oldValue) || (force && newValue)) {\n                this.emitter.emit(paths[i], this.get(paths[i]));\n            }\n        }\n    };\n    /**\n     */\n    RecordCore.prototype.sendDelete = function () {\n        var _this = this;\n        this.whenReadyInternal(null, function () {\n            _this.services.storage.delete(_this.name, function () {\n                if (_this.services.connection.isConnected) {\n                    var message = {\n                        topic: constants_1.TOPIC.RECORD,\n                        action: constants_1.RECORD_ACTION.DELETE,\n                        name: _this.name\n                    };\n                    _this.deletedTimeout = _this.services.timeoutRegistry.add({\n                        message: message,\n                        event: constants_1.EVENT.RECORD_DELETE_TIMEOUT,\n                        duration: _this.options.recordDeleteTimeout\n                    });\n                    _this.services.connection.sendMessage(message);\n                }\n                else {\n                    _this.stateMachine.transition(constants_1.RECORD_ACTION.DELETE_SUCCESS);\n                }\n            });\n        });\n    };\n    RecordCore.prototype.recoverRecordFromMessage = function (message) {\n        this.recordServices.mergeStrategy.merge(message, this.version, this.get(), this.onRecordRecovered, this);\n    };\n    RecordCore.prototype.recoverRecordDeletedRemotely = function () {\n        this.recordServices.mergeStrategy.merge({\n            name: this.name,\n            version: -1,\n            parsedData: null\n        }, this.version, this.get(), this.onRecordRecovered, this);\n    };\n    /**\n   * Callback once the record merge has completed. If successful it will set the\n   * record state, else emit and error and the record will remain in an\n   * inconsistent state until the next update.\n   */\n    RecordCore.prototype.onRecordRecovered = function (error, recordMessage, mergedData) {\n        var _this = this;\n        var remoteVersion = recordMessage.version, remoteData = recordMessage.parsedData;\n        if (error) {\n            this.services.logger.error({ topic: constants_1.TOPIC.RECORD }, constants_1.EVENT.RECORD_VERSION_EXISTS);\n            if (recordMessage.correlationId) {\n                this.recordServices.writeAckService.recieve(__assign(__assign({}, recordMessage), { reason: error }));\n            }\n            return;\n        }\n        if (mergedData === null) {\n            if (remoteVersion === -1) {\n                this.services.storage.delete(this.name, function () { });\n                this.stateMachine.transition(constants_1.RECORD_ACTION.DELETED);\n            }\n            else {\n                this.stateMachine.transition(constants_1.RECORD_ACTION.DELETE);\n            }\n            return;\n        }\n        this.version = remoteVersion;\n        var oldValue = this.data;\n        if (utils.deepEquals(oldValue, remoteData)) {\n            if (this.stateMachine.state === \"MERGING\" /* MERGING */) {\n                this.stateMachine.transition(\"MERGED\" /* MERGED */);\n            }\n            return;\n        }\n        if (this.stateMachine.state !== \"MERGING\" /* MERGING */) {\n            this.services.logger.warn({\n                topic: constants_1.TOPIC.RECORD,\n                action: constants_1.RECORD_ACTION.VERSION_EXISTS\n            });\n            return;\n        }\n        var newValue = mergedData;\n        this.stateMachine.transition(\"MERGED\" /* MERGED */);\n        var runFns;\n        var writeCallbacks = this.pendingWrites\n            .map(function (_a) {\n            var callback = _a.callback;\n            return callback;\n        })\n            .filter(function (callback) { return callback !== undefined; });\n        if (writeCallbacks.length !== 0) {\n            runFns = function (err) {\n                writeCallbacks.forEach(function (callback) { return callback(err, _this.name); });\n            };\n        }\n        this.pendingWrites = [];\n        if (utils.deepEquals(mergedData, remoteData)) {\n            this.applyChange(mergedData);\n            if (runFns) {\n                runFns(null);\n            }\n            return;\n        }\n        if (this.recordReadOnlyMode) {\n            this.services.logger.error({ topic: constants_1.TOPIC.RECORD }, constants_1.EVENT.RECORD_READ_ONLY_MODE, 'Attempting to set data after merge when in readonly mode, ignoring');\n            return;\n        }\n        this.applyChange(newValue);\n        this.sendUpdate(null, this.data, runFns);\n    };\n    /**\n   * A quick check that's carried out by most methods that interact with the record\n   * to make sure it hasn't been destroyed yet - and to handle it gracefully if it has.\n   */\n    RecordCore.prototype.checkDestroyed = function (methodName) {\n        if (this.stateMachine.inEndState) {\n            this.services.logger.error({ topic: constants_1.TOPIC.RECORD }, constants_1.EVENT.RECORD_ALREADY_DESTROYED, { methodName: methodName });\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Destroys the record and nulls all\n     * its dependencies\n     */\n    RecordCore.prototype.destroy = function () {\n        this.services.timerRegistry.remove(this.readyTimer);\n        this.services.timeoutRegistry.clear(this.responseTimeout);\n        this.services.timeoutRegistry.clear(this.deletedTimeout);\n        this.services.timeoutRegistry.clear(this.discardTimeout);\n        this.services.connection.removeOnReestablished(this.onConnectionReestablished);\n        this.services.connection.removeOnLost(this.onConnectionLost);\n        this.emitter.off();\n        this.isReady = false;\n        this.whenComplete(this.name);\n    };\n    RecordCore.prototype.onConnectionReestablished = function () {\n        this.stateMachine.transition(\"RESUBSCRIBE\" /* RESUBSCRIBE */);\n    };\n    RecordCore.prototype.onConnectionLost = function () {\n        this.saveRecordToOffline();\n    };\n    RecordCore.prototype.getDebugId = function () {\n        if (this.options.debug) {\n            return utils.getUid();\n        }\n        return null;\n    };\n    return RecordCore;\n}(emitter_1.Emitter));\nexports.RecordCore = RecordCore;\nvar recordStateTransitions = [\n    { name: constants_1.RECORD_ACTION.SUBSCRIBECREATEANDREAD, from: \"LOADING_OFFLINE\" /* LOADING_OFFLINE */, to: \"SUBSCRIBING\" /* SUBSCRIBING */, handler: RecordCore.prototype.onSubscribing },\n    { name: \"LOADED\" /* LOADED */, from: \"LOADING_OFFLINE\" /* LOADING_OFFLINE */, to: \"READY\" /* READY */, handler: RecordCore.prototype.onReady },\n    { name: constants_1.RECORD_ACTION.READ_RESPONSE, from: \"SUBSCRIBING\" /* SUBSCRIBING */, to: \"READY\" /* READY */, handler: RecordCore.prototype.onReady },\n    { name: \"SUBSCRIBED\" /* SUBSCRIBED */, from: \"RESUBSCRIBING\" /* RESUBSCRIBING */, to: \"READY\" /* READY */, handler: RecordCore.prototype.onReady },\n    { name: \"RESUBSCRIBE\" /* RESUBSCRIBE */, from: \"LOADING_OFFLINE\" /* LOADING_OFFLINE */, to: \"RESUBSCRIBING\" /* RESUBSCRIBING */, handler: RecordCore.prototype.onResubscribing },\n    { name: \"RESUBSCRIBE\" /* RESUBSCRIBE */, from: \"READY\" /* READY */, to: \"RESUBSCRIBING\" /* RESUBSCRIBING */, handler: RecordCore.prototype.onResubscribing },\n    { name: \"RESUBSCRIBE\" /* RESUBSCRIBE */, from: \"RESUBSCRIBING\" /* RESUBSCRIBING */, to: \"RESUBSCRIBING\" /* RESUBSCRIBING */, handler: RecordCore.prototype.onResubscribing },\n    { name: \"RESUBSCRIBE\" /* RESUBSCRIBE */, from: \"SUBSCRIBING\" /* SUBSCRIBING */, to: \"SUBSCRIBING\" /* SUBSCRIBING */, handler: RecordCore.prototype.onSubscribing },\n    { name: \"RESUBSCRIBE\" /* RESUBSCRIBE */, from: \"UNSUBSCRIBING\" /* UNSUBSCRIBING */, to: \"UNSUBSCRIBING\" /* UNSUBSCRIBING */ },\n    { name: \"RESUBSCRIBED\" /* RESUBSCRIBED */, from: \"RESUBSCRIBING\" /* RESUBSCRIBING */, to: \"READY\" /* READY */, handler: RecordCore.prototype.onReady },\n    { name: \"INVALID_VERSION\" /* INVALID_VERSION */, from: \"RESUBSCRIBING\" /* RESUBSCRIBING */, to: \"MERGING\" /* MERGING */ },\n    { name: \"MERGED\" /* MERGED */, from: \"MERGING\" /* MERGING */, to: \"READY\" /* READY */, handler: RecordCore.prototype.onReady },\n    { name: constants_1.RECORD_ACTION.DELETED, from: \"MERGING\" /* MERGING */, to: \"DELETED\" /* DELETED */, handler: RecordCore.prototype.onDeleted },\n    { name: constants_1.RECORD_ACTION.DELETE, from: \"MERGING\" /* MERGING */, to: \"DELETING\" /* DELETING */ },\n    { name: constants_1.RECORD_ACTION.DELETE, from: \"READY\" /* READY */, to: \"DELETING\" /* DELETING */ },\n    { name: constants_1.RECORD_ACTION.DELETED, from: \"READY\" /* READY */, to: \"DELETED\" /* DELETED */, handler: RecordCore.prototype.onDeleted },\n    { name: constants_1.RECORD_ACTION.DELETED, from: \"UNSUBSCRIBE_FOR_REAL\" /* UNSUBSCRIBE_FOR_REAL */, to: \"DELETED\" /* DELETED */, handler: RecordCore.prototype.onDeleted },\n    { name: constants_1.RECORD_ACTION.DELETED, from: \"UNSUBSCRIBING\" /* UNSUBSCRIBING */, to: \"DELETED\" /* DELETED */, handler: RecordCore.prototype.onDeleted },\n    { name: constants_1.RECORD_ACTION.DELETE_SUCCESS, from: \"DELETING\" /* DELETING */, to: \"DELETED\" /* DELETED */, handler: RecordCore.prototype.onDeleted },\n    { name: constants_1.RECORD_ACTION.UNSUBSCRIBE, from: \"READY\" /* READY */, to: \"UNSUBSCRIBING\" /* UNSUBSCRIBING */ },\n    { name: constants_1.RECORD_ACTION.SUBSCRIBE, from: \"UNSUBSCRIBING\" /* UNSUBSCRIBING */, to: \"READY\" /* READY */ },\n    { name: \"UNSUBSCRIBE_FOR_REAL\" /* UNSUBSCRIBE_FOR_REAL */, from: \"UNSUBSCRIBING\" /* UNSUBSCRIBING */, to: \"UNSUBSCRIBED\" /* UNSUBSCRIBED */, handler: RecordCore.prototype.onUnsubscribed },\n    { name: \"INVALID_VERSION\" /* INVALID_VERSION */, from: \"READY\" /* READY */, to: \"MERGING\" /* MERGING */ },\n];\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/record/record-core.ts?");

/***/ }),

/***/ "./src/record/record-handler.ts":
/*!**************************************!*\
  !*** ./src/record/record-handler.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RecordHandler = void 0;\nvar utils = __webpack_require__(/*! ../util/utils */ \"./src/util/utils.ts\");\nvar constants_1 = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\nvar record_core_1 = __webpack_require__(/*! ./record-core */ \"./src/record/record-core.ts\");\nvar record_1 = __webpack_require__(/*! ./record */ \"./src/record/record.ts\");\nvar anonymous_record_1 = __webpack_require__(/*! ./anonymous-record */ \"./src/record/anonymous-record.ts\");\nvar list_1 = __webpack_require__(/*! ./list */ \"./src/record/list.ts\");\nvar listener_1 = __webpack_require__(/*! ../util/listener */ \"./src/util/listener.ts\");\nvar single_notifier_1 = __webpack_require__(/*! ./single-notifier */ \"./src/record/single-notifier.ts\");\nvar write_ack_service_1 = __webpack_require__(/*! ./write-ack-service */ \"./src/record/write-ack-service.ts\");\nvar dirty_service_1 = __webpack_require__(/*! ./dirty-service */ \"./src/record/dirty-service.ts\");\nvar merge_strategy_service_1 = __webpack_require__(/*! ./merge-strategy-service */ \"./src/record/merge-strategy-service.ts\");\nvar bulk_subscription_service_1 = __webpack_require__(/*! ../util/bulk-subscription-service */ \"./src/util/bulk-subscription-service.ts\");\nvar RecordHandler = /** @class */ (function () {\n    function RecordHandler(services, options, recordServices, listener) {\n        var _a;\n        if (listener === void 0) { listener = new listener_1.Listener(constants_1.TOPIC.RECORD, services); }\n        this.services = services;\n        this.options = options;\n        this.listener = listener;\n        this.recordCores = new Map();\n        this.notifyCallbacks = new Map();\n        this.recordServices = recordServices || {\n            bulkSubscriptionService: (_a = {},\n                _a[constants_1.RECORD_ACTION.SUBSCRIBECREATEANDREAD] = this.getBulkSubscriptionService(constants_1.RECORD_ACTION.SUBSCRIBECREATEANDREAD),\n                _a[constants_1.RECORD_ACTION.SUBSCRIBEANDREAD] = this.getBulkSubscriptionService(constants_1.RECORD_ACTION.SUBSCRIBEANDREAD),\n                _a[constants_1.RECORD_ACTION.SUBSCRIBEANDHEAD] = this.getBulkSubscriptionService(constants_1.RECORD_ACTION.SUBSCRIBEANDHEAD),\n                _a),\n            writeAckService: new write_ack_service_1.WriteAcknowledgementService(services),\n            readRegistry: new single_notifier_1.SingleNotifier(services, constants_1.RECORD_ACTION.READ, options.recordReadTimeout),\n            headRegistry: new single_notifier_1.SingleNotifier(services, constants_1.RECORD_ACTION.HEAD, options.recordReadTimeout),\n            dirtyService: new dirty_service_1.DirtyService(services.storage, options.dirtyStorageName),\n            mergeStrategy: new merge_strategy_service_1.MergeStrategyService(services, options.mergeStrategy)\n        };\n        this.dirtyService = this.recordServices.dirtyService;\n        this.sendUpdatedData = this.sendUpdatedData.bind(this);\n        this.onMergeCompleted = this.onMergeCompleted.bind(this);\n        this.getRecordCore = this.getRecordCore.bind(this);\n        this.removeRecord = this.removeRecord.bind(this);\n        this.onBulkSubscriptionSent = this.onBulkSubscriptionSent.bind(this);\n        this.services.connection.registerHandler(constants_1.TOPIC.RECORD, this.handle.bind(this));\n        this.services.connection.onReestablished(this.syncDirtyRecords.bind(this));\n        if (this.services.connection.isConnected) {\n            this.syncDirtyRecords();\n        }\n    }\n    /**\n     * Returns all the available data-sync names.\n     *\n     * Please note: Lists, AnonymousRecords and Records are all essentially\n     * the same thing within the SDK, so this array will contain a list of\n     * everything.\n     *\n     * Due to how records work as well even after a discard this list will\n     * take a while to update. This is intentional as their is an option for\n     * how long a record will survive before being discarded! You can change that\n     * via the `recordDiscardTimeout: milliseconds` option.\n     */\n    RecordHandler.prototype.names = function () {\n        return __spread(this.recordCores.keys());\n    };\n    RecordHandler.prototype.setMergeStrategy = function (recordName, mergeStrategy) {\n        if (typeof mergeStrategy === 'function') {\n            this.recordServices.mergeStrategy.setMergeStrategyByName(recordName, mergeStrategy);\n        }\n        else {\n            throw new Error('Invalid merge strategy: Must be a Function');\n        }\n    };\n    RecordHandler.prototype.setMergeStrategyRegExp = function (regexp, mergeStrategy) {\n        if (typeof mergeStrategy === 'function') {\n            this.recordServices.mergeStrategy.setMergeStrategyByPattern(regexp, mergeStrategy);\n        }\n        else {\n            throw new Error('Invalid merge strategy: Must be a Function');\n        }\n    };\n    /**\n   * Returns an existing record or creates a new one.\n   *\n   * @param   {String} name the unique name of the record\n   */\n    RecordHandler.prototype.getRecord = function (name) {\n        return new record_1.Record(this.getRecordCore(name));\n    };\n    /**\n     * Returns an existing List or creates a new one. A list is a specialised\n     * type of record that holds an array of recordNames.\n     *\n     * @param   {String} name       the unique name of the list\n     */\n    RecordHandler.prototype.getList = function (name) {\n        return new list_1.List(this.getRecordCore(name));\n    };\n    /**\n     * Returns an anonymous record. A anonymous record is effectively\n     * a wrapper that mimicks the API of a record, but allows for the\n     * underlying record to be swapped without loosing subscriptions etc.\n     *\n     * This is particularly useful when selecting from a number of similarly\n     * structured records. E.g. a list of users that can be choosen from a list\n     *\n     * The only API difference to a normal record is an additional setName( name ) method.\n     */\n    RecordHandler.prototype.getAnonymousRecord = function () {\n        return new anonymous_record_1.AnonymousRecord(this.getRecordCore);\n    };\n    /**\n     * Allows to listen for record subscriptions made by this or other clients. This\n     * is useful to create \"active\" data providers, e.g. providers that only provide\n     * data for a particular record if a user is actually interested in it\n     *\n     * @param   {String}   pattern  A combination of alpha numeric characters and wildcards( * )\n     * @param   {Function} callback\n     */\n    RecordHandler.prototype.listen = function (pattern, callback) {\n        this.listener.listen(pattern, callback);\n    };\n    /**\n     * Removes a listener that was previously registered with listenForSubscriptions\n     *\n     * @param   {String}   pattern  A combination of alpha numeric characters and wildcards( * )\n     */\n    RecordHandler.prototype.unlisten = function (pattern) {\n        this.listener.unlisten(pattern);\n    };\n    RecordHandler.prototype.snapshot = function (name, callback) {\n        var _this = this;\n        if (typeof name !== 'string' || name.length === 0) {\n            throw new Error('invalid argument: name');\n        }\n        if (callback !== undefined && typeof callback !== 'function') {\n            throw new Error('invalid argument: callback');\n        }\n        var recordCore = this.recordCores.get(name);\n        if (recordCore) {\n            if (callback) {\n                recordCore.whenReady(null, function () {\n                    callback(null, recordCore.get());\n                });\n            }\n            else {\n                return new Promise(function (resolve, reject) {\n                    recordCore.whenReady(null, function () {\n                        resolve(recordCore.get());\n                    });\n                });\n            }\n            return;\n        }\n        if (callback) {\n            this.recordServices.readRegistry.request(name, callback);\n        }\n        else {\n            return new Promise(function (resolve, reject) {\n                _this.recordServices.readRegistry.request(name, function (error, data) { return error ? reject(error) : resolve(data); });\n            });\n        }\n    };\n    RecordHandler.prototype.has = function (name, callback) {\n        var _this = this;\n        if (typeof name !== 'string' || name.length === 0) {\n            throw new Error('invalid argument: name');\n        }\n        if (callback !== undefined && typeof callback !== 'function') {\n            throw new Error('invalid argument: callback');\n        }\n        var cb;\n        if (!callback) {\n            return new Promise(function (resolve, reject) {\n                cb = function (error, version) { return error ? reject(error) : resolve(version !== -1); };\n                _this.head(name, cb);\n            });\n        }\n        cb = function (error, version) { return error ? callback(error, null) : callback(null, version !== -1); };\n        this.head(name, cb);\n    };\n    RecordHandler.prototype.head = function (name, callback) {\n        var _this = this;\n        if (typeof name !== 'string' || name.length === 0) {\n            throw new Error('invalid argument: name');\n        }\n        if (callback !== undefined && typeof callback !== 'function') {\n            throw new Error('invalid argument: callback');\n        }\n        var recordCore = this.recordCores.get(name);\n        if (recordCore) {\n            if (callback) {\n                recordCore.whenReady(null, function () {\n                    callback(null, recordCore.version);\n                });\n            }\n            else {\n                return new Promise(function (resolve, reject) {\n                    recordCore.whenReady(null, function () {\n                        resolve(recordCore.version);\n                    });\n                });\n            }\n            return;\n        }\n        if (callback) {\n            this.recordServices.headRegistry.request(name, callback);\n        }\n        else {\n            return new Promise(function (resolve, reject) {\n                _this.recordServices.headRegistry.request(name, function (error, data) { return error ? reject(error) : resolve(data); });\n            });\n        }\n    };\n    RecordHandler.prototype.setDataWithAck = function (recordName) {\n        var _this = this;\n        var rest = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            rest[_i - 1] = arguments[_i];\n        }\n        var args = utils.normalizeSetArguments(arguments, 1);\n        if (!args.callback) {\n            return new Promise(function (resolve, reject) {\n                args.callback = function (error) { return error === null ? resolve() : reject(error); };\n                _this.sendSetData(recordName, -1, args);\n            });\n        }\n        this.sendSetData(recordName, -1, args);\n    };\n    RecordHandler.prototype.setData = function (recordName) {\n        var args = utils.normalizeSetArguments(arguments, 1);\n        this.sendSetData(recordName, -1, args);\n    };\n    RecordHandler.prototype.delete = function (recordName, callback) {\n        // TODO: Use a delete service to make the logic in record core and here common\n        throw Error('Delete is not yet supported without use of a Record');\n    };\n    RecordHandler.prototype.notify = function (recordNames, callback) {\n        var _this = this;\n        if (!this.services.connection.isConnected) {\n            if (callback) {\n                callback(constants_1.EVENT.CLIENT_OFFLINE);\n                return;\n            }\n            return new Promise(function (resolve, reject) { return reject(constants_1.EVENT.CLIENT_OFFLINE); });\n        }\n        var correlationId = utils.getUid();\n        this.services.connection.sendMessage({\n            topic: constants_1.TOPIC.RECORD,\n            action: constants_1.RECORD_ACTION.NOTIFY,\n            names: recordNames,\n            correlationId: correlationId\n        });\n        if (callback) {\n            this.notifyCallbacks.set(correlationId, callback);\n        }\n        else {\n            return new Promise(function (resolve, reject) {\n                _this.notifyCallbacks.set(correlationId, function (error) { return error ? reject(error) : resolve(); });\n            });\n        }\n    };\n    RecordHandler.prototype.sendSetData = function (recordName, version, args) {\n        var path = args.path, data = args.data, callback = args.callback;\n        if (!recordName || typeof recordName !== 'string' || recordName.length === 0) {\n            throw new Error('invalid argument: recordName must be an non empty string');\n        }\n        if (!path && (data === null || typeof data !== 'object')) {\n            throw new Error('invalid argument: data must be an object when no path is provided');\n        }\n        var recordCores = this.recordCores.get(recordName);\n        if (recordCores) {\n            recordCores.set({ path: path, data: data, callback: callback });\n            return;\n        }\n        var action;\n        if (path) {\n            if (data === undefined) {\n                action = constants_1.RECORD_ACTION.ERASE;\n            }\n            else {\n                action = constants_1.RECORD_ACTION.CREATEANDPATCH;\n            }\n        }\n        else {\n            action = constants_1.RECORD_ACTION.CREATEANDUPDATE;\n        }\n        var message = {\n            topic: constants_1.TOPIC.RECORD,\n            action: action,\n            name: recordName,\n            path: path,\n            version: version,\n            parsedData: data\n        };\n        if (callback) {\n            this.recordServices.writeAckService.send(message, callback);\n        }\n        else {\n            this.services.connection.sendMessage(message);\n        }\n    };\n    RecordHandler.prototype.saveToOfflineStorage = function () {\n        this.recordCores.forEach(function (recordCore) { return recordCore.saveRecordToOffline(); });\n    };\n    RecordHandler.prototype.clearOfflineStorage = function (callback) {\n        var _this = this;\n        if (callback) {\n            this.services.storage.reset(callback);\n        }\n        else {\n            return new Promise(function (resolve, reject) {\n                _this.services.storage.reset(function (error) { return error ? reject(error) : resolve(); });\n            });\n        }\n    };\n    /**\n     * Will be called by the client for incoming messages on the RECORD topic\n     *\n     * @param   {Object} message parsed and validated deepstream message\n     */\n    RecordHandler.prototype.handle = function (message) {\n        var _this = this;\n        if ((message.action === constants_1.RECORD_ACTION.NOTIFY && message.isAck) ||\n            (message.isError && message.action === constants_1.RECORD_ACTION.RECORD_NOTIFY_ERROR)) {\n            var callback = this.notifyCallbacks.get(message.correlationId);\n            if (callback) {\n                callback(message.data || null);\n                this.notifyCallbacks.delete(message.correlationId);\n            }\n            else {\n                this.services.logger.error(message, constants_1.RECORD_ACTION.NOTIFY);\n            }\n            return;\n        }\n        if (message.isAck) {\n            this.services.timeoutRegistry.remove(message);\n            return;\n        }\n        if (message.action === constants_1.RECORD_ACTION.SUBSCRIPTION_FOR_PATTERN_FOUND ||\n            message.action === constants_1.RECORD_ACTION.SUBSCRIPTION_FOR_PATTERN_REMOVED ||\n            message.action === constants_1.RECORD_ACTION.LISTEN ||\n            message.action === constants_1.RECORD_ACTION.UNLISTEN) {\n            this.listener.handle(message);\n            return;\n        }\n        if (message.isWriteAck && message.action !== constants_1.RECORD_ACTION.VERSION_EXISTS) {\n            this.recordServices.writeAckService.recieve(message);\n            return;\n        }\n        if (message.action === constants_1.RECORD_ACTION.READ_RESPONSE || message.originalAction === constants_1.RECORD_ACTION.READ) {\n            if (message.isError) {\n                this.recordServices.readRegistry.recieve(message, constants_1.RECORD_ACTION[message.action]);\n            }\n            else {\n                this.recordServices.readRegistry.recieve(message, null, message.parsedData);\n            }\n            return;\n        }\n        if (message.action === constants_1.RECORD_ACTION.HEAD_RESPONSE_BULK) {\n            Object.keys(message.versions).forEach(function (name) {\n                _this.recordServices.headRegistry.recieve({\n                    topic: constants_1.TOPIC.RECORD,\n                    action: constants_1.RECORD_ACTION.HEAD_RESPONSE,\n                    originalAction: constants_1.RECORD_ACTION.HEAD,\n                    name: name,\n                    version: message.versions[name]\n                }, null, message.versions[name]);\n            });\n        }\n        if (message.action === constants_1.RECORD_ACTION.HEAD_RESPONSE ||\n            message.originalAction === constants_1.RECORD_ACTION.HEAD) {\n            if (message.isError) {\n                this.recordServices.headRegistry.recieve(message, constants_1.RECORD_ACTION[message.action]);\n            }\n            else {\n                this.recordServices.headRegistry.recieve(message, null, message.version);\n            }\n        }\n        var recordCore = this.recordCores.get(message.name);\n        if (recordCore) {\n            recordCore.handle(message);\n            return;\n        }\n        if (message.action === constants_1.RECORD_ACTION.VERSION_EXISTS) {\n            return;\n        }\n        if (message.action === constants_1.RECORD_ACTION.SUBSCRIPTION_HAS_PROVIDER ||\n            message.action === constants_1.RECORD_ACTION.SUBSCRIPTION_HAS_NO_PROVIDER) {\n            // record can receive a HAS_PROVIDER after discarding the record\n            return;\n        }\n        if (message.isError) {\n            this.services.logger.error(message);\n            return;\n        }\n        this.services.logger.error(message, constants_1.EVENT.UNSOLICITED_MESSAGE);\n    };\n    /**\n     * Callback for 'deleted' and 'discard' events from a record. Removes the record from\n     * the registry\n     */\n    RecordHandler.prototype.removeRecord = function (recordName) {\n        this.recordCores.delete(recordName);\n    };\n    RecordHandler.prototype.getRecordCore = function (recordName) {\n        var recordCore = this.recordCores.get(recordName);\n        if (!recordCore) {\n            recordCore = new record_core_1.RecordCore(recordName, this.services, this.options, this.recordServices, this.removeRecord);\n            this.recordCores.set(recordName, recordCore);\n        }\n        return recordCore;\n    };\n    RecordHandler.prototype.syncDirtyRecords = function () {\n        this.dirtyService.whenLoaded(this, this._syncDirtyRecords);\n    };\n    // TODO: Expose issues here, as there isn't a reason why a record core needs to exist in\n    // order to sync up\n    RecordHandler.prototype._syncDirtyRecords = function () {\n        var e_1, _a;\n        var dirtyRecords = this.dirtyService.getAll();\n        try {\n            for (var dirtyRecords_1 = __values(dirtyRecords), dirtyRecords_1_1 = dirtyRecords_1.next(); !dirtyRecords_1_1.done; dirtyRecords_1_1 = dirtyRecords_1.next()) {\n                var _b = __read(dirtyRecords_1_1.value, 1), recordName = _b[0];\n                var recordCore = this.recordCores.get(recordName);\n                if (recordCore && recordCore.references.size > 0) {\n                    // if it isn't zero the record core takes care of it\n                    continue;\n                }\n                this.services.storage.get(recordName, this.sendUpdatedData);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (dirtyRecords_1_1 && !dirtyRecords_1_1.done && (_a = dirtyRecords_1.return)) _a.call(dirtyRecords_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    RecordHandler.prototype.sendUpdatedData = function (recordName, version, data) {\n        var _this = this;\n        if (version === -1) {\n            // deleted locally, how to merge?\n            this.services.logger.warn({ topic: constants_1.TOPIC.RECORD }, constants_1.RECORD_ACTION.DELETE, \"Deleted record while offline, can't resolve\");\n            return;\n        }\n        var callback = function (error, name) {\n            if (!error) {\n                _this.dirtyService.setDirty(name, false);\n            }\n            else {\n                _this.recordServices.readRegistry.register(name, _this, function (message) {\n                    _this.recordServices.mergeStrategy.merge(message, version, data, _this.onMergeCompleted, _this);\n                });\n            }\n        };\n        this.sendSetData(recordName, version, { data: data, callback: callback });\n    };\n    RecordHandler.prototype.onMergeCompleted = function (error, _a, mergeData) {\n        var name = _a.name, version = _a.version;\n        this.sendSetData(name, version + 1, { data: mergeData });\n    };\n    RecordHandler.prototype.getBulkSubscriptionService = function (bulkSubscribe) {\n        return new bulk_subscription_service_1.BulkSubscriptionService(this.services, this.options.subscriptionInterval, constants_1.TOPIC.RECORD, bulkSubscribe, constants_1.RECORD_ACTION.UNSUBSCRIBE, this.onBulkSubscriptionSent);\n    };\n    RecordHandler.prototype.onBulkSubscriptionSent = function (message) {\n        if (!message.names) {\n            this.services.timeoutRegistry.add({ message: message });\n        }\n    };\n    return RecordHandler;\n}());\nexports.RecordHandler = RecordHandler;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/record/record-handler.ts?");

/***/ }),

/***/ "./src/record/record.ts":
/*!******************************!*\
  !*** ./src/record/record.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Record = void 0;\nvar utils = __webpack_require__(/*! ../util/utils */ \"./src/util/utils.ts\");\nvar constants_1 = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\nvar emitter_1 = __webpack_require__(/*! ../util/emitter */ \"./src/util/emitter.ts\");\nvar Record = /** @class */ (function (_super) {\n    __extends(Record, _super);\n    function Record(record) {\n        var _this = _super.call(this) || this;\n        _this.record = record;\n        _this.debugId = _this.record.getDebugId();\n        _this.subscriptions = [];\n        _this.record.on(constants_1.EVENT.RECORD_READY, _this.emit.bind(_this, constants_1.EVENT.RECORD_READY, _this), _this);\n        _this.record.on(constants_1.EVENT.RECORD_DISCARDED, _this.emit.bind(_this, constants_1.EVENT.RECORD_DISCARDED), _this);\n        _this.record.on(constants_1.EVENT.RECORD_DELETED, _this.emit.bind(_this, constants_1.EVENT.RECORD_DELETED), _this);\n        _this.record.on(constants_1.EVENT.RECORD_ERROR, _this.emit.bind(_this, constants_1.EVENT.RECORD_ERROR), _this);\n        _this.record.addReference(_this);\n        return _this;\n    }\n    Object.defineProperty(Record.prototype, \"name\", {\n        get: function () {\n            return this.record.name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Record.prototype, \"isReady\", {\n        get: function () {\n            return this.record.isReady;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Record.prototype, \"version\", {\n        get: function () {\n            return this.record.version;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Record.prototype, \"hasProvider\", {\n        get: function () {\n            return this.record.hasProvider;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Record.prototype.whenReady = function (callback) {\n        if (callback) {\n            this.record.whenReady(this, callback);\n        }\n        else {\n            return this.record.whenReady(this);\n        }\n    };\n    Record.prototype.get = function (path) {\n        return this.record.get(path);\n    };\n    Record.prototype.set = function (dataOrPath, dataOrCallback, callback) {\n        return this.record.set(utils.normalizeSetArguments(arguments));\n    };\n    Record.prototype.setWithAck = function (pathOrData, dataOrCallback, callback) {\n        return this.record.setWithAck(utils.normalizeSetArguments(arguments));\n    };\n    /**\n     * Deletes a path from the record. Equivalent to doing `record.set(path, undefined)`\n     *\n     * @param {String} path The path to be deleted\n     */\n    Record.prototype.erase = function (path) {\n        if (!path) {\n            throw new Error('unable to erase record data without path, consider using `delete`');\n        }\n        this.set(path, undefined);\n    };\n    Record.prototype.eraseWithAck = function (path, callback) {\n        if (!path) {\n            throw new Error('unable to erase record data without path, consider using `delete`');\n        }\n        if (callback) {\n            this.setWithAck(path, undefined, callback);\n        }\n        else {\n            return this.setWithAck(path, undefined);\n        }\n    };\n    Record.prototype.subscribe = function (pathOrCallback, callbackOrTriggerNow, triggerNow) {\n        var parameters = utils.normalizeArguments(arguments);\n        this.subscriptions.push(parameters);\n        this.record.subscribe(parameters, this);\n    };\n    Record.prototype.unsubscribe = function (pathOrCallback, callback) {\n        var parameters = utils.normalizeArguments(arguments);\n        this.subscriptions = this.subscriptions.filter(function (subscription) {\n            if (!parameters.callback && (subscription.path === parameters.path))\n                return false;\n            if (parameters.callback && (subscription.path === parameters.path && subscription.callback === parameters.callback))\n                return false;\n            return true;\n        });\n        this.record.unsubscribe(parameters, this);\n    };\n    Record.prototype.discard = function () {\n        for (var i = 0; i < this.subscriptions.length; i++) {\n            this.record.unsubscribe(this.subscriptions[i], this);\n        }\n        this.record.removeReference(this);\n        this.record.removeContext(this);\n    };\n    Record.prototype.delete = function (callback) {\n        return this.record.delete(callback);\n    };\n    Record.prototype.setMergeStrategy = function (mergeStrategy) {\n        this.record.setMergeStrategy(mergeStrategy);\n    };\n    return Record;\n}(emitter_1.Emitter));\nexports.Record = Record;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/record/record.ts?");

/***/ }),

/***/ "./src/record/single-notifier.ts":
/*!***************************************!*\
  !*** ./src/record/single-notifier.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SingleNotifier = void 0;\nvar constants_1 = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\n/**\n * Provides a scaffold for subscriptionless requests to deepstream, such as the SNAPSHOT\n * and HAS functionality. The SingleNotifier multiplexes all the client requests so\n * that they can can be notified at once, and also includes reconnection funcionality\n * incase the connection drops.\n *\n * @param {Services} services          The deepstream client\n * @param {Options} options     Function to call to allow resubscribing\n *\n * @constructor\n */\nvar SingleNotifier = /** @class */ (function () {\n    function SingleNotifier(services, action, timeoutDuration) {\n        this.services = services;\n        this.action = action;\n        this.requests = new Map();\n        this.internalRequests = new Map();\n        this.limboQueue = [];\n        this.services.connection.onLost(this.onConnectionLost.bind(this));\n        this.services.connection.onExitLimbo(this.onExitLimbo.bind(this));\n        this.services.connection.onReestablished(this.onConnectionReestablished.bind(this));\n    }\n    /**\n     * Add a request. If one has already been made it will skip the server request\n     * and multiplex the response\n     *\n     * @param {String} name An identifier for the request, e.g. a record name\n     * @param {Object} response An object with property `callback` or `resolve` and `reject`\n     *\n     * @public\n     * @returns {void}\n     */\n    SingleNotifier.prototype.request = function (name, callback) {\n        var req = this.requests.get(name);\n        if (req) {\n            req.push(callback);\n            return;\n        }\n        this.requests.set(name, [callback]);\n        var message = {\n            topic: constants_1.TOPIC.RECORD,\n            action: this.action,\n            name: name\n        };\n        if (this.services.connection.isConnected) {\n            this.services.connection.sendMessage(message);\n            this.services.timeoutRegistry.add({ message: message });\n        }\n        else if (this.services.connection.isInLimbo) {\n            this.limboQueue.push(message);\n        }\n        else {\n            this.requests.delete(name);\n            callback(constants_1.EVENT.CLIENT_OFFLINE);\n        }\n    };\n    /**\n     * Adds a callback to a (possibly) inflight request that will be called\n     * on the response.\n     */\n    SingleNotifier.prototype.register = function (name, context, callback) {\n        var request = this.internalRequests.get(name);\n        if (!request) {\n            this.internalRequests.set(name, [{ callback: callback, context: context }]);\n        }\n        else {\n            request.push({ callback: callback, context: context });\n        }\n    };\n    SingleNotifier.prototype.recieve = function (message, error, data) {\n        this.services.timeoutRegistry.remove(message);\n        var name = message.name;\n        var responses = this.requests.get(name) || [];\n        var internalResponses = this.internalRequests.get(name) || [];\n        if (!responses && !internalResponses) {\n            return;\n        }\n        for (var i = 0; i < internalResponses.length; i++) {\n            internalResponses[i].callback.call(internalResponses[i].context, message);\n        }\n        this.internalRequests.delete(name);\n        // todo we can clean this up and do cb = (error, data) => error ? reject(error) : resolve()\n        for (var i = 0; i < responses.length; i++) {\n            responses[i](error, data);\n        }\n        this.requests.delete(name);\n        return;\n    };\n    SingleNotifier.prototype.onConnectionLost = function () {\n        this.requests.forEach(function (responses) {\n            responses.forEach(function (response) { return response(constants_1.EVENT.CLIENT_OFFLINE); });\n        });\n        this.requests.clear();\n    };\n    SingleNotifier.prototype.onExitLimbo = function () {\n        for (var i = 0; i < this.limboQueue.length; i++) {\n            var message = this.limboQueue[i];\n            var requests = this.requests.get(message.name);\n            if (requests) {\n                requests.forEach(function (cb) { return cb(constants_1.EVENT.CLIENT_OFFLINE); });\n            }\n        }\n        this.requests.clear();\n        this.limboQueue = [];\n    };\n    SingleNotifier.prototype.onConnectionReestablished = function () {\n        for (var i = 0; i < this.limboQueue.length; i++) {\n            var message = this.limboQueue[i];\n            this.services.connection.sendMessage(message);\n            this.services.timeoutRegistry.add({ message: message });\n        }\n    };\n    return SingleNotifier;\n}());\nexports.SingleNotifier = SingleNotifier;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/record/single-notifier.ts?");

/***/ }),

/***/ "./src/record/write-ack-service.ts":
/*!*****************************************!*\
  !*** ./src/record/write-ack-service.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WriteAcknowledgementService = void 0;\nvar constants_1 = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\nvar WriteAcknowledgementService = /** @class */ (function () {\n    function WriteAcknowledgementService(services) {\n        this.services = services;\n        this.responses = new Map();\n        this.count = 1;\n        this.services.connection.onLost(this.onConnectionLost.bind(this));\n    }\n    /**\n     * Send message with write ack callback.\n     */\n    WriteAcknowledgementService.prototype.send = function (message, callback) {\n        if (this.services.connection.isConnected === false) {\n            this.services.timerRegistry.requestIdleCallback(callback.bind(this, constants_1.EVENT.CLIENT_OFFLINE, message.name));\n            return;\n        }\n        var correlationId = this.count.toString();\n        this.responses.set(correlationId, callback);\n        this.services.connection.sendMessage(__assign(__assign({}, message), { correlationId: correlationId, isWriteAck: true }));\n        this.count++;\n    };\n    WriteAcknowledgementService.prototype.recieve = function (message) {\n        var id = message.correlationId;\n        var response = this.responses.get(id);\n        if (!response ||\n            (message.action !== constants_1.RECORD_ACTION.WRITE_ACKNOWLEDGEMENT && !message.isError && !message.isWriteAck)) {\n            return;\n        }\n        if (message.action === constants_1.RECORD_ACTION.VERSION_EXISTS) {\n            response(message.reason || 'Write failed due to conflict', message.name);\n        }\n        else {\n            message.isError\n                ? response(constants_1.RECORD_ACTION[message.action], message.name)\n                : response(null, message.name);\n        }\n        this.responses.delete(id);\n    };\n    WriteAcknowledgementService.prototype.onConnectionLost = function () {\n        this.responses.forEach(function (response) { return response(constants_1.EVENT.CLIENT_OFFLINE); });\n        this.responses.clear();\n    };\n    return WriteAcknowledgementService;\n}());\nexports.WriteAcknowledgementService = WriteAcknowledgementService;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/record/write-ack-service.ts?");

/***/ }),

/***/ "./src/rpc/rpc-handler.ts":
/*!********************************!*\
  !*** ./src/rpc/rpc-handler.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RPCHandler = void 0;\nvar constants_1 = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\nvar rpc_1 = __webpack_require__(/*! ../rpc/rpc */ \"./src/rpc/rpc.ts\");\nvar rpc_response_1 = __webpack_require__(/*! ../rpc/rpc-response */ \"./src/rpc/rpc-response.ts\");\nvar utils_1 = __webpack_require__(/*! ../util/utils */ \"./src/util/utils.ts\");\nvar bulk_subscription_service_1 = __webpack_require__(/*! ../util/bulk-subscription-service */ \"./src/util/bulk-subscription-service.ts\");\nvar RPCHandler = /** @class */ (function () {\n    function RPCHandler(services, options) {\n        this.services = services;\n        this.options = options;\n        this.rpcs = new Map();\n        this.providers = new Map();\n        this.limboQueue = [];\n        this.bulkSubscription = new bulk_subscription_service_1.BulkSubscriptionService(this.services, options.subscriptionInterval, constants_1.TOPIC.RPC, constants_1.RPC_ACTION.PROVIDE, constants_1.RPC_ACTION.UNPROVIDE, this.onBulkSubscriptionSent.bind(this));\n        this.services.connection.registerHandler(constants_1.TOPIC.RPC, this.handle.bind(this));\n        this.services.connection.onReestablished(this.onConnectionReestablished.bind(this));\n        this.services.connection.onExitLimbo(this.onExitLimbo.bind(this));\n        this.services.connection.onLost(this.onConnectionLost.bind(this));\n    }\n    /**\n     * Returns the names of all the RPCs provided\n     */\n    RPCHandler.prototype.providerNames = function () {\n        return __spread(this.providers.keys());\n    };\n    /**\n     * Registers a callback function as a RPC provider. If another connected client calls\n     * client.rpc.make() the request will be routed to this method\n     *\n     * The callback will be invoked with two arguments:\n     *     {Mixed} data The data passed to the client.rpc.make function\n     *     {RpcResponse} rpcResponse An object with methods to response,\n     *                               acknowledge or reject the request\n     *\n     * Only one callback can be registered for a RPC at a time\n     *\n     * Please note: Deepstream tries to deliver data in its original format.\n     * Data passed to client.rpc.make as a String will arrive as a String,\n     * numbers or implicitly JSON serialized objects will arrive in their\n     * respective format as well\n     */\n    RPCHandler.prototype.provide = function (name, callback) {\n        if (typeof name !== 'string' || name.length === 0) {\n            throw new Error('invalid argument name');\n        }\n        if (this.providers.has(name)) {\n            throw new Error(\"RPC \" + name + \" already registered\");\n        }\n        if (typeof callback !== 'function') {\n            throw new Error('invalid argument callback');\n        }\n        this.providers.set(name, callback);\n        if (this.services.connection.isConnected) {\n            this.bulkSubscription.subscribe(name);\n        }\n    };\n    /**\n     * Unregisters this client as a provider for a remote procedure call\n     */\n    RPCHandler.prototype.unprovide = function (name) {\n        if (typeof name !== 'string' || name.length === 0) {\n            throw new Error('invalid argument name');\n        }\n        if (!this.providers.has(name)) {\n            this.services.logger.warn({\n                topic: constants_1.TOPIC.RPC,\n                action: constants_1.RPC_ACTION.NOT_PROVIDED,\n                name: name\n            });\n            return;\n        }\n        this.providers.delete(name);\n        if (this.services.connection.isConnected) {\n            this.bulkSubscription.unsubscribe(name);\n        }\n    };\n    RPCHandler.prototype.make = function (name, data, callback) {\n        var _this = this;\n        if (typeof name !== 'string' || name.length === 0) {\n            throw new Error('invalid argument name');\n        }\n        if (callback && typeof callback !== 'function') {\n            throw new Error('invalid argument callback');\n        }\n        var correlationId = utils_1.getUid();\n        if (this.services.connection.isConnected) {\n            if (callback) {\n                this.rpcs.set(correlationId, new rpc_1.RPC(name, correlationId, data, callback, this.options, this.services));\n                return;\n            }\n            return new Promise(function (resolve, reject) {\n                _this.rpcs.set(correlationId, new rpc_1.RPC(name, correlationId, data, function (error, result) { return error ? reject(error) : resolve(result); }, _this.options, _this.services));\n            });\n        }\n        else if (this.services.connection.isInLimbo) {\n            if (callback) {\n                this.limboQueue.push({ correlationId: correlationId, name: name, data: data, callback: callback });\n            }\n            else {\n                return new Promise(function (resolve, reject) {\n                    _this.limboQueue.push({ correlationId: correlationId, name: name, data: data, callback: function (error, result) { return error ? reject(error) : resolve(result); } });\n                });\n            }\n        }\n        else {\n            if (callback) {\n                callback(constants_1.EVENT.CLIENT_OFFLINE);\n            }\n            else {\n                return Promise.reject(constants_1.EVENT.CLIENT_OFFLINE);\n            }\n        }\n    };\n    /**\n     * Handles incoming rpc REQUEST messages. Instantiates a new response object\n     * and invokes the provider callback or rejects the request if no rpc provider\n     * is present (which shouldn't really happen, but might be the result of a race condition\n     * if this client sends a unprovide message whilst an incoming request is already in flight)\n     */\n    RPCHandler.prototype.respondToRpc = function (message) {\n        var provider = this.providers.get(message.name);\n        if (provider) {\n            provider(message.parsedData, new rpc_response_1.RPCResponse(message, this.options, this.services));\n        }\n        else {\n            this.services.connection.sendMessage({\n                topic: constants_1.TOPIC.RPC,\n                action: constants_1.RPC_ACTION.REJECT,\n                name: message.name,\n                correlationId: message.correlationId\n            });\n        }\n    };\n    /**\n     * Distributes incoming messages from the server\n     * based on their action\n     */\n    RPCHandler.prototype.handle = function (message) {\n        // RPC Requests\n        if (message.action === constants_1.RPC_ACTION.REQUEST) {\n            this.respondToRpc(message);\n            return;\n        }\n        // RPC subscription Acks\n        if (message.isAck) {\n            this.services.timeoutRegistry.remove(message);\n            return;\n        }\n        // handle auth/denied subscription errors\n        if (message.action === constants_1.RPC_ACTION.MESSAGE_PERMISSION_ERROR || message.action === constants_1.RPC_ACTION.MESSAGE_DENIED) {\n            if (message.originalAction === constants_1.RPC_ACTION.PROVIDE || message.originalAction === constants_1.RPC_ACTION.UNPROVIDE) {\n                this.services.timeoutRegistry.remove(message);\n                this.providers.delete(message.name);\n                this.services.logger.error(message);\n                return;\n            }\n            if (message.originalAction === constants_1.RPC_ACTION.REQUEST) {\n                var invalidRPC = this.getRPC(message);\n                if (invalidRPC) {\n                    invalidRPC.error(constants_1.RPC_ACTION[message.action]);\n                    this.rpcs.delete(message.correlationId);\n                    return;\n                }\n            }\n        }\n        // RPC Responses\n        var rpc = this.getRPC(message);\n        if (rpc) {\n            if (message.action === constants_1.RPC_ACTION.ACCEPT) {\n                rpc.accept();\n                return;\n            }\n            if (message.action === constants_1.RPC_ACTION.RESPONSE) {\n                rpc.respond(message.parsedData);\n            }\n            else if (message.action === constants_1.RPC_ACTION.REQUEST_ERROR) {\n                rpc.error(message.parsedData);\n            }\n            else if (message.action === constants_1.RPC_ACTION.RESPONSE_TIMEOUT ||\n                message.action === constants_1.RPC_ACTION.ACCEPT_TIMEOUT ||\n                message.action === constants_1.RPC_ACTION.NO_RPC_PROVIDER) {\n                rpc.error(constants_1.RPC_ACTION[message.action]);\n            }\n            this.rpcs.delete(message.correlationId);\n        }\n    };\n    RPCHandler.prototype.getRPC = function (message) {\n        var rpc = this.rpcs.get(message.correlationId);\n        if (rpc === undefined) {\n            this.services.logger.error(message, constants_1.EVENT.UNKNOWN_CORRELATION_ID);\n        }\n        return rpc;\n    };\n    RPCHandler.prototype.onConnectionReestablished = function () {\n        this.bulkSubscription.subscribeList(__spread(this.providers.keys()));\n        for (var i = 0; i < this.limboQueue.length; i++) {\n            var _a = this.limboQueue[i], correlationId = _a.correlationId, name_1 = _a.name, data = _a.data, callback = _a.callback;\n            this.rpcs.set(correlationId, new rpc_1.RPC(name_1, correlationId, data, callback, this.options, this.services));\n        }\n        this.limboQueue = [];\n    };\n    RPCHandler.prototype.onExitLimbo = function () {\n        for (var i = 0; i < this.limboQueue.length; i++) {\n            this.limboQueue[i].callback(constants_1.EVENT.CLIENT_OFFLINE);\n        }\n        this.limboQueue = [];\n    };\n    RPCHandler.prototype.onConnectionLost = function () {\n        this.rpcs.forEach(function (rpc) {\n            rpc.error(constants_1.EVENT.CLIENT_OFFLINE);\n        });\n        this.rpcs.clear();\n    };\n    RPCHandler.prototype.onBulkSubscriptionSent = function (message) {\n        this.services.timeoutRegistry.add({ message: message });\n    };\n    return RPCHandler;\n}());\nexports.RPCHandler = RPCHandler;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/rpc/rpc-handler.ts?");

/***/ }),

/***/ "./src/rpc/rpc-response.ts":
/*!*********************************!*\
  !*** ./src/rpc/rpc-response.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RPCResponse = void 0;\nvar constants_1 = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\n/**\n * This class represents a single remote procedure\n * call made from the client to the server. It's main function\n * is to encapsulate the logic around timeouts and to convert the\n * incoming response data\n */\nvar RPCResponse = /** @class */ (function () {\n    function RPCResponse(message, options, services) {\n        this.name = message.name;\n        this.correlationId = message.correlationId;\n        this.services = services;\n        this.isAccepted = false;\n        this.isComplete = false;\n        this.autoAccept = true;\n        this.services.timerRegistry.requestIdleCallback(this.performAutoAck.bind(this));\n    }\n    /**\n     * Acknowledges the receipt of the request. This\n     * will happen implicitly unless the request callback\n     * explicitly sets autoAck to false\n     */\n    RPCResponse.prototype.accept = function () {\n        if (this.isAccepted === false) {\n            this.services.connection.sendMessage({\n                topic: constants_1.TOPIC.RPC,\n                action: constants_1.RPC_ACTION.ACCEPT,\n                name: this.name,\n                correlationId: this.correlationId\n            });\n            this.isAccepted = true;\n        }\n    };\n    /**\n     * Reject the request. This might be necessary if the client\n     * is already processing a large number of requests. If deepstream\n     * receives a rejection message it will try to route the request to\n     * another provider - or return a NO_RPC_PROVIDER error if there are no\n     * providers left\n     */\n    RPCResponse.prototype.reject = function () {\n        if (this.isComplete === true) {\n            throw new Error(\"Rpc \" + this.name + \" already completed\");\n        }\n        this.autoAccept = false;\n        this.isComplete = true;\n        this.isAccepted = true;\n        this.services.connection.sendMessage({\n            topic: constants_1.TOPIC.RPC,\n            action: constants_1.RPC_ACTION.REJECT,\n            name: this.name,\n            correlationId: this.correlationId\n        });\n    };\n    /**\n     * Notifies the server that an error has occured while trying to process the request.\n     * This will complete the rpc.\n     */\n    RPCResponse.prototype.error = function (error) {\n        if (this.isComplete === true) {\n            throw new Error(\"Rpc \" + this.name + \" already completed\");\n        }\n        this.autoAccept = false;\n        this.isComplete = true;\n        this.isAccepted = true;\n        this.services.connection.sendMessage({\n            topic: constants_1.TOPIC.RPC,\n            action: constants_1.RPC_ACTION.REQUEST_ERROR,\n            name: this.name,\n            correlationId: this.correlationId,\n            parsedData: error\n        });\n    };\n    /**\n     * Completes the request by sending the response data\n     * to the server. If data is an array or object it will\n     * automatically be serialised.\n     * If autoAck is disabled and the response is sent before\n     * the ack message the request will still be completed and the\n     * ack message ignored\n     */\n    RPCResponse.prototype.send = function (data) {\n        if (this.isComplete === true) {\n            throw new Error(\"Rpc \" + this.name + \" already completed\");\n        }\n        this.accept();\n        this.services.connection.sendMessage({\n            topic: constants_1.TOPIC.RPC,\n            action: constants_1.RPC_ACTION.RESPONSE,\n            name: this.name,\n            correlationId: this.correlationId,\n            parsedData: data\n        });\n        this.isComplete = true;\n    };\n    /**\n     * Callback for the autoAck timeout. Executes ack\n     * if autoAck is not disabled\n     */\n    RPCResponse.prototype.performAutoAck = function () {\n        if (this.autoAccept === true) {\n            this.accept();\n        }\n    };\n    return RPCResponse;\n}());\nexports.RPCResponse = RPCResponse;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/rpc/rpc-response.ts?");

/***/ }),

/***/ "./src/rpc/rpc.ts":
/*!************************!*\
  !*** ./src/rpc/rpc.ts ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RPC = void 0;\nvar constants_1 = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\n/**\n * This class represents a single remote procedure\n * call made from the client to the server. It's main function\n * is to encapsulate the logic and to convert the\n * incoming response data\n */\nvar RPC = /** @class */ (function () {\n    function RPC(name, correlationId, data, response, options, services) {\n        this.response = response;\n        this.services = services;\n        var message = {\n            topic: constants_1.TOPIC.RPC,\n            action: constants_1.RPC_ACTION.REQUEST,\n            correlationId: correlationId,\n            name: name,\n            parsedData: data\n        };\n        this.services.connection.sendMessage(message);\n    }\n    /**\n     * Called once an ack message is received from the server\n     */\n    RPC.prototype.accept = function () {\n    };\n    /**\n     * Called once a response message is received from the server.\n     */\n    RPC.prototype.respond = function (data) {\n        this.response(null, data);\n    };\n    /**\n     * Called once an error is received from the server.\n     */\n    RPC.prototype.error = function (data) {\n        this.response(data);\n    };\n    return RPC;\n}());\nexports.RPC = RPC;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/rpc/rpc.ts?");

/***/ }),

/***/ "./src/storage/indexdb-storage-service.ts":
/*!************************************************!*\
  !*** ./src/storage/indexdb-storage-service.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Storage = void 0;\nvar Operation;\n(function (Operation) {\n    Operation[Operation[\"GET\"] = 0] = \"GET\";\n    Operation[Operation[\"SET\"] = 1] = \"SET\";\n    Operation[Operation[\"DELETE\"] = 2] = \"DELETE\";\n})(Operation || (Operation = {}));\nvar Storage = /** @class */ (function () {\n    function Storage(options) {\n        var _this = this;\n        this.options = options;\n        this.isReady = false;\n        this.queuedRequests = new Map();\n        this.flushTimeout = null;\n        if (typeof indexedDB === 'undefined' || indexedDB === null) {\n            throw new Error('IndexDB currently not supported when deepstream in node');\n        }\n        this.flush = this.flush.bind(this);\n        var _a = options.indexdb, objectStoreNames = _a.objectStoreNames, storageDatabaseName = _a.storageDatabaseName, defaultObjectStoreName = _a.defaultObjectStoreName, primaryKey = _a.primaryKey;\n        if (!objectStoreNames.includes(defaultObjectStoreName)) {\n            objectStoreNames.push(defaultObjectStoreName);\n        }\n        var dbVersion = options.indexdb.dbVersion;\n        if (options.indexdb.autoVersion) {\n            var previousDBStructureSerialized = localStorage.getItem(\"deepstream-db/\" + storageDatabaseName);\n            if (previousDBStructureSerialized) {\n                var previousDBStructure = JSON.parse(previousDBStructureSerialized);\n                var objectStoreChanged = (previousDBStructure.objectStoreNames.length !== objectStoreNames.length ||\n                    previousDBStructure.objectStoreNames.some(function (name) { return !objectStoreNames.includes(name); }));\n                if (objectStoreChanged) {\n                    dbVersion = previousDBStructure.dbVersion + 1;\n                }\n                else {\n                    dbVersion = previousDBStructure.dbVersion;\n                }\n            }\n            else {\n                dbVersion = 1;\n            }\n        }\n        var request = indexedDB.open(storageDatabaseName, dbVersion);\n        request.onerror = function (event) {\n            console.error(\"Error opening index \" + storageDatabaseName, event);\n            // TODO: Workflow for lack of permissions to use indexDB\n        };\n        request.onsuccess = function (event) {\n            _this.db = event.target.result;\n            _this.onReady();\n        };\n        request.onupgradeneeded = function () {\n            var db = request.result;\n            objectStoreNames.forEach(function (objectStoreName) {\n                if (!db.objectStoreNames.contains(objectStoreName)) {\n                    db.createObjectStore(objectStoreName, { keyPath: primaryKey });\n                }\n            });\n            for (var i = 0; i < db.objectStoreNames.length; i++) {\n                if (objectStoreNames.includes(db.objectStoreNames[i]) === false) {\n                    db.deleteObjectStore(db.objectStoreNames[i]);\n                }\n            }\n            if (options.indexdb.autoVersion) {\n                localStorage.setItem(\"deepstream-db/\" + storageDatabaseName, JSON.stringify({ dbVersion: dbVersion, objectStoreNames: objectStoreNames }));\n            }\n        };\n    }\n    Storage.prototype.get = function (recordName, callback) {\n        var ignore = this.options.indexdb.ignorePrefixes.some(function (prefix) { return recordName.startsWith(prefix); });\n        if (ignore) {\n            callback(recordName, -1, null);\n            return;\n        }\n        this.insertRequest({ recordName: recordName, callback: callback, operation: Operation.GET });\n    };\n    Storage.prototype.set = function (recordName, version, data, callback) {\n        var ignore = this.options.indexdb.ignorePrefixes.some(function (prefix) { return recordName.startsWith(prefix); });\n        if (ignore) {\n            callback(null, recordName);\n            return;\n        }\n        this.insertRequest({ recordName: recordName, version: version, callback: callback, data: data, operation: Operation.SET });\n    };\n    Storage.prototype.delete = function (recordName, callback) {\n        var ignore = this.options.indexdb.ignorePrefixes.some(function (prefix) { return recordName.startsWith(prefix); });\n        if (ignore) {\n            callback(null, recordName);\n            return;\n        }\n        this.insertRequest({ recordName: recordName, callback: callback, operation: Operation.DELETE });\n    };\n    Storage.prototype.reset = function (callback) {\n        var _this = this;\n        if (this.db) {\n            this.db.close();\n            this.db = null;\n        }\n        var deleteDBReqeust = indexedDB.deleteDatabase(this.options.indexdb.storageDatabaseName);\n        deleteDBReqeust.onblocked = function () { return setTimeout(function () { return _this.reset(callback); }, 1000); };\n        deleteDBReqeust.onsuccess = function () { return callback(null); };\n        deleteDBReqeust.onerror = function (event) {\n            var errorMessage = \"Error deleting database \" + _this.options.indexdb.storageDatabaseName;\n            console.error(errorMessage, event);\n            callback(errorMessage);\n        };\n    };\n    Storage.prototype.registerFlush = function () {\n        if (this.isReady && !this.flushTimeout) {\n            this.flushTimeout = setTimeout(this.flush, this.options.indexdb.flushTimeout);\n        }\n    };\n    Storage.prototype.flush = function () {\n        var e_1, _a;\n        var _this = this;\n        var transaction = this.db.transaction(this.queuedRequests.keys(), 'readwrite');\n        var _loop_1 = function (key, queuedRequests) {\n            var objectStore = transaction.objectStore(key);\n            queuedRequests.forEach(function (_a) {\n                var _b;\n                var operation = _a.operation, recordName = _a.recordName, version = _a.version, data = _a.data, callback = _a.callback;\n                switch (operation) {\n                    case Operation.GET: {\n                        var request_1 = objectStore.get(recordName);\n                        // The api doesn't support get errors yet!\n                        request_1.onerror = function (event) {\n                            throw new Error(\"Requesting record \" + recordName + \" failed\");\n                        };\n                        request_1.onsuccess = function () {\n                            if (request_1.result) {\n                                callback(recordName, request_1.result.version, request_1.result.data);\n                            }\n                            else {\n                                callback(recordName, -1, null);\n                            }\n                        };\n                        break;\n                    }\n                    case Operation.DELETE: {\n                        var request = objectStore.delete(recordName);\n                        request.onsuccess = function () { return callback(null); };\n                        request.onerror = function (event) { return callback(event.errorCode); };\n                        break;\n                    }\n                    case Operation.SET: {\n                        var request = objectStore.put((_b = {}, _b[_this.options.indexdb.primaryKey] = recordName, _b.version = version, _b.data = data, _b));\n                        request.onsuccess = function () { return callback(null); };\n                        request.onerror = function (event) { return callback(event.errorCode); };\n                        break;\n                    }\n                }\n            });\n        };\n        try {\n            for (var _b = __values(this.queuedRequests), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = __read(_c.value, 2), key = _d[0], queuedRequests = _d[1];\n                _loop_1(key, queuedRequests);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        this.queuedRequests.clear();\n        this.flushTimeout = null;\n    };\n    Storage.prototype.onReady = function () {\n        this.isReady = true;\n        this.flush();\n    };\n    Storage.prototype.insertRequest = function (request) {\n        var firstSlashIndex = request.recordName.indexOf('/');\n        var objectStoreName;\n        if (firstSlashIndex > -1) {\n            objectStoreName = request.recordName.substring(0, firstSlashIndex);\n            if (this.options.indexdb.objectStoreNames.indexOf(objectStoreName) === -1) {\n                console.error(\"Object store names need to be predefined, missing \" + objectStoreName + \". Using default objectStore instead.\");\n                objectStoreName = this.options.indexdb.defaultObjectStoreName;\n            }\n            else {\n                request.recordName = request.recordName.substring(firstSlashIndex + 1, request.recordName.length);\n            }\n        }\n        else {\n            objectStoreName = this.options.indexdb.defaultObjectStoreName;\n        }\n        var requests = this.queuedRequests.get(objectStoreName);\n        if (requests === undefined) {\n            this.queuedRequests.set(objectStoreName, [request]);\n        }\n        else {\n            requests.push(request);\n        }\n        this.registerFlush();\n    };\n    return Storage;\n}());\nexports.Storage = Storage;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/storage/indexdb-storage-service.ts?");

/***/ }),

/***/ "./src/storage/noop-storage-service.ts":
/*!*********************************************!*\
  !*** ./src/storage/noop-storage-service.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NoopStorage = void 0;\nvar NoopStorage = /** @class */ (function () {\n    function NoopStorage() {\n        this.isReady = true;\n    }\n    NoopStorage.prototype.get = function (recordName, callback) {\n        setTimeout(callback.bind(this, recordName, -1, null), 0);\n    };\n    NoopStorage.prototype.set = function (recordName, version, data, callback) {\n        setTimeout(callback, 0);\n    };\n    NoopStorage.prototype.delete = function (recordName, callback) {\n        setTimeout(callback, 0);\n    };\n    NoopStorage.prototype.reset = function (callback) {\n        callback(null);\n    };\n    return NoopStorage;\n}());\nexports.NoopStorage = NoopStorage;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/storage/noop-storage-service.ts?");

/***/ }),

/***/ "./src/util/bulk-subscription-service.ts":
/*!***********************************************!*\
  !*** ./src/util/bulk-subscription-service.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BulkSubscriptionService = void 0;\nvar BulkSubscriptionService = /** @class */ (function () {\n    function BulkSubscriptionService(services, subscriptionInterval, topic, subscribeBulkAction, unsubscribeBulkAction, onSubscriptionSent) {\n        if (onSubscriptionSent === void 0) { onSubscriptionSent = (function () { }); }\n        this.services = services;\n        this.subscriptionInterval = subscriptionInterval;\n        this.topic = topic;\n        this.subscribeBulkAction = subscribeBulkAction;\n        this.unsubscribeBulkAction = unsubscribeBulkAction;\n        this.onSubscriptionSent = onSubscriptionSent;\n        this.subscribeNames = new Set();\n        this.unsubscribeNames = new Set();\n        this.timerRef = -1;\n        this.correlationId = 0;\n        this.services.connection.onLost(this.onLost.bind(this));\n    }\n    BulkSubscriptionService.prototype.subscribe = function (name) {\n        if (this.subscriptionInterval > 0) {\n            if (this.unsubscribeNames.has(name)) {\n                this.unsubscribeNames.delete(name);\n            }\n            else {\n                this.subscribeNames.add(name);\n                this.registerFlush();\n            }\n            return;\n        }\n        var message = {\n            topic: this.topic,\n            action: this.subscribeBulkAction,\n            names: [name],\n            correlationId: (this.correlationId++).toString()\n        };\n        this.services.connection.sendMessage(message);\n        this.onSubscriptionSent(message);\n    };\n    BulkSubscriptionService.prototype.subscribeList = function (users) {\n        users.forEach(this.subscribe.bind(this));\n    };\n    BulkSubscriptionService.prototype.unsubscribe = function (name) {\n        if (this.subscriptionInterval > 0) {\n            if (this.subscribeNames.has(name)) {\n                this.subscribeNames.delete(name);\n            }\n            else {\n                this.unsubscribeNames.add(name);\n                this.registerFlush();\n            }\n            return;\n        }\n        var message = {\n            topic: this.topic,\n            action: this.unsubscribeBulkAction,\n            names: [name],\n            correlationId: (this.correlationId++).toString()\n        };\n        this.services.connection.sendMessage(message);\n        this.onSubscriptionSent(message);\n    };\n    BulkSubscriptionService.prototype.unsubscribeList = function (users) {\n        users.forEach(this.unsubscribe.bind(this));\n    };\n    BulkSubscriptionService.prototype.registerFlush = function () {\n        if (!this.services.timerRegistry.has(this.timerRef)) {\n            this.timerRef = this.services.timerRegistry.add({\n                callback: this.sendMessages,\n                context: this,\n                duration: this.subscriptionInterval\n            });\n        }\n    };\n    BulkSubscriptionService.prototype.sendMessages = function () {\n        if (!this.services.connection.isConnected) {\n            this.onLost();\n            return;\n        }\n        if (this.subscribeNames.size > 0) {\n            var message = {\n                topic: this.topic,\n                action: this.subscribeBulkAction,\n                names: __spread(this.subscribeNames),\n                correlationId: (this.correlationId++).toString()\n            };\n            this.services.connection.sendMessage(message);\n            this.onSubscriptionSent(message);\n            this.subscribeNames.clear();\n        }\n        if (this.unsubscribeNames.size > 0) {\n            var message = {\n                topic: this.topic,\n                action: this.unsubscribeBulkAction,\n                names: __spread(this.unsubscribeNames),\n                correlationId: (this.correlationId++).toString()\n            };\n            this.services.connection.sendMessage(message);\n            this.onSubscriptionSent(message);\n            this.unsubscribeNames.clear();\n        }\n    };\n    BulkSubscriptionService.prototype.onLost = function () {\n        this.correlationId = 0;\n        this.services.timerRegistry.remove(this.timerRef);\n        this.subscribeNames.clear();\n        this.unsubscribeNames.clear();\n    };\n    return BulkSubscriptionService;\n}());\nexports.BulkSubscriptionService = BulkSubscriptionService;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/util/bulk-subscription-service.ts?");

/***/ }),

/***/ "./src/util/emitter.ts":
/*!*****************************!*\
  !*** ./src/util/emitter.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Emitter = void 0;\nvar Emitter = /** @class */ (function () {\n    function Emitter() {\n        this.callbacks = null;\n    }\n    /**\n     * Listen on the given `event` with `fn`.\n     */\n    Emitter.prototype.on = function (event, fn, scope) {\n        if (scope === void 0) { scope = this; }\n        this.callbacks = this.callbacks || new Map();\n        var callbacks = this.callbacks.get(event);\n        if (!callbacks) {\n            callbacks = [{ fn: fn, scope: scope }];\n            this.callbacks.set(event, callbacks);\n        }\n        else {\n            callbacks.push({ fn: fn, scope: scope });\n        }\n        return this;\n    };\n    Emitter.prototype.once = function (event, fn, scope) {\n        var _this = this;\n        if (scope === void 0) { scope = this; }\n        var on = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            _this.off(event, on, _this);\n            fn.apply(_this, args);\n        };\n        on.fn = fn;\n        this.on(event, on, scope);\n        return this;\n    };\n    /**\n     * Remove the given callback for `event` or all\n     * registered callbacks.\n     */\n    Emitter.prototype.off = function (event, fn, scope) {\n        // all\n        if (event === undefined && fn === undefined && scope === undefined) {\n            this.callbacks = null;\n        }\n        if (this.callbacks === null) {\n            return this;\n        }\n        // specific event\n        var callbacks = this.callbacks.get(event);\n        if (!callbacks) {\n            return this;\n        }\n        // remove all handlers\n        if (fn === undefined && scope === undefined) {\n            this.callbacks.delete(event);\n            return this;\n        }\n        // remove specific handler\n        callbacks = callbacks.filter(function (item) {\n            var cb = item.fn, context = item.scope;\n            // handle unsubscribing from all callbacks for a given record path\n            if (event !== '' && fn === undefined && scope === context) {\n                return false;\n            }\n            if (cb === fn || cb.fn === fn) {\n                if (scope === undefined || scope === context) {\n                    return false;\n                }\n            }\n            return true;\n        });\n        if (callbacks.length === 0) {\n            this.callbacks.delete(event);\n        }\n        else {\n            this.callbacks.set(event, callbacks);\n        }\n        return this;\n    };\n    Emitter.prototype.removeContext = function (context) {\n        var e_1, _a;\n        if (this.callbacks === null) {\n            return;\n        }\n        try {\n            for (var _b = __values(this.callbacks), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = __read(_c.value, 2), eventName = _d[0], callbacks = _d[1];\n                this.callbacks.set(eventName, callbacks.filter(function (_a) {\n                    var scope = _a.scope;\n                    return scope === context;\n                }));\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    Emitter.prototype.emit = function (event) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (this.callbacks === null) {\n            return this;\n        }\n        var callbacks = this.callbacks.get(event);\n        if (!callbacks || callbacks.length === 0) {\n            return this;\n        }\n        // We slice them here incase they are 'once' which would shift the array\n        callbacks = callbacks.slice(0);\n        callbacks.forEach(function (_a) {\n            var fn = _a.fn, scope = _a.scope;\n            return fn.apply(scope, args);\n        });\n        return this;\n    };\n    /**\n     * Check if this emitter has `event` handlers.\n     */\n    Emitter.prototype.hasListeners = function (event) {\n        if (this.callbacks === null) {\n            return false;\n        }\n        return this.callbacks.has(event);\n    };\n    /**\n     * Returns an array listing the events for which the emitter has registered listeners.\n     */\n    Emitter.prototype.eventNames = function () {\n        if (this.callbacks === null) {\n            return [];\n        }\n        return __spread(this.callbacks.keys());\n    };\n    return Emitter;\n}());\nexports.Emitter = Emitter;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/util/emitter.ts?");

/***/ }),

/***/ "./src/util/interval-timer-registry.ts":
/*!*********************************************!*\
  !*** ./src/util/interval-timer-registry.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IntervalTimerRegistry = void 0;\nvar IntervalTimerRegistry = /** @class */ (function () {\n    function IntervalTimerRegistry(timerResolution) {\n        this.timerResolution = timerResolution;\n        this.registry = new Map();\n        this.timerIdCounter = 0;\n        this.timerId = setTimeout(this.triggerTimeouts.bind(this), this.timerResolution);\n    }\n    IntervalTimerRegistry.prototype.close = function () {\n        clearInterval(this.timerId);\n    };\n    IntervalTimerRegistry.prototype.triggerTimeouts = function () {\n        var e_1, _a;\n        var now = Date.now();\n        try {\n            for (var _b = __values(this.registry), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = __read(_c.value, 2), timerId = _d[0], timeout = _d[1];\n                if (now - timeout.created > timeout.duration) {\n                    timeout.callback.call(timeout.context, timeout.data);\n                    this.registry.delete(timerId);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        this.timerId = setTimeout(this.triggerTimeouts.bind(this), this.timerResolution);\n    };\n    IntervalTimerRegistry.prototype.has = function (timerId) {\n        return this.registry.has(timerId);\n    };\n    IntervalTimerRegistry.prototype.add = function (timeout) {\n        this.timerIdCounter++;\n        timeout.created = Date.now();\n        this.registry.set(this.timerIdCounter, timeout);\n        return this.timerIdCounter;\n    };\n    IntervalTimerRegistry.prototype.remove = function (timerId) {\n        return this.registry.delete(timerId);\n    };\n    IntervalTimerRegistry.prototype.requestIdleCallback = function (callback) {\n        setTimeout(callback, 0);\n    };\n    return IntervalTimerRegistry;\n}());\nexports.IntervalTimerRegistry = IntervalTimerRegistry;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/util/interval-timer-registry.ts?");

/***/ }),

/***/ "./src/util/listener.ts":
/*!******************************!*\
  !*** ./src/util/listener.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Listener = void 0;\nvar constants_1 = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\nvar Listener = /** @class */ (function () {\n    function Listener(topic, services) {\n        this.topic = topic;\n        this.services = services;\n        this.listeners = new Map();\n        this.stopCallbacks = new Map();\n        if (topic === constants_1.TOPIC.RECORD) {\n            this.actions = constants_1.RECORD_ACTION;\n        }\n        else if (topic === constants_1.TOPIC.EVENT) {\n            this.actions = constants_1.EVENT_ACTION;\n        }\n        this.services.connection.onLost(this.onConnectionLost.bind(this));\n        this.services.connection.onReestablished(this.onConnectionReestablished.bind(this));\n    }\n    Listener.prototype.listen = function (pattern, callback) {\n        if (typeof pattern !== 'string' || pattern.length === 0) {\n            throw new Error('invalid argument pattern');\n        }\n        if (typeof callback !== 'function') {\n            throw new Error('invalid argument callback');\n        }\n        if (this.listeners.has(pattern)) {\n            this.services.logger.warn({\n                topic: this.topic,\n                action: this.actions.LISTEN,\n                name: pattern\n            }, constants_1.EVENT.LISTENER_EXISTS);\n            return;\n        }\n        this.listeners.set(pattern, callback);\n        this.sendListen(pattern);\n    };\n    Listener.prototype.unlisten = function (pattern) {\n        if (typeof pattern !== 'string' || pattern.length === 0) {\n            throw new Error('invalid argument pattern');\n        }\n        if (!this.listeners.has(pattern)) {\n            this.services.logger.warn({\n                topic: this.topic,\n                action: this.actions.UNLISTEN,\n                name: pattern\n            }, constants_1.EVENT.NOT_LISTENING);\n            return;\n        }\n        this.listeners.delete(pattern);\n        this.sendUnlisten(pattern);\n    };\n    /*\n   * Accepting a listener request informs deepstream that the current provider is willing to\n   * provide the record or event matching the subscriptionName . This will establish the current\n   * provider as the only publisher for the actual subscription with the deepstream cluster.\n   * Either accept or reject needs to be called by the listener\n   */\n    Listener.prototype.accept = function (pattern, subscription) {\n        this.services.connection.sendMessage({\n            topic: this.topic,\n            action: this.actions.LISTEN_ACCEPT,\n            name: pattern,\n            subscription: subscription\n        });\n    };\n    /*\n    * Rejecting a listener request informs deepstream that the current provider is not willing\n    * to provide the record or event matching the subscriptionName . This will result in deepstream\n    * requesting another provider to do so instead. If no other provider accepts or exists, the\n    * resource will remain unprovided.\n    * Either accept or reject needs to be called by the listener\n    */\n    Listener.prototype.reject = function (pattern, subscription) {\n        this.services.connection.sendMessage({\n            topic: this.topic,\n            action: this.actions.LISTEN_REJECT,\n            name: pattern,\n            subscription: subscription\n        });\n    };\n    Listener.prototype.stop = function (subscription, callback) {\n        this.stopCallbacks.set(subscription, callback);\n    };\n    Listener.prototype.handle = function (message) {\n        if (message.isAck) {\n            this.services.timeoutRegistry.remove(message);\n            return;\n        }\n        if (message.action === this.actions.SUBSCRIPTION_FOR_PATTERN_FOUND) {\n            var listener = this.listeners.get(message.name);\n            if (listener) {\n                listener(message.subscription, {\n                    accept: this.accept.bind(this, message.name, message.subscription),\n                    reject: this.reject.bind(this, message.name, message.subscription),\n                    onStop: this.stop.bind(this, message.subscription)\n                });\n            }\n            return;\n        }\n        if (message.action === this.actions.SUBSCRIPTION_FOR_PATTERN_REMOVED) {\n            var stopCallback = this.stopCallbacks.get(message.subscription);\n            if (stopCallback) {\n                stopCallback(message.subscription);\n                this.stopCallbacks.delete(message.subscription);\n            }\n            return;\n        }\n        this.services.logger.error(message, constants_1.EVENT.UNSOLICITED_MESSAGE);\n    };\n    Listener.prototype.onConnectionLost = function () {\n        this.stopCallbacks.forEach(function (callback, subscription) {\n            callback(subscription);\n        });\n        this.stopCallbacks.clear();\n    };\n    Listener.prototype.onConnectionReestablished = function () {\n        var _this = this;\n        this.listeners.forEach(function (callback, pattern) {\n            _this.sendListen(pattern);\n        });\n    };\n    /*\n    * Sends a C.ACTIONS.LISTEN to deepstream.\n    */\n    Listener.prototype.sendListen = function (pattern) {\n        var message = {\n            topic: this.topic,\n            action: this.actions.LISTEN,\n            name: pattern\n        };\n        this.services.timeoutRegistry.add({ message: message });\n        this.services.connection.sendMessage(message);\n    };\n    Listener.prototype.sendUnlisten = function (pattern) {\n        var message = {\n            topic: this.topic,\n            action: this.actions.UNLISTEN,\n            name: pattern\n        };\n        this.services.timeoutRegistry.add({ message: message });\n        this.services.connection.sendMessage(message);\n    };\n    return Listener;\n}());\nexports.Listener = Listener;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/util/listener.ts?");

/***/ }),

/***/ "./src/util/logger.ts":
/*!****************************!*\
  !*** ./src/util/logger.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Logger = void 0;\nvar constants_1 = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\nvar messages_1 = __webpack_require__(/*! @deepstream/protobuf/dist/types/messages */ \"./node_modules/@deepstream/protobuf/dist/types/messages.js\");\nvar all_1 = __webpack_require__(/*! @deepstream/protobuf/dist/types/all */ \"./node_modules/@deepstream/protobuf/dist/types/all.js\");\nfunction isEvent(action) {\n    // @ts-ignore\n    return constants_1.EVENT[action] !== undefined;\n}\nvar Logger = /** @class */ (function () {\n    function Logger(emitter) {\n        this.emitter = emitter;\n    }\n    Logger.prototype.warn = function (message, event, meta) {\n        var warnMessage = \"Warning: \" + all_1.TOPIC[message.topic];\n        var action = message.action;\n        if (action) {\n            warnMessage += \" (\" + messages_1.ACTIONS[message.topic][action] + \")\";\n        }\n        if (event) {\n            warnMessage += \": \" + constants_1.EVENT[event];\n        }\n        if (meta) {\n            warnMessage += \" \\u2013 \" + (typeof meta === 'string' ? meta : JSON.stringify(meta));\n        }\n        // tslint:disable-next-line:no-console\n        console.warn(warnMessage);\n    };\n    Logger.prototype.error = function (message, event, meta) {\n        if (isEvent(event)) {\n            if (event === constants_1.EVENT.IS_CLOSED || event === constants_1.EVENT.CONNECTION_ERROR) {\n                this.emitter.emit('error', meta, constants_1.EVENT[event], all_1.TOPIC[all_1.TOPIC.CONNECTION]);\n            }\n        }\n        else {\n            var action = event ? event : message.action;\n            this.emitter.emit('error', meta || message, messages_1.ACTIONS[message.topic][action], all_1.TOPIC[message.topic]);\n        }\n    };\n    return Logger;\n}());\nexports.Logger = Logger;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/util/logger.ts?");

/***/ }),

/***/ "./src/util/native-timer-registry.ts":
/*!*******************************************!*\
  !*** ./src/util/native-timer-registry.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NativeTimerRegistry = void 0;\nvar NativeTimerRegistry = /** @class */ (function () {\n    function NativeTimerRegistry() {\n        this.registry = new Set();\n    }\n    NativeTimerRegistry.prototype.close = function () {\n        this.registry.forEach(clearTimeout);\n        this.registry.clear();\n    };\n    NativeTimerRegistry.prototype.has = function (timerId) {\n        return this.registry.has(timerId);\n    };\n    NativeTimerRegistry.prototype.add = function (timeout) {\n        var _this = this;\n        var id = setTimeout(function () {\n            _this.remove(id);\n            timeout.callback.call(timeout.context, timeout.data);\n        }, timeout.duration);\n        this.registry.add(id);\n        return id;\n    };\n    NativeTimerRegistry.prototype.remove = function (timerId) {\n        clearTimeout(timerId);\n        return this.registry.delete(timerId);\n    };\n    NativeTimerRegistry.prototype.requestIdleCallback = function (callback) {\n        setTimeout(callback, 0);\n    };\n    return NativeTimerRegistry;\n}());\nexports.NativeTimerRegistry = NativeTimerRegistry;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/util/native-timer-registry.ts?");

/***/ }),

/***/ "./src/util/state-machine.ts":
/*!***********************************!*\
  !*** ./src/util/state-machine.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StateMachine = void 0;\nvar StateMachine = /** @class */ (function () {\n    function StateMachine(logger, stateMachine) {\n        this.stateMachine = stateMachine;\n        this.inEndState = false;\n        this.transitions = stateMachine.transitions;\n        this.state = stateMachine.init;\n        this.context = stateMachine.context;\n        this.history = [{ oldState: '-', newState: this.state, transitionName: '-' }];\n    }\n    /**\n     * Try to perform a state change\n     */\n    StateMachine.prototype.transition = function (transitionName) {\n        var transition;\n        for (var i = 0; i < this.transitions.length; i++) {\n            transition = this.transitions[i];\n            if (transitionName === transition.name && (this.state === transition.from || transition.from === undefined)) {\n                this.history.push({ oldState: this.state, transitionName: transitionName, newState: transition.to });\n                var oldState = this.state;\n                this.state = transition.to;\n                if (this.stateMachine.onStateChanged) {\n                    this.stateMachine.onStateChanged.call(this.context, this.state, oldState);\n                }\n                if (transition.handler) {\n                    transition.handler.call(this.context);\n                }\n                return;\n            }\n        }\n        var details = JSON.stringify({ transition: transitionName, fromState: this.state });\n        var debugHistory = this.history.reverse().reduce(function (result, entry) {\n            return result += \"\\n\\tFrom \" + entry.oldState + \" to \" + entry.newState + \" via \" + entry.transitionName;\n        }, '');\n        console.trace(\"Invalid state transition.\\nDetails: \" + details + \" \\nHistory: \" + debugHistory);\n    };\n    return StateMachine;\n}());\nexports.StateMachine = StateMachine;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/util/state-machine.ts?");

/***/ }),

/***/ "./src/util/timeout-registry.ts":
/*!**************************************!*\
  !*** ./src/util/timeout-registry.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TimeoutRegistry = void 0;\nvar constants_1 = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\nvar emitter_1 = __webpack_require__(/*! ../util/emitter */ \"./src/util/emitter.ts\");\n/**\n * Subscriptions to events are in a pending state until deepstream acknowledges\n * them. This is a pattern that's used by numerour classes. This registry aims\n * to centralise the functionality necessary to keep track of subscriptions and\n * their respective timeouts.\n */\nvar TimeoutRegistry = /** @class */ (function (_super) {\n    __extends(TimeoutRegistry, _super);\n    function TimeoutRegistry(services, options) {\n        var _this = _super.call(this) || this;\n        _this.services = services;\n        _this.options = options;\n        _this.register = new Map();\n        return _this;\n    }\n    /**\n     * Add an entry\n     */\n    TimeoutRegistry.prototype.add = function (timeout) {\n        if (timeout.duration === undefined) {\n            timeout.duration = this.options.subscriptionTimeout;\n        }\n        if (timeout.event === undefined) {\n            timeout.event = constants_1.EVENT.ACK_TIMEOUT;\n        }\n        /*\n        if (timeout.duration < 1) {\n          should we throw an error?\n          return -1\n        }\n        */\n        if (!this.services.connection.isConnected) {\n            return null;\n        }\n        this.remove(timeout.message);\n        var internalTimeout = {\n            timerId: -1,\n            uniqueName: this.getUniqueName(timeout.message),\n            // event: timeout.event,\n            timeout: timeout\n        };\n        internalTimeout.timerId = this.services.timerRegistry.add({\n            context: this,\n            callback: this.onTimeout,\n            duration: timeout.duration,\n            data: internalTimeout\n        });\n        this.register.set(internalTimeout.uniqueName, internalTimeout);\n        return internalTimeout.uniqueName;\n    };\n    /**\n     * Remove an entry\n     */\n    TimeoutRegistry.prototype.remove = function (message) {\n        var requestMsg;\n        var action = constants_1.RESPONSE_TO_REQUEST[message.topic][message.action];\n        if (!action) {\n            requestMsg = message;\n        }\n        else {\n            requestMsg = __assign(__assign({}, message), { action: action });\n        }\n        var uniqueName = this.getUniqueName(requestMsg);\n        this.clear(uniqueName);\n    };\n    /**\n     * Processes an incoming ACK-message and removes the corresponding subscription\n     */\n    TimeoutRegistry.prototype.clear = function (uniqueName) {\n        var timeout = this.register.get(uniqueName);\n        if (timeout) {\n            this.register.delete(uniqueName);\n            this.services.timerRegistry.remove(timeout.timerId);\n        }\n    };\n    /**\n     * Will be invoked if the timeout has occured before the ack message was received\n     */\n    TimeoutRegistry.prototype.onTimeout = function (internalTimeout) {\n        this.register.delete(internalTimeout.uniqueName);\n        var timeout = internalTimeout.timeout;\n        if (timeout.callback) {\n            timeout.callback(timeout.event, timeout.message);\n        }\n        else {\n            this.services.logger.warn(timeout.message, timeout.event);\n        }\n    };\n    /**\n     * Returns a unique name from the timeout\n     */\n    TimeoutRegistry.prototype.getUniqueName = function (message) {\n        var action = message.originalAction || message.action;\n        var name = \"\" + message.topic + action + \"_\";\n        if (message.correlationId) {\n            name += message.correlationId;\n        }\n        else if (message.name) {\n            name += message.name;\n        }\n        return name;\n    };\n    /**\n     * Remote all timeouts when connection disconnects\n     */\n    TimeoutRegistry.prototype.onConnectionLost = function () {\n        var e_1, _a;\n        try {\n            for (var _b = __values(this.register), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = __read(_c.value, 2), uniqueName = _d[0], timeout = _d[1];\n                this.services.timerRegistry.remove(timeout.timerId);\n                this.register.delete(uniqueName);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    return TimeoutRegistry;\n}(emitter_1.Emitter));\nexports.TimeoutRegistry = TimeoutRegistry;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/util/timeout-registry.ts?");

/***/ }),

/***/ "./src/util/utils.ts":
/*!***************************!*\
  !*** ./src/util/utils.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PromiseDelay = exports.normalizeArguments = exports.normalizeSetArguments = exports.getUid = exports.parseUrl = exports.shallowCopy = exports.deepCopy = exports.deepEquals = void 0;\n/**\n * Compares two objects for deep (recoursive) equality\n *\n * This used to be a significantly more complex custom implementation,\n * but JSON.stringify has gotten so fast that it now outperforms the custom\n * way by a factor of 1.5 to 3.\n *\n * In IE11 / Edge the custom implementation is still slightly faster, but for\n * consistencies sake and the upsides of leaving edge-case handling to the native\n * browser / node implementation we'll go for JSON.stringify from here on.\n *\n * Please find performance test results here\n *\n * http://jsperf.com/deep-equals-code-vs-json\n */\nvar deepEquals = function (objA, objB) {\n    if (objA === objB) {\n        return true;\n    }\n    else if (typeof objA !== 'object' || typeof objB !== 'object') {\n        return false;\n    }\n    return JSON.stringify(objA) === JSON.stringify(objB);\n};\nexports.deepEquals = deepEquals;\n/**\n * Similar to deepEquals above, tests have shown that JSON stringify outperforms any attempt of\n * a code based implementation by 50% - 100% whilst also handling edge-cases and keeping\n * implementation complexity low.\n *\n * If ES6/7 ever decides to implement deep copying natively (what happened to Object.clone?\n * that was briefly a thing...), let's switch it for the native implementation. For now though,\n * even Object.assign({}, obj) only provides a shallow copy.\n *\n * Please find performance test results backing these statements here:\n *\n * http://jsperf.com/object-deep-copy-assign\n */\nvar deepCopy = function (obj) {\n    if (typeof obj === 'object') {\n        return JSON.parse(JSON.stringify(obj));\n    }\n    return obj;\n};\nexports.deepCopy = deepCopy;\n/**\n * Copy the top level of items, but do not copy its items recourisvely. This\n * is much quicker than deepCopy does not guarantee the object items are new/unique.\n * Mainly used to change the reference to the actual object itself, but not its children.\n */\nvar shallowCopy = function (obj) {\n    if (Array.isArray(obj)) {\n        return obj.slice(0);\n    }\n    else if (typeof obj === 'object') {\n        var copy = Object.create(null);\n        var props = Object.keys(obj);\n        for (var i = 0; i < props.length; i++) {\n            copy[props[i]] = obj[props[i]];\n        }\n        return copy;\n    }\n    return obj;\n};\nexports.shallowCopy = shallowCopy;\n/**\n * Used to see if a protocol is specified within the url\n * @type {RegExp}\n */\nvar hasUrlProtocol = /^wss:|^ws:|^\\/\\//;\n/**\n * Used to see if the protocol contains any unsupported protocols\n * @type {RegExp}\n */\nvar unsupportedProtocol = /^http:|^https:/;\n/**\n * Take the url passed when creating the client and ensure the correct\n * protocol is provided\n * @param  {String} url Url passed in by client\n * @return {String} Url with supported protocol\n */\nvar parseUrl = function (initialURl, defaultPath) {\n    var url = initialURl;\n    if (unsupportedProtocol.test(url)) {\n        throw new Error('Only ws and wss are supported');\n    }\n    if (!hasUrlProtocol.test(url)) {\n        url = \"ws://\" + url;\n    }\n    else if (url.indexOf('//') === 0) {\n        url = \"ws:\" + url;\n    }\n    var protocol = url.split('//')[0];\n    var host = url.split('//')[1];\n    if (!host) {\n        throw new Error('Invalid URL: ws://');\n    }\n    var path = null;\n    if (host.indexOf('/') > -1) {\n        path = host.split('/');\n        host = path.shift() || '';\n        path = '/' + path.join('');\n    }\n    else {\n        if (host.indexOf('?') > -1) {\n            path = host.split('?');\n            host = path.shift() || '';\n            path = defaultPath + '?' + path.join('');\n        }\n    }\n    if (!path || path === '/')\n        path = defaultPath;\n    return protocol + \"//\" + host + path;\n};\nexports.parseUrl = parseUrl;\n/**\n* Returns a random string. The first block of characters\n* is a timestamp, in order to allow databases to optimize for semi-\n* sequentuel numberings\n*/\nvar getUid = function () {\n    var timestamp = (new Date()).getTime().toString(36);\n    var randomString = (Math.random() * 10000000000000000).toString(36).replace('.', '');\n    return timestamp + \"-\" + randomString;\n};\nexports.getUid = getUid;\n/**\n * Creates a map based on the types of the provided arguments\n */\nvar normalizeSetArguments = function (args, startIndex) {\n    if (startIndex === void 0) { startIndex = 0; }\n    var result;\n    var isRootData = function (data) { return data !== undefined && typeof data === 'object'; };\n    var isNestedData = function (data) { return typeof data !== 'function'; };\n    var isPath = function (path) { return path !== undefined && typeof path === 'string'; };\n    var isCallback = function (callback) { return typeof callback === 'function'; };\n    if (args.length === startIndex + 1) {\n        result = {\n            path: undefined,\n            data: isRootData(args[startIndex]) ? args[startIndex] : undefined,\n            callback: undefined\n        };\n    }\n    if (args.length === startIndex + 2) {\n        result = { path: undefined, data: undefined, callback: undefined };\n        if (!isCallback(args[startIndex]) && isNestedData(args[startIndex])) {\n            result.path = isPath(args[startIndex]) ? args[startIndex] : undefined;\n        }\n        if (isPath(args[startIndex])) {\n            result.data = isNestedData(args[startIndex + 1]) ? args[startIndex + 1] : undefined;\n        }\n        else {\n            result.data = isRootData(args[startIndex]) ? args[startIndex] : undefined;\n        }\n        if (!isPath(args[startIndex])) {\n            result.callback = isCallback(args[startIndex + 1]) ? args[startIndex + 1] : false;\n        }\n    }\n    if (args.length === startIndex + 3) {\n        result = {\n            path: isPath(args[startIndex]) ? args[startIndex] : undefined,\n            data: isNestedData(args[startIndex + 1]) ? args[startIndex + 1] : undefined,\n            callback: isCallback(args[startIndex + 2]) ? args[startIndex + 2] : undefined\n        };\n    }\n    if (result) {\n        if (result.path !== undefined && result.path.length === 0 ||\n            (result.path === undefined && !result.data)) {\n            throw Error('Invalid set path argument');\n        }\n        if (result.data === undefined && result.path === undefined) {\n            throw Error('Invalid set data argument');\n        }\n        if (result.callback !== undefined && result.callback === false ||\n            result.callback === undefined && args.length === startIndex + 3) {\n            throw Error('Invalid set callback argument');\n        }\n        return result;\n    }\n    throw Error('Invalid set arguments');\n};\nexports.normalizeSetArguments = normalizeSetArguments;\n/**\n * Creates a map based on the types of the provided arguments\n */\nvar normalizeArguments = function (args) {\n    // If arguments is already a map of normalized parameters\n    // (e.g. when called by AnonymousRecord), just return it.\n    if (args.length === 1 && typeof args[0] === 'object') {\n        return args[0];\n    }\n    var result = Object.create(null);\n    for (var i = 0; i < args.length; i++) {\n        if (typeof args[i] === 'string') {\n            result.path = args[i];\n        }\n        else if (typeof args[i] === 'function') {\n            result.callback = args[i];\n        }\n        else if (typeof args[i] === 'boolean') {\n            result.triggerNow = args[i];\n        }\n    }\n    return result;\n};\nexports.normalizeArguments = normalizeArguments;\nvar PromiseDelay = function (time) {\n    return new Promise(function (done) { return setTimeout(done, time); });\n};\nexports.PromiseDelay = PromiseDelay;\n\n\n//# sourceURL=webpack://DeepstreamClient/./src/util/utils.ts?");

/***/ }),

/***/ 0:
/*!******************************!*\
  !*** multi ./src/deepstream ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./src/deepstream */\"./src/deepstream.ts\");\n\n\n//# sourceURL=webpack://DeepstreamClient/multi_./src/deepstream?");

/***/ })

/******/ });
});